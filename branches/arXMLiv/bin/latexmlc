#!/usr/bin/perl -w

#######################
# A Client for LaTeXML
#######################
use strict;
use warnings;

use Pod::Usage;
use Cwd qw(cwd abs_path);
use IO::Socket;

my $RealBin_safe;
use FindBin;
BEGIN {
  $FindBin::RealBin =~ /^([^\0]+)\z/; # Valid Unix path TODO: Windows, revisit regexp
  $RealBin_safe = $1;
  die 'Fatal:IO:tainted RealBin was tainted! Failing...' unless ($RealBin_safe && (-e $RealBin_safe.'/latexmlc'));
}
# TODO: We probably want file cat for things like /../lib instead of spelling out a Unix path
use lib $RealBin_safe."/../lib";
#TODO: Do we ever care about ENV PATH that much? Do we miss on some feature like that?
#$ENV{PATH} = "$RealBin_safe:/usr/bin:/usr/local/bin:";

use LaTeXML::Converter;
use LaTeXML::Version;
use LaTeXML::Util::Pathname;
use LaTeXML::Util::Config;
use JSON::XS qw(encode_json decode_json);

binmode(STDERR,":encoding(UTF-8)");
binmode(STDOUT,":encoding(UTF-8)");

# Some defaults:
my $opts=LaTeXML::Util::Config->new(
  profile => 'custom',
  'input_limit' => 100,
  timeout => -1, # Don't start a server as default
  port => 3354,
  verbosity=>0);
my %portlist = ( math=>3334, fragment=>3344, standard=>3354);

# Parse and load command-line options
$opts->read(\@ARGV);

$opts->set('port', $portlist{$opts->get('profile')}) unless $opts->get('port');
$opts->set('port', 3334) unless $opts->get('port'); #Fall back to 3334 if all fails...
$opts->set('address','127.0.0.1') unless ($opts->get('address') && ($opts->get('address') ne 'localhost'));
# Local if peerhost is localhost:
$opts->set('local', (( $opts->get('timeout') == -1 ) || ($opts->get('address') eq '127.0.0.1')));

#***************************************************************************
#Add some base, so that relative paths work
my $cdir = abs_path(cwd());
$cdir =~ s/ /\\ /g;
$opts->set('base',$cdir) unless $opts->get('base');

# Record if destination exists, for summary
my $deststat;
$deststat = (stat($opts->get('destination')))[9] if $opts->get('destination');
$deststat = 0 unless defined $deststat;

push @{$opts->get('paths')}, $cdir; #add current path, to ensure never empty

# Get the full source of interest
my $source = $opts->get('source');
$opts->delete('source');
if (! $source) {print STDERR "Input was empty.\n"; exit 1; }
if($source eq '-'){
  { local $/ = undef;
    $source="literal:".<>; }}
#***************************************************************************
# Prepare output variables:
my  ($result, $status, $log);

# TODO: Talk to the web service via HTTP
#Setup client and communicate
my $sock = IO::Socket::INET->new
  ( PeerAddr => $opts->get('address'),
    PeerPort => $opts->get('port'),
    Proto => 'tcp',
  ); #Attempt connecting to a service
if ((!$sock) && ($opts->get('timeout') == -1)) {
  # Don't boot a server, single job requested:
  # NOTE: Log will differ, single run gets initialization log at STDERR
  #       while server communication suppresses that part of the log otherwise
  #   (except when errors occur)
  my $converter = LaTeXML::Converter->get_converter($opts);
  $converter->prepare_session($opts);
  my $response = $converter->convert($source);
  ($result, $status, $log) = map { $response->{$_} } qw(result status log) if defined $response;

} else {
  #Startup daemon and feed in args, if needed
  system("$RealBin_safe/latexmls",'--port='.$opts->get('port'),
    '--timeout='.$opts->get('timeout'),'--autoflush='.$opts->get('input_limit')) unless $sock;

  #daemon is running, reconnect and feed in request
  $sock = IO::Socket::INET->new
    ( PeerAddr => $opts->get('address'),
      PeerPort => $opts->get('port'),
      Proto => 'tcp',
    );
  if (!$sock) { print STDERR "Fatal:perl:socket-create Could not create socket: $!\n"; exit 1; }
  # TODO: Think about sending the command-line options themselves,
  #       then external applications could easily also reuse the socket server.
  $opts->set('source',$source);
  $sock->send(encode_json($opts->options)."\nEND REQUEST\n");
  my ($response,$batch);
  do {
    $sock->recv($batch,1024);
    $response.=$batch;
  } while ($batch);
  close($sock);
  $response = decode_json($response);
  ($result, $status, $log) = map { $response->{$_} } qw(result status log) if defined $response;
}

#***************************************************************************
### Common treatment of output:

# Special features for latexmls:
if ($log) {
  if ($opts->get('log')) {
    my $clog = $opts->get('log');
    my $log_handle;
    if (! open($log_handle,">",$clog)) {
      print STDERR "Fatal:IO:forbidden Couldn't open log file $clog : $!\n";
      exit 1;
    }
    print $log_handle $log;
    close $log_handle;
  } else {print STDERR $log,"\n";}#STDERR log otherwise
}

if ($result) {
  if ($opts->get('destination')) {
    my $output_handle;
    if ( ! open($output_handle,">",$opts->get('destination')) ) {
      print STDERR "Fatal:IO:forbidden Couldn't open output file ".$opts->get('destination').": $!";
      exit 1;
    }
    print $output_handle $result;
    close $output_handle;
  } else { print STDOUT $result,"\n"; } #Output to STDOUT
}

# Print summary, if requested, to STDERR
if ($opts->get('destination')) {
  print STDERR $status;
  print STDERR summary($opts->get('destination'),$deststat);
}

# == Helpers ==
sub summary {
  my ($destination,$prior_stat) = @_;
  my $new_stat = (stat($destination))[9] || 0;
  return ($new_stat && ($prior_stat != $new_stat)) ? "\nWrote $destination\n" :
  "\nError! Did not write file $destination\n";
}

#**********************************************************************
__END__

=head1 NAME

C<latexmlc> - A client for L<latexml>, L<latexmlpost> and L<latexmlmath>.

=head1 SYNOPSYS

See the OPTIONS section in L<LaTeXML::Util::Config> for usage information.
Also consult latexmlc --help

=head1 DESCRIPTION

L<latexmlc> provides a client which automatically sets up a LaTeXML local server if necessary
(via L<latexmls>).

If such server already exists, the client proceeds to communicate normally.

=head1 SEE ALSO

L<latexmls>, L<ltxmojo>, L<LaTeXML::Util::Config>

=cut
#**********************************************************************

