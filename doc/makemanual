#!/usr/bin/perl -w
use strict;
use FindBin;
use lib "$FindBin::RealBin/../blib/lib",$FindBin::RealBin;
use Carp;
use Getopt::Long qw(:config no_ignore_case);
use Pod::Usage;
use MakeTools;

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Assume this script is in LaTeXML's doc directory!
my $DOCDIR   = $FindBin::RealBin;
# Use latexml from blib!
my $LATEXMLDIR = "$DOCDIR/..";
$ENV{PATH} = "$LATEXMLDIR/blib/script:$ENV{PATH}";
$ENV{TEXINPUTS} = "$LATEXMLDIR/blib/lib/LaTeXML/texmf"
  .($ENV{TEXINPUTS} ? ":".$ENV{TEXINPUTS} : '')
  ."::";
my $MANDIR   = "$DOCDIR/manual";
my $WEBDEST  = "/local/www/site/htdocs/LaTeXML";

my $identity = "makemanual (part of LaTeXML)";
my($force,$help)=(0,0);
my ($dopdf,$doxhtml)=(undef,undef);
GetOptions("force!"  => \$force,
	   "help"    => \$help,
	   "pdf!"    => \$dopdf,
	   "xhtml!"  => \$doxhtml,
	  ) or pod2usage(-message => $identity, -exitval=>1, -verbose=>0, -output=>\*STDERR);
pod2usage(-message=>$identity, -exitval=>1, -verbose=>2, -output=>\*STDOUT) if $help;

BEGIN { $SIG{__DIE__} = \&confess; }

if((! defined $dopdf) && (! defined $doxhtml)){
  $dopdf = $doxhtml = 1; }
elsif(!defined $dopdf){
  $dopdf = 1 if defined $doxhtml && !$doxhtml;}
elsif(!defined $doxhtml){
  $doxhtml = 1 if defined $dopdf && !$dopdf;}

#======================================================================
# Generate Appendices from PODS, Schema, etc
#======================================================================
heading("Extracting Appendices");
system("$MANDIR/genpods".($force ? " --force":""))==0
  or warn "Failed to generate pods?";
system("$MANDIR/genschema".($force ? " --force":""))==0
  or warn "Failed to generate schema documentation?";
my $version;
{ use LaTeXML;
  $version = $LaTeXML::VERSION; }
saveData("$MANDIR/release.tex", "\\def\\CurrentVersion{$version}\n");

#======================================================================
# Now generate the manual
#======================================================================
if($dopdf){
  heading("Generating pdf of manual");
  pdflatex("$MANDIR/manual.tex",
	   dependencies=>["$DOCDIR/sty/latexmldoc.sty", "$MANDIR/release.tex",
			  "$MANDIR/schema.tex","$MANDIR/pods"],
	   indexoptions=>[],
	   force=>$force);
  copy("$MANDIR/manual.pdf","$LATEXMLDIR/manual.pdf");
  copy("$MANDIR/manual.pdf","$WEBDEST/manual.pdf");
}

if($doxhtml){
  heading("Generating xhtml of manual");
  latexml("$MANDIR/manual.tex"=>"$WEBDEST/manual/index.xhtml",
	  dependencies=>["$DOCDIR/sty/latexmldoc.sty.ltxml", "$MANDIR/release.tex",
			 "$MANDIR/schema.tex","$MANDIR/pods"],
	  postoptions=>["--split","--splitnaming=labelrelative",
			"--urlstyle=server","--css=../latexmldoc.css"],
	  force=>$force);
}
#======================================================================
__END__

=head1 NAME

C<makemanual> - generate manual for LaTeXML

=head1 SYNOPSIS

makemanual [options]

 Options:
  --force           Force regeneration (default: only if needed)
  --help            Shows this help.

=cut
#**********************************************************************
