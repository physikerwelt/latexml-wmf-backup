# -*- CPERL -*-
# /=====================================================================\ #
# |  DLMF                                                               | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;

#**********************************************************************
# Document
#**********************************************************************
DocType("ltx:document","-//NIST LaTeXML//LaTeXML DLMF Chapter",'DLMF.dtd',
	'#default'=>"http://dlmf.nist.gov/LaTeXML");


RequirePackage('graphicx');
RequirePackage('color');
RequirePackage('amsmath');
RequirePackage('amssymb');
RequirePackage('DLMFmath');
RequirePackage('url');
RequirePackage('comment');
RequirePackage('tabularx');
RequirePackage('latexml');


# If we get this, we're doing a "chapter"
DefPrimitive('\thischapter[]{}', sub {
  my($stomach,$chnum,$chcode)=@_;
  $chcode=$chcode->toString;
  $chnum= ($chnum ? $chnum->toString : $chcode);

  AssignValue(DOCUMENTID=>$chnum,'global');
  DefMacroI('\thechapter',undef,$chnum); 
  DefMacroI('\thechapter@ID',undef,"C$chnum");
  DefMacroI('\@currentlabel',undef,$chcode);
  AssignValue("\\c\@chapter"=>$chnum,'global');
  AssignValue(current_counter=>'chapter','local');
  AssignValue(Chapter=>$chnum,'global');
  AssignValue(ChapterID=>"C$chnum",'global');
  AssignValue(ChapterLabel=>"ch:$chcode",'global');  
  DocType("ltx:chapter","-//NIST LaTeXML//LaTeXML DLMF Chapter",'DLMF.dtd',
	  '#default'=>"http://dlmf.nist.gov/LaTeXML");
  Tag('ltx:chapter', afterOpen=>\&insertDLMFFrontMatter);
  Tag('ltx:chapter', afterClose=>\&extractSourceNotes);
});

DefMacro('\toctitle{}', '\@add@frontmatter{ltx:toctitle}{#1}');

sub LookupChapterMetaID { ToString(LookupValue('ChapterID')).".info"; }
  
DefEnvironment('{document}',
	       "?&LookupValue(Chapter)"
	       .  "(<ltx:chapter id='&LookupValue(ChapterID)' refnum='&LookupValue(Chapter)'"
	       .         " label='&LookupValue(ChapterLabel)'>"
	       .      "<ltx:metadata id='&LookupChapterMetaID()'/>"
	       .      "#body"
	       .    "</ltx:chapter>)"
	       .  "(<ltx:document>#body</ltx:document>)",
	       beforeDigest=> sub { AssignValue(inPreamble=>0); },
	       afterDigest=> sub { $_[0]->getGullet->flush; return; });

sub insertDLMFFrontMatter {
  my($document)=@_;
  Digest(T_CS('\default@gallery'));
  insertFrontMatter($document); }

sub extractSourceNotes {
  my($doc)=@_;
  my $savenode = $doc->getNode;
  # Extract "source" notes from References \part (if any), and remove the part.
  my $ch = ToString(LookupValue('ChapterID'));
  if(my $pt = $doc->findnode("//ltx:part[child::ltx:title[text() = 'References']]")){
    $pt->parentNode->removeChild($pt);
    ## Since the Sources section seems to have evolved into a COPY of all the
    ## annotations throughout the chapter, there's little sense adding it back
    ## to the sections
    if(0){
    if(my $gen= $doc->findnode("ltx:section[child::ltx:title"
			       ."[text()='General References']]",$pt)){
      if(my $meta = $doc->findnode("ltx:metadata[\@id='$ch.info']",
				   $doc->getDocument->documentElement)){
	$doc->setNode($meta);
	my $note = $doc->openElement('ltx:note',class=>'source');
	map($note->appendChild($_),$doc->findnodes("descendant::ltx:p/node()",$gen));
	$doc->closeElement('ltx:note'); }
      else {
	Warn("No metadata node found for $ch"); }}
#    else {  # This is optional...
#      Warn("No 'General References' section found"); }
    if(my $oth = $doc->findnode("ltx:section[child::ltx:title"
				     ."[text()='Sources']]",$pt)){
      foreach my $item ($doc->findnodes("descendant::ltx:description/ltx:item",$oth)){
	my $tag= $doc->findnode('ltx:tag',$item);
	$tag->parentNode->removeChild($tag);
	foreach my $label (map($_->getAttribute('labelref'),
			       $doc->findnodes("ltx:ref",$tag))){
	  if(my $sec = $doc->findnode("//ltx:section[\@label = '$label']")){
	    my $id = $sec->getAttribute('id');
	    if(my $meta = $doc->findnode("ltx:metadata[\@id='$id.info']",$sec)){
	      $doc->setNode($meta);
	      my $note = $doc->openElement('ltx:note',class=>'source');
	      map($note->appendChild($_), $item->childNodes());
	      $doc->closeElement('ltx:note'); }
	    else {
	      Warn("No metadata node found for $id"); }}
	  else {
	    Warn("No matching section for 'Sources' entry $label"); }}
      }}
    else {
      Warn("No 'Sources' section found"); }
  }}
  else {
    Warn("No 'References' part found"); }
  $doc->setNode($savenode); }
#======================================================================
# Redefine to add a <metadata> block
# \@@section{type}[refnum][id][toctitle]{title}
DefConstructor('\\@@section{}[][][]{}',sub {
  my($document,$type,$refnum,$id,$toctitle,$title)=@_;
  $id = ToString($id);
  $document->openElement("ltx:".$type->toString,refnum=>$refnum,id=>$id);
  $document->insertElement('ltx:title',$title);
  $document->insertElement('ltx:toctitle',$toctitle) if $toctitle;
  $document->insertElement('ltx:metadata',undef, id=>$id.".info");
},
  properties=>{refnum=>'#2',id=>'#3'},
  bounded=>1);

#======================================================================
# DLMF's Numbering scheme.
DefPrimitive('\subparagraph',sub { Error("Don't use \\subparagraph!!!"); });

NewCounter('chapter',      undef,       idprefix=>'C');
NewCounter('part',         'chapter',   idprefix=>'PT');
NewCounter('section',      'chapter',   idprefix=>'S');
NewCounter('subsection',   'section',   idprefix=>'SS');
NewCounter('subsubsection','subsection',idprefix=>'SSS');
NewCounter('paragraph',    'section',   idprefix=>'P');
NewCounter('sidebar',      'chapter',   idprefix=>'SB');

DefMacro('\thechapter',      'XX');
DefMacro('\thechapter@ID',   'XX');
DefMacro('\thepart',         '');
DefMacro('\thesection',      '\thechapter.\arabic{section}');
DefMacro('\thesubsection',   '\thesection(\roman{subsection})');
DefMacro('\thesubsubsection','\thesubsection(\roman{subsubsection})');
DefMacro('\theparagraph',    '');
DefMacro('\thesubparagraph', '');
DefMacro('\thesidebar',      '\thechapter.SB\arabic{sidebar}');

NewCounter('equation', 'section', idprefix=>'E');
NewCounter('equationgroup', 'section', idprefix=>'EG');
NewCounter('figure',   'section', idprefix=>'F');
NewCounter('table',    'section', idprefix=>'T');
# Note that these are ambiguous
DefMacro('\theequation','\thesection.\arabic{equation}');
DefMacro('\theequationgroup','');
DefMacro('\thefigure',  '\thesection.\arabic{figure}');
DefMacro('\thetable',   '\thesection.\arabic{table}');

NewCounter('@itemizei',   'section',    idprefix=>'I');
NewCounter('@itemizeii',  '@itemizei',  idprefix=>'I');
NewCounter('@itemizeiii', '@itemizeii', idprefix=>'I');
NewCounter('@itemizeiv',  '@itemizeiii',idprefix=>'I');
NewCounter('@itemizev',   '@itemizeiv', idprefix=>'I');
NewCounter('@itemizevi',  '@itemizev',  idprefix=>'I');

NewCounter('enumi',  '@itemizei',   idprefix=>'i');
NewCounter('enumii', '@itemizeii',  idprefix=>'i');
NewCounter('enumiii','@itemizeiii', idprefix=>'i');
NewCounter('enumiv', '@itemizeiv',  idprefix=>'i');
# A couple of more levels, since we use these for ID's!
NewCounter('enumv',  '@itemizev',   idprefix=>'i');
NewCounter('enumvi', '@itemizevi',  idprefix=>'i');

DefMacro('\theenumi',           '\arabic{enumi}');
DefMacro('\theenumii',          '\alph{enumii}');
DefMacro('\theenumiii',         '\roman{enumiii}');
DefMacro('\theenumiv',          '\Alph{enumiv}');

# Number these per section.
NewCounter('@XMARG', 'section',idprefix=>'XM');
NewCounter('@XMDECL','section',idprefix=>'XMD');

#**********************************************************************
# Frontmatter

DefPrimitive('\status{}', sub{ AssignValue(chapter_status=>$_[1]); });

DefMacro('\author[]{}',
 '\@add@frontmatter{ltx:creator}[role=author,idref=\ifx.#1.\else bio:#1\fi]{\@personname{#2}}');

DefConstructor('\@affiliation{}',"^ <ltx:contact role='affiliation'>#1</ltx:contact>");
DefMacro('\affiliation{}','\@add@to@frontmatter{ltx:creator}{\@affiliation{#1}}');

DefConstructor('\@email{}',"^ <ltx:contact role='email'>#1</ltx:contact>");
DefMacro('\email{}', '\@add@to@frontmatter{ltx:creator}{\@email{#1}}');

DefConstructor('\addCopyright{}{}','');#"<ltx:copyright year='#1'>#2</ltx:copyright>");

## DefMacro('\acknowledgements{}', '\@add@frontmatter{ltx:acknowledgements}{#1}');
# No, float it to the metadata.
DefConstructor('\acknowledgements{}', '^<ltx:acknowledgements>#1</ltx:acknowledgements>');

DefConstructor('\@galleryitem Semiverbatim Semiverbatim',
	       "<ltx:galleryitem labelref='#1' graphic='#2'/>");
DefMacro('\galleryitem Semiverbatim Semiverbatim',
	 '\@add@to@frontmatter{ltx:gallery}{\@galleryitem{\ifx.#1.\else sb:\thechapter.#1\fi}{#2}}'
	.'\gdef\default@gallery{}');

DefMacro('\default@gallery',
	 '\galleryitem{}{}'
	 .'\galleryitem{}{}');
DefPrimitive('\gallerynote{}',undef); # Ignore
#**********************************************************************
# Backmatter.
# Ignore bibliography.
DefConstructor('\bibliography Semiverbatim','');

#**********************************************************************
# More environments.
DefEnvironment('{figuregroup}', "<ltx:figuregroup>#body</ltx:figuregroup>");
DefEnvironment('{figuregroup*}',"<ltx:figuregroup>#body</ltx:figuregroup>");

DefEnvironment('{tablegroup}', "<ltx:tablegroup>#body</ltx:tablegroup>");
DefEnvironment('{tablegroup*}',"<ltx:tablegroup>#body</ltx:tablegroup>");


#**********************************************************************
# Pseudo environments.
# Not really environments that transform to elements, since they
# don't necessarily nest properly with the more important document structure.
DefEnvironment('{onecolumn}', "<ltx:begin_onecolumn/>#body<ltx:end_onecolumn/>");
# Oh, what the heck, strip out printonly, and make electroniconly disappear!
DefEnvironment('{printonly}', "<ltx:printonly>#body</ltx:printonly>");
Tag('ltx:printonly', afterClose=>sub { $_[1]->getParentNode->removeChild($_[1]); });
DefMacro('\onlyprint{}', "");

DefEnvironment('{electroniconly}','#body');
DefMacro('\onlyelectronic{}',"#1"); # macro? constructor?

DefEnvironment('{sidebar}{}{}{}',
	       "<ltx:sidebar name='#1' label='#label' id='#id'>"
	       . "<ltx:title>#2</ltx:title>"
	       . "<ltx:creator role='author'><ltx:personname>#3</ltx:personname></ltx:creator>"
	       . "#body"
	       ."</ltx:sidebar>",
	       beforeDigest=> sub { 
		 Let('\thesection','\thesidebar');
		 Let('\thesection@ID','\thesidebar@ID'); },
	       properties=> sub { (RefStepCounter('sidebar'),
				   label => sub { "sb:".ToString(Digest(T_CS('\thechapter'))).".".ToString($_[1]); }); });

#**********************************************************************
# Metadata
DefConstructor('\note{}', "^<ltx:note>#1</ltx:note>", mode=>'text', reversion=>'');
DefConstructor('\origref[]{}', "^<ltx:origref ref='#2'>#1</ltx:origref>", mode=>'text', reversion=>'');

# New form of \index allows * (to hide from printed index)
DefMacro('\index OptionalMatch:*{}', sub { my($gullet,$star,$phrases)=@_;
						process_index_phrases($gullet,$phrases); });
# Also, redefine phrase to add a keyword to the metadata.
DefMacro('\@indexphrase[]{}','\@@indexphrase[#1]{#2}\@@indexkeyword[#1]{#2}');
DefConstructor('\@@indexphrase[]{}',
	       "<ltx:indexphrase key='#key'>#2</ltx:indexphrase>",
	       properties=>{key=>sub { cleanIndexKey($_[1]); }});
DefConstructor('\@@indexkeyword[]{}',
	       "^<ltx:indexkeyword key='#key'>#2</ltx:indexkeyword>",
	       properties=>{key=>sub { cleanIndexKey($_[1]); }});
Tag('ltx:indexkeyword',afterClose=>\&addIndexKey);

# NOTE: the "^" prefix allows these to float up out of math mode.
DefConstructor('\MarkDefn {}{}',
	       "^<ltx:mark type='definition'>"
	       .  "<ltx:tag>#1</ltx:tag>"
	       .  "<ltx:text>#2</ltx:text>"
	       ."</ltx:mark>",
	       mode=>'text', reversion=>'');
DefConstructor('\MarkNotation {}{}',
	       "^<ltx:mark type='notation'>"
	       .  "<ltx:tag>#1</ltx:tag>"
	       .  "<ltx:text>#2</ltx:text>"
	       ."</ltx:mark>",
	       mode=>'text', reversion=>'');

DefMacro('\indexdefn{}','\index{#1|textbf}'); # This'll work.
DefMacro('\indexodd{}',''); # Ignore
DefMacro('\indexnew{}','\index{#1}');
DefMacro('\indexlong{}','\index{#1}');
#**********************************************************************
# More Math environments.

# Redefine to accept optional (ignored) arg.
DefEnvironment('{equation}[]',
	       "<ltx:equation id='#id' refnum='#refnum'>"
	       . "<ltx:metadata id='#id.info'/>"
	       . "<ltx:Math mode='display'>"
	       .  "<ltx:XMath>"
	       .   "#body"
	       .  "</ltx:XMath>"
	       . "</ltx:Math>"
	       ."</ltx:equation>",
	       mode=>'display_math',
	       properties=> sub { RefStepCounter('equation') });
DefEnvironment('{equation*}[]',
	       "<ltx:equation id='#id'>"
	       . "<ltx:Math mode='display'>"
	       .  "<ltx:XMath>"
	       .   "#body"
	       .  "</ltx:XMath>"
	       . "</ltx:Math>"
	       ."</ltx:equation>",
	       mode=>'display_math',
	       properties=> sub { RefStepID('equation') });

# equationmix contains several math environments, 
# Each math produces inline math, BUT we've set displaystyle in them!
# Although equationmix is handled differently in LaTeX, <equation>'s model is adequate.
DefEnvironment('{equationmix}[]',
	       "<ltx:equation id='#id' refnum='#refnum'>"
	       . "<ltx:metadata id='#id.info'/>"
	       . "#body"
	       ."</ltx:equation>",
	       properties=> sub { RefStepCounter('equation') },
	       # NOTE: We'd like to have displaystyle (but NOT mode=display!) for enclosed math env!
	       # Use displaystyles for math environments within here.
	       beforeDigest => sub {
		 DefEnvironment('{math}',
				"<ltx:Math mode='inline'><ltx:XMath>#body</ltx:XMath></ltx:Math>",
				mode=>'inline_math',
				beforeDigest=>sub { AssignValue(mathstyle=>'display'); });
	       }
);
DefEnvironment('{equationmix*}[]',
	       "<ltx:equation id='#id'>#body</ltx:equation>",
	       properties=> sub { RefStepID('equation') });
# NOTE: I haven't handled the subequation case!!! (where equations themselves get numbered!)
DefEnvironment('{equationgroup}[]', 
	       "<ltx:equationgroup id='#id' refnum='#refnum'>"
	       . "<ltx:metadata id='#id.info'/>"
	       . "#body"
	       ."</ltx:equationgroup>",
	       properties=> sub { RefStepCounter('equation') });
DefEnvironment('{equationgroup*}[]',
	       "<ltx:equationgroup id='#id'>#body</ltx:equationgroup>",
	       properties=> sub { RefStepID('equationgroup') });

DefConstructor('\@constraint OptionalMatch:* {}',
	       "^<ltx:constraint hidden='?#1(yes)(no)'>#2</ltx:constraint>",
	       mode=>'text', reversion=>'');

DefMacro('\constraint OptionalMatch:* [Default:,]{}',sub { 
  my($gullet,$starred,$punct,$constraint)=@_;
  if($starred){			# hidden.
    (T_CS('\@constraint'),T_OTHER('*'),T_BEGIN,$constraint->unlist,T_END); }
  else {
    $gullet->skipSpaces();
    my $ppunct = $gullet->readMatch(T_OTHER('.'),T_OTHER(','),T_OTHER(';')) || Tokens();
    ($punct->unlist, T_CS('\@constraint'), T_BEGIN,$constraint->unlist,$ppunct->unlist,T_END); }});

#**********************************************************************
# Redefine to include metadata block.

DefEnvironment('{figure}[]',
	       "<ltx:figure id='#id' refnum='#refnum' ?#1(placement='#1')>"
	       . "<ltx:metadata id='#id.info'/>"
	       . "#body"
	       ."</ltx:figure>",
	       properties=> sub { RefStepCounter('figure') });
DefEnvironment('{figure*}[]',
	       "<ltx:figure id='#id' refnum='#refnum' ?#1(placement='#1')>"
	       . "<ltx:metadata id='#id.info'/>"
	       . "#body"
	       ."</ltx:figure>",
	       properties=> sub { RefStepCounter('figure') });
DefEnvironment('{table}[]',
	       "<ltx:table id='#id' refnum='#refnum' ?#1(placement='#1')>"
	       . "<ltx:metadata id='#id.info'/>"
	       . "#body"
	       ."</ltx:table>",
	       properties=> sub { RefStepCounter('table')} );
DefEnvironment('{table*}[]',
	       "<ltx:table id='#id' refnum='#refnum' ?#1(placement='#1')>"
	       . "<ltx:metadata id='#id.info'/>"
	       . "#body"
	       ."</ltx:table>",
	       properties=> sub { RefStepCounter('table')} );

#**********************************************************************
# Table enhancement

DefConstructor('\thinhline','',
	       afterDigest=>sub { LookupValue('Alignment')->addLine('T'); },
	       reversion=>'');

# Paragraph similar to X
DefColumnType('P',sub {
  $LaTeXML::BUILD_TEMPLATE->addColumn(before=>Tokens(T_CS('\hbox'),T_BEGIN),
				      after=>Tokens(T_END),
				      align=>'justify'); return; });

#**********************************************************************
DefConstructor('\DLMF',                '<ltx:ref href="http://dlmf.nist.gov">DLMF</ltx:ref>');
DefConstructor('\VRML Semiverbatim', "<ltx:VRML href='#1'/>");
DefConstructor('\GAMSclass{}',         "<ltx:GAMS class='#1'/>");
DefConstructor('\GAMSpackage{}',       "<ltx:GAMS package='#1'/>");
DefConstructor('\GAMSclasspackage{}{}',"<ltx:GAMS class='#1' package='#2'/>");
DefConstructor('\GAMSmodule{}{}{}',    "<ltx:GAMS package='#1' module='#2' module_id='#3'/>");

#**********************************************************************
1;
