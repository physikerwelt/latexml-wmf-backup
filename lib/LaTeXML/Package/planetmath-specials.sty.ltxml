# -*- CPERL -*-
# /=====================================================================\ #
# |  planetmath-specials.sty - Implementation for LaTeXML               | #
# |                                                                     | #
# |=====================================================================| #
# | NOT Part of LaTeXML:                                                | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Deyan Ginev <d.ginev@jacobs-university.de>                          | #
# | http://dlmf.nist.gov/LaTeXML/                                       | #
# \=====================================================================/ #

package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;

# Metadata namespaces:
my $pmbaseURI = "http://alpha.planetmath.org"; # Careful: Get the URI right before we publish LOD
RegisterMetaNamespace('dct'=>'http://purl.org/dc/terms/');
RegisterMetaNamespace('pm'=>"$pmbaseURI/ns/");
RegisterMetaNamespace('msc'=>"$pmbaseURI/msc/");
RegisterMetaNamespace('pmarticle'=>"$pmbaseURI/article/");
RegisterMetaNamespace('pmuser'=>"$pmbaseURI/user/");
RegisterMetaNamespace('pmconcept'=>"$pmbaseURI/concept/");
RegisterMetaNamespace('xsd'=>'http://www.w3.org/2001/XMLSchema#');

# URIs for Metadata Resources:
DefMacro('\articleURI{}','pmarticle:#1');
DefMacro('\userURI{}','pmuser:#1');
DefMacro('\conceptURI{}','pmconcept:#1');

# Metadata commands
# Generic metadata constructors (use to define your own metadata):

DefMacro('\pmmeta@literal[]{}{}{}','\@add@frontmatter{ltx:keywords}[datatype=#1,property=#2:#3,content=#4]{}');
DefMacro('\pmmeta@uri[]{}{}{}','\@add@frontmatter{ltx:keywords}[about=#1,rel=#2:#3,resource=#4]{}');

 DefMacro('\pmmeta@literal@adhoc[]{}{}','\pmmeta@literal[#1]{pm}{#2}{#3}');
 DefMacro('\pmmeta@uri@adhoc[]{}{}','\pmmeta@uri[#1]{pm}{#2}{#3}');
 DefMacro('\pmmeta@literal@dct[]{}{}','\pmmeta@literal[#1]{dct}{#2}{#3}');
 DefMacro('\pmmeta@uri@dct[]{}{}','\pmmeta@uri[#1]{dct}{#2}{#3}');
 # PlanetMath Metadata:

 DefMacro('\pmselfproof{}','\pmmeta@literal@adhoc{selfproof}{#1}');
 DefMacro('\pmcomment Semiverbatim','\pmmeta@literal@adhoc{comment}{#1}');
 DefMacro('\pmdefines{}','\pmmeta@literal@adhoc{defines}{\conceptURI{#1}}'); #We need to figure out both defines and its argument (a concept)
 DefMacro('\pmkeyword{}','\pmmeta@literal@adhoc{keyword}{#1}');

 DefMacro('\pmparent[]{}','\pmmeta@uri@adhoc{parent}{\articleURI{#2}}'); # Ignore optional argument, the mandatory is a cannonical name
 DefMacro('\pmrelated{}','\pmmeta@uri@adhoc{related}{\articleURI{#1}}');
 DefMacro('\pmsynonym{}{}','\pmmeta@uri@adhoc[\conceptURI{#1}]{synonym}{\conceptURI{#2}}'); # Consider DCT alternative for the alias
DefMacro('\pmowner{}{}','\pmmeta@uri@adhoc{owner}{\userURI{#2}}');
DefMacro('\pmmodifier{}{}','\pmmeta@uri@adhoc{modifier}{\userURI{#2}}'); # Note : we should use usernames (maybe), but keep in mind they have SPACES in them.


 DefMacro('\pmrecord{}{}','\pmmeta@literal@dct{hasVersion}{#1}'); # The second argument of the \pmrecord is the Noosphere ID, which we can ignore
 DefMacro('\pmcanonicalname{}','\pmmeta@literal@dct{identifier}{#1}');
 DefMacro('\pmcreated Semiverbatim','\pmmeta@literal@dct[xsd:date]{created}{#1}');
 DefMacro('\pmmodified Semiverbatim','\pmmeta@literal@dct[xsd:date]{modified}{#1}');
 DefMacro('\pmtitle{}','\pmmeta@literal@dct{title}{#1}');
 DefMacro('\pmtype{}','\pmmeta@literal@dct{type}{#1}'); # Maybe types are resources?
 DefMacro('\pmauthor{}{}','\pmmeta@uri@dct{creator}{\userURI{#2}}'); # First argument is a username, second DB id (ignore second).
 DefMacro('\pmclassification{}{}','\pmmeta@uri@dct{subject}{#1:#2}'); #Arbitrary metadata, simply register the #1 argument as a namespace (e.g. msc)

#FUTURE: add, as much as you have information, additional triples:
#<some-URI-you-made-up-from-the-authors-ID> rdf:type foaf:Person ;
#  foaf:name "Name" ;
#  foaf:firstname "Firstname" ;
#  foaf:lastname "...";
#  foaf:mbox "email@addre.ss"
#etc.

#Experimental: MathWebSearch
DefConstructor('\qvar Semiverbatim','<ltx:XMTok name="qvar" meaning="qvar" color="red">#1</ltx:XMTok>',requireMath=>1);

# Basically, we're transforming the graphics options into graphicx format.
my $graphicURL = 'http://alpha.planetmath.org/sites/default/files/pictures/';
DefMacro('\includegraphics OptionalMatch:* [][] Semiverbatim',
	 '\@includegraphics#1[#2][#3]{#4}',locked=>1);

DefConstructor('\@includegraphics OptionalMatch:* [][] Semiverbatim', sub {
  my($document,$starred,$op1,$op2,$graphic)=@_;
  my $bb = ($op2 ? ToString($op1)." ".ToString($op2) : ($op1 ? "0 0 ".ToString($op1) : ''));
  $bb=~ s/,/ /g;
  my $options=($starred ? ($bb ? "viewport=$bb, clip" : "clip") : '');
  $graphic = ToString($graphic); $graphic =~ s/^\s+//; $graphic=~ s/\s+$//;
  my @candidates = pathname_findall($graphic,types=>['*'],paths=>LookupValue('GRAPHICSPATHS'));
  # Web, if no candidates:
  if (!@candidates) {
    $graphic=~s/(\.(\w+)$)//;
    $graphic .= ".png"; # All images in PM are .png
    $graphic = $graphicURL.$graphic
  }
  $document->insertElement('ltx:graphics',undef,graphic=>$graphic,options=>$options,
			   candidates=>join(',',@candidates)); },
	       alias=>'\includegraphics',locked=>1);

1;
