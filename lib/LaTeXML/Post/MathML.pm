# /=====================================================================\ #
# |  LaTeXML::Post::MathML                                              | #
# | MathML generator for LaTeXML                                        | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #

# ================================================================================
# LaTeXML::MathML  Math Formatter for LaTeXML's Parsed Math.
#   Cooperate with the parsed math structure generated by LaTeXML::Math and
# convert into presentation MathML.
# ================================================================================
# TODO
#  * Need switches for Presentation and/or Content 

#  * merging of mrows when operator is `close enough' (eg (+ (+ a b) c) => (+ a b c)
#  * get presentation from DUAL
#  * proper parenthesizing (should I record the parens used when parsing?)
# Some clarity to work out:
#  We're trying to convert either parsed or unparsed math (sometimes intertwined).
# How clearly do these have to be separated?
# ================================================================================

package LaTeXML::Post::MathML;
use strict;
use LaTeXML::Util::LibXML;
use base qw(LaTeXML::Post::Processor);

our $mmlURI = "http://www.w3.org/1998/Math/MathML";

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# See END for specific converters.
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Top level
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sub process {
  my($self,$doc)=@_;
  $self->cacheIDs($doc);
  $doc->documentElement->setNamespace($mmlURI,'m',0);
  my @ltx_maths = $self->find_math_nodes($doc);
  $self->Progress("Converting ".scalar(@ltx_maths)." formulae");
  foreach my $ltx_math (@ltx_maths){
    my $mode = $ltx_math->getAttribute('mode')||'inline';
    my ($xmath) = $ltx_math->getChildrenByTagNameNS($self->getNamespace,'XMath');
    my $mml_math= $ltx_math->addNewChild($mmlURI,'math');
    $mml_math->setAttribute(display=>($mode eq 'display' ? 'block' : 'inline'));
    my $style = ($mode eq 'display' ? 'display' : 'text');
    incorporate($mml_math,$mmlURI,$self->processNode($xmath,$style)); }
  $doc; }

# ================================================================================
sub find_math_nodes {
  my($self,$doc)=@_;
  $doc->getElementsByTagNameNS($self->getNamespace,'Math'); }

# Recursively incorporate the intermediate form MathML data into the XML node.
# The intermediate form is either an array:
#   [tag,{attributes},@children]
#    where the children are also intermediate forms
# or a string, to be text content.

sub incorporate {
  my($node,$nsuri,@data)=@_;
  foreach my $child (@data){
    if(ref $child eq 'ARRAY'){
      my($tag,$attributes,@children)=@$child;
      my $new = $node->addNewChild($nsuri,$tag);
      $node->appendChild($new);
      if($attributes){
	foreach my $key (keys %$attributes){
	  $new->setAttribute($key, $$attributes{$key}) if defined $$attributes{$key}; }}
      incorporate($new,$nsuri,@children); }
#    elsif((ref $child) =~ /^XML::LibXML::/){
#      $node->appendChild($child); }
    elsif(ref $child){
      warn "Dont know how to add $child to $node; ignoring"; }
    else {
      $node->appendTextNode($child); }}}

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# General translation utilities.
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sub getTokenMeaning {
  my($node)=@_;
  my $m = $node->getAttribute('meaning') || $node->getAttribute('name')
    || $node->textContent;
  (defined $m ? $m : '?'); }

sub realize {
  my($node)=@_;
  $LaTeXML::Post::PROCESSOR->realizeXMNode($LaTeXML::Post::DOCUMENT,$node); }

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Table of Translators for presentation|content
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# All translators take XMath XML::LibXML nodes as arguments,
# and return an intermediate form of MathML to be added.

our $MMLTable_P={};
our $MMLTable_C={};

sub DefMathML {
  my($key,$presentation,$content) =@_;
  $$MMLTable_P{$key} = $presentation if $presentation;
  $$MMLTable_C{$key} = $content if $content; }

sub lookupPresenter {
  my($mode,$role,$name)=@_;
  $name = '?' unless $name;
  $role = '?' unless $role;
  $$MMLTable_P{"$mode:$role:$name"} || $$MMLTable_P{"$mode:?:$name"}
    || $$MMLTable_P{"$mode:$role:?"} || $$MMLTable_P{"$mode:?:?"}; }

sub lookupContent {
  my($mode,$role,$name)=@_;
  $name = '?' unless $name;
  $role = '?' unless $role;
  $$MMLTable_C{"$mode:$role:$name"} || $$MMLTable_C{"$mode:?:$name"}
    || $$MMLTable_C{"$mode:$role:?"} || $$MMLTable_C{"$mode:?:?"}; }


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Support functions for Presentation MathML
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sub pmml_top {
  my($node,$style)=@_;
  local $LaTeXML::MathML::STYLE = $style;
  pmml($node); }

our %stylestep=(display=>'text', text=>'script',
	       script=>'scriptscript', scriptscript=>'scriptscript');
our %stylemap
  = (display     =>{text        =>[displaystyle=>'false'],
		    script      =>[displaystyle=>'false',scriptlevel=>'+1'],
		    scriptscript=>[displaystyle=>'false',scriptlevel=>'+2']},
     text        =>{display     =>[displaystyle=>'true'],
		    script      =>[scriptlevel=>'+1'],
		    scriptscript=>[scriptlevel=>'+2']},
     script      =>{display     =>[displaystyle=>'true',scriptlevel=>'-1'],
		    text        =>[scriptlevel=>'-1'],
		    scriptscript=>[scriptlevel=>'+1']},
     scriptscript=>{display     =>[displaystyle=>'true',scriptlevel=>'-2'],
		    text        =>[scriptlevel=>'-2'],
		    script      =>[scriptlevel=>'-1']});

sub pmml_smaller {
  my($node)=@_;
  local $LaTeXML::MathML::STYLE = $stylestep{$LaTeXML::MathML::STYLE};
  pmml($node); }

sub pmml {
  my($node)=@_;
  my $o = $node->getAttribute('open');
  my $c = $node->getAttribute('close');
  my $p = $node->getAttribute('punctuation');
  # Do the core conversion.
  my $result = ($node->nodeName eq 'XMRef'
		? pmml(realize($node))
		: pmml_internal($node));
  # Handle generic things: open/close delimiters, punctuation
  $result = pmml_parenthesize($result,$o,$c) if $o || $c;
  $result = ['mrow',{},$result,pmml_mo($p)] if $p;
  $result; }

sub pmml_internal {
  my($node)=@_;
  return ['merror',{},['mtext',{},"Missing Subexpression"]] unless $node;
  my $tag = $node->nodeName;
  my $role = $node->getAttribute('role');
  if($tag eq 'XMath'){
    pmml_row(map(pmml($_), element_nodes($node))); } # Really multiple nodes???
  elsif($tag eq 'XMDual'){
    my($content,$presentation) = element_nodes($node);
    pmml($presentation); }
  elsif($tag eq 'XMWrap'){	# Only present if parsing failed!
    pmml_row(map(pmml($_),element_nodes($node))); }
  elsif($tag eq 'XMApp'){
    my($op,@args) = element_nodes($node);
    if(!$op){
      ['merror',{},['mtext',{},"Missing Operator"]]; }
    elsif($role && ($role =~ /^POST(SUB|SUPER)SCRIPT$/)){
      pmml_unparsed_script($role,$op); }
    else {
      $op = realize($op);  # NOTE: Could loose open/close on XMRef ???
      my $style = $op->getAttribute('style');
      my $styleattr = $style && $stylemap{$LaTeXML::MathML::STYLE}{$style};
      local $LaTeXML::MathML::STYLE 
	= ($style && $stylestep{$style} ? $style : $LaTeXML::MathML::STYLE);
      my $result = &{ lookupPresenter('Apply',$op->getAttribute('role'),
				      getTokenMeaning($op)) }($op,@args);
      $result = ['mstyle',{@$styleattr},$result] if $styleattr;
      $result; }}
  elsif($tag eq 'XMTok'){
    &{ lookupPresenter('Token',$role,getTokenMeaning($node)) }($node); }
  elsif($tag eq 'XMHint'){
    &{ lookupPresenter('Hint',$role,getTokenMeaning($node)) }($node); }
  elsif($tag eq 'XMArray'){
    my @rows = ();
    foreach my $row (element_nodes($node)){
      my @cols = ();
      foreach my $col (element_nodes($row)){
	my $a = $col->getAttribute('align');
	my $b = $col->getAttribute('border');
	my $h = (($col->getAttribute('thead')||'') eq 'yes') && 'thead';
	my $c = ($b ? ($h ? "$b $h" : $b) : $h);
	my $cs = $col->getAttribute('colspan');
	push(@cols,['mtd',{($a ? (columnalign=>$a):()),
			   ($c ? (class=>$c):()),
			   ($cs ? (columnspan=>$cs):())},
		    map(pmml($_),element_nodes($col))]); }
      push(@rows,['mtr',{},@cols]); }
    ['mtable',{rowspacing=>"0.2ex", columnspacing=>"0.4em"},@rows]; }
  else {
    ['mtext',{},$node->textContent]; }}

sub pmml_row {
  my(@items)=@_;
  @items = grep($_,@items);
  (scalar(@items) == 1 ? $items[0] : ['mrow',{},@items]); }

sub pmml_parenthesize {
  my($item,$open,$close)=@_;
  if(!$open && !$close){
    $item; }
  elsif($item && (ref $item)  && ($item->[0] eq 'mrow')){
    my($tag,$attr,@children)=@$item;
    ['mrow',$attr,($open ? (pmml_mo($open)):()),@children,($close ? (pmml_mo($close)):())]; }
  else {
    ['mrow',{},($open ? (pmml_mo($open)):()),$item,($close ? (pmml_mo($close)):())]; }}

sub pmml_punctuate {
  my($separators,@items)=@_;
  $separators='' unless defined $separators;
  my $lastsep=', ';
  my @arglist;
  if(@items){
    push(@arglist,pmml(shift(@items)));
    while(@items){
      $separators =~ s/^(.)//;
      $lastsep = $1 if $1;
      push(@arglist,pmml_mo($lastsep),pmml(shift(@items))); }}
  pmml_row(@arglist); }


# args are XMath nodes
sub pmml_infix {
  my($op,@args)=@_;
  return ['mrow',{}] unless $op && @args; # ??
  my @items=();
  if(scalar(@args) == 1){	# Infix with 1 arg is presumably Prefix!
    push(@items,(ref $op ? pmml($op) : pmml_mo($op)),pmml($args[0])); }
  else {
    push(@items, pmml(shift(@args)));
    while(@args){
      push(@items,(ref $op ? pmml($op) : pmml_mo($op)));
      push(@items,pmml(shift(@args))); }}
  pmml_row(@items); }

# Mappings between internal fonts & sizes.
# Default math font is roman|medium|upright.
our %mathvariants = ('bold'             =>'bold',
		     'italic'           =>'italic',
		     'medium italic'    =>'italic',
		     'bold italic'      =>'bold-italic',
		     'doublestruck'     =>'double-struck',
		     'blackboard'       =>'double-struck',
		     'fraktur bold'     => 'bold-fraktur',
		     'script'           => 'script',
		     'script italic'    => 'script',
		     'script bold'      => 'bold-script',
		     'caligraphic'      => 'script',
		     'caligraphic bold' => 'bold-script',
		     'fraktur'          => 'fraktur',
		     'sansserif'        => 'sans-serif',
		     'sansserif bold'   => 'bold-sans-serif',
		     'sansserif italic' => 'sans-serif-italic',
		     'sansserif bold italic'   => 'sans-serif-bold-italic',
		     'typewriter'       => 'monospace');

# The font differences (from the containing context) have been deciphered
# into font, size and color attributes.  The font should match
# one of the above... (?)

our %sizes=(tiny=>'small',script=>'small',footnote=>'small',small=>'small',
	    normal=>'normal',
	    large=>'big',Large=>'big',LARGE=>'big',huge=>'big',Huge=>'big');

sub pmml_mi {
  my($item)=@_;
  my $font  = (ref $item ? $item->getAttribute('font') : undef);
  my $size  = (ref $item ? $item->getAttribute('size') : undef);
  my $color = (ref $item ? $item->getAttribute('color') : undef);
  my $text  = (ref $item ?  $item->textContent : $item);
  my $variant = ($font ? $mathvariants{$font} : '');
  if($font && !$variant){
    warn "Unrecognized font variant \"$font\""; $variant=''; }
  if($text =~ /^.$/){	# Single char in mi?
    if($variant eq 'italic'){ $variant = ''; } # Defaults to italic
    elsif(!$variant){ $variant = 'normal'; }}  # must say so explicitly.
  ['mi',{($variant ? (mathvariant=>$variant):()),
	 ($size    ? (mathsize=>$sizes{$size}):()),
	 ($color   ? (mathcolor=>$color):())},$text]; }

sub pmml_mo {
  my($item)=@_;
  my $font  = (ref $item ? $item->getAttribute('font') : undef);
  my $size  = (ref $item ? $item->getAttribute('size') : undef);
  my $color = (ref $item ? $item->getAttribute('color') : undef);
  my $text  = (ref $item ?  $item->textContent : $item);
  my $variant = ($font ? $mathvariants{$font} : '');
  ['mo',{($variant ? (mathvariant=>$variant):()),
	 ($size    ? (mathsize=>$sizes{$size}):()),
	 ($color   ? (mathcolor=>$color):()),
	 # If an operator has specifically located it's scripts,
	 # don't let mathml move them.
	 (((ref $item && $item->getAttribute('stackscripts'))||'no') eq 'yes'
	  ? (movablelimits=>'false'):())},
   $text]; }

## POSTSUBSCRIPT | POSTSUPERSCRIPT should not remain in successfully parsed math.
# This gives something `presentable', though not correct.
# What to use for base? I can't reasonably go up & grap the preceding token...
# I doubt an empty <mi/> is valid, but what is?
sub pmml_unparsed_script {
  my($type,$script)=@_;
  [ ($type eq 'POSTSUBSCRIPT' ? 'msub' : 'msup' ), {}, ['mi'],
    pmml_smaller($script)]; }

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Support functions for Content MathML
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sub cmml_top {
  my($node,$style)=@_;
  cmml($node); }

sub cmml {
  my($node)=@_;
  return ['merror',{},['mtext',{},"Missing Subexpression"]] unless $node;
  $node = realize($node) if $node->nodeName eq 'XMRef';
  my $tag = $node->nodeName;
  if($tag eq 'XMath'){
    my($item,@rest)=  element_nodes($node);
    print STDERR "Warning! got extra nodes for content!\n" if @rest;
    cmml($item); }
  elsif($tag eq 'XMDual'){
    my($content,$presentation) = element_nodes($node);
    cmml($content); }
  elsif($tag eq 'XMWrap'){	# Only present if parsing failed!
    pmml_row(map(pmml($_),element_nodes($node))); } # ????
  elsif($tag eq 'XMApp'){
    my($op,@args) = element_nodes($node);
    if(!$op){
      ['merror',{},['mtext',{},"Missing Operator"]]; }
    else {
      $op = realize($op);		# NOTE: Could loose open/close on XMRef ???
      &{ lookupContent('Apply',$op->getAttribute('role'),getTokenMeaning($op)) }($op,@args); }}
  elsif($tag eq 'XMTok'){
    &{ lookupContent('Token',$node->getAttribute('role'),getTokenMeaning($node)) }($node); }
  elsif($tag eq 'XMHint'){	# ????
    &{ lookupContent('Hint',$node->getAttribute('role'),getTokenMeaning($node)) }($node); }
  else {
    ['mtext',{},$node->textContent]; }}

# Or csymbol if there's some kind of "defining" attribute?
sub cmml_ci {
  my($item)=@_;
  my $font    = (ref $item ? $item->getAttribute('font') : undef);
  my $variant = ($font && $mathvariants{$font})||'';
  my $content = (ref $item ?  $item->textContent : $item);
  if($content =~ /^.$/){	# Single char?
    if($variant eq 'italic'){ $variant = ''; } # Defaults to italic
    elsif(!$variant){ $variant = 'normal'; }}  # must say so explicitly.
#  ['csymbol',{($variant ? (mathvariant=>$variant) : ())},$content]; }
  ['ci',{},$content]; }

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Tranlators
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# An issue here:
#  Some constructs are pretty purely presentational.  Hopefully, these would
# only appear in XWrap's or in the presentation branch of an XMDual, so we won't
# attempt to convert them to content.  But if we do, should we warn?
# ================================================================================
# Tokens

DefMathML("Token:?:?",           \&pmml_mi, \&cmml_ci);

DefMathML("Token:ADDOP:?",       \&pmml_mo);
DefMathML("Token:ADDOP:+",       undef,     sub { ['plus'];});
DefMathML("Token:ADDOP:-",       undef,     sub { ['minus'];});

DefMathML("Token:MULOP:?",       \&pmml_mo);
DefMathML("Token:MULOP:*",       undef,     sub { ['times'];});
DefMathML("Token:MULOP:\x{2062}",undef,     sub { ['times'];});
DefMathML("Token:MULOP:/",       undef,     sub { ['divide'];});

DefMathML("Token:RELOP:?",      \&pmml_mo);
DefMathML("Token:RELOP:=",       undef,     sub { ['eq'];});
DefMathML("Token:RELOP:\x{2260}",undef,     sub { ['neq'];}); # \ne, not-eq .. ???
DefMathML("Token:RELOP:>",       undef,     sub { ['gt'];});
DefMathML("Token:RELOP:<",       undef,     sub { ['lt'];});
DefMathML("Token:RELOP:leq",     undef,     sub { ['leq'];}); # NOTE: Unify \le and \leq
DefMathML("Token:RELOP:geq",     undef,     sub { ['geq'];}); # NOTE: Unify \ge and \geq

DefMathML("Token:PUNCT:?",       \&pmml_mo);
DefMathML("Token:PERIOD:?",      \&pmml_mo);
DefMathML("Token:SUMOP:?",       \&pmml_mo);
DefMathML("Token:INTOP:?",       \&pmml_mo);
DefMathML("Token:LIMITOP:?",     \&pmml_mo);
DefMathML("Token:OPERATOR:?",    \&pmml_mo);
DefMathML("Token:OPEN:?",        \&pmml_mo);
DefMathML("Token:CLOSE:?",       \&pmml_mo);
DefMathML("Token:MIDDLE:?",      \&pmml_mo);
DefMathML("Token:VERTBAR:?",     \&pmml_mo);
DefMathML("Token:ARROW:?",       \&pmml_mo);
DefMathML("Token:METARELOP:?",   \&pmml_mo);
DefMathML("Token:OVERACCENT:?",  \&pmml_mo);
DefMathML("Token:UNDERACCENT:?", \&pmml_mo);

DefMathML("Token:NUMBER:?",sub { ['mn',{},$_[0]->textContent]; },sub { ['cn',{},$_[0]->textContent]; });
DefMathML("Token:?:Empty", sub { ['none']} );

DefMathML("Token:?:\x{2061}", \&pmml_mo); # FUNCTION APPLICATION
DefMathML("Token:?:\x{2062}", \&pmml_mo); # INVISIBLE TIMES


DefMathML("Token:OPFUNCTION:exp",      undef, sub { ['exp']; });
DefMathML("Token:OPFUNCTION:ln",       undef, sub { ['ln']; });
DefMathML("Token:OPFUNCTION:log",      undef, sub { ['log']; });
DefMathML("Token:TRIGFUNCTION:sin",    undef, sub { ['sin']; });
DefMathML("Token:TRIGFUNCTION:cos",    undef, sub { ['cos']; });
DefMathML("Token:TRIGFUNCTION:tan",    undef, sub { ['tan']; });
DefMathML("Token:TRIGFUNCTION:sec",    undef, sub { ['sec']; });
DefMathML("Token:TRIGFUNCTION:csc",    undef, sub { ['csc']; });
DefMathML("Token:TRIGFUNCTION:cot",    undef, sub { ['cot']; });
DefMathML("Token:TRIGFUNCTION:sinh",   undef, sub { ['sinh']; });
DefMathML("Token:TRIGFUNCTION:cosh",   undef, sub { ['cosh']; });
DefMathML("Token:TRIGFUNCTION:tanh",   undef, sub { ['tanh']; });
DefMathML("Token:TRIGFUNCTION:sech",   undef, sub { ['sech']; });
DefMathML("Token:TRIGFUNCTION:csch",   undef, sub { ['csch']; });
DefMathML("Token:TRIGFUNCTION:coth",   undef, sub { ['coth']; });
DefMathML("Token:OPFUNCTION:arcsin",   undef, sub { ['arcsin']; });
DefMathML("Token:OPFUNCTION:arccos",   undef, sub { ['arccos']; });
DefMathML("Token:OPFUNCTION:arctan",   undef, sub { ['arctan']; });
DefMathML("Token:OPFUNCTION:arccosh",  undef, sub { ['arccosh']; });
DefMathML("Token:OPFUNCTION:arccot",   undef, sub { ['arccot']; });
DefMathML("Token:OPFUNCTION:arccoth",  undef, sub { ['arccoth']; });
DefMathML("Token:OPFUNCTION:arccsc",   undef, sub { ['arcscsc']; });
DefMathML("Token:OPFUNCTION:arccsch",  undef, sub { ['arccsch']; });
DefMathML("Token:OPFUNCTION:arcsec",   undef, sub { ['arcsec']; });
DefMathML("Token:OPFUNCTION:arcsech",  undef, sub { ['arcsech']; });
DefMathML("Token:OPFUNCTION:arcsinh",  undef, sub { ['arcsinh']; });
DefMathML("Token:OPFUNCTION:arctanh",  undef, sub { ['arctanh']; });


# Token elements:
#   cn, ci, csymbol
# Basic Content elements:
#   apply, interval, inverse, sep, condition, declare, lambda, compose, ident,
#   domain, codomain, image, domainofapplication, piecewise, piece, otherwise
# Arithmetic, Algebra and Logic:
#   quotient, factorial, divide, max, min, minus, plus, power, rem, times, root
#   gcd, and, or, xor, not, implies, forall, exists, abs, conjugate, arg, real,
#   imaginary, lcm, floor, ceiling.
# Relations:
#   eq, neq, gt, lt, geq, leq, equivalent, approx, factorof
# Calculus and Vector Calculus:
#   int, diff, partialdiff, lowlimit, uplimit, bvar, degree, 
#   divergence, grad, curl, laplacian.
# Theory of Sets,
#   set, list, union, intersect, in, notin, subset, prsubset, notsubset, notprsubset,
#   setdiff, card, cartesianproduct.
# Sequences and Series:
#   sum, product, limit, tendsto
# Elementary Classical Functions,
#   exp, ln, log, sin, cos tan, sec, csc, cot, sinh, cosh, tanh, sech, csch, coth,
#   arcsin, arccos, arctan, arccosh, arccot, arccoth, arccsc, arccsch, arcsec, arcsech,
#   arcsinh, arctanh
# Statistics:
#   mean, sdev, variance, median, mode, moment, momentabout
# Linear Algebra:
#   vector, matrix, matrixrow, determinant, transpose, selector, 
#   vectorproduct, scalarproduct, outerproduct.
# Semantic Mapping Elements
#   annotation, semantics, annotation-xml
# Constant and Symbol Elements
#   integers, reals, rationals, naturalnumbers, complexes, primes,
#   exponentiale, imaginaryi, notanumber, true, false, emptyset, pi,
#   eulergamma, infinity

# ================================================================================
# Hints
DefMathML('Hint:?:?', sub { undef; });
# ================================================================================
# Applications.

# NOTE: A lot of these special cases could be eliminated by
# consistent creation of XMDual's (using DefMath and similar)

DefMathML('Apply:?:?', sub {
  my($op,@args)=@_;
  ['mrow',{},
   pmml($op),pmml_mo("\x{2061}"),	# FUNCTION APPLICATION
   pmml_parenthesize(pmml_punctuate($op->getAttribute('separators'),@args),
		     $op->getAttribute('argopen'),$op->getAttribute('argclose'))]; },
  sub {
    my($op,@args)=@_;
    ['apply',{},cmml($op), map(cmml($_),@args)]; });

DefMathML('Apply:OVERACCENT:?', sub {
  my($accent,$base)=@_;
  ['mover',{accent=>'true'}, pmml($base),pmml_smaller($accent)]; });

DefMathML('Apply:UNDERACCENT:?', sub {
  my($accent,$base)=@_;
  ['munder',{accent=>'true'}, pmml($base),pmml_smaller($accent)]; });

# Top level relations
DefMathML('Apply:?:Formulae',sub { 
  my($op,@elements)=@_;
  pmml_punctuate($op->getAttribute('separators'),@elements); });

DefMathML('Apply:?:MultiRelation',sub { 
  my($op,@elements)=@_;
  pmml_row(map(pmml($_),@elements)); });

# Defaults for various parts-of-speech

DefMathML('Apply:SUPERSCRIPTOP:?', sub {
  my($op,$base,$sup)=@_;
  [((($base->getAttribute('stackscripts')||'no') eq 'yes') ? 'mover' : 'msup'),
   {},
   pmml($base),pmml_smaller($sup)]; });

DefMathML('Apply:SUBSCRIPTOP:?',   sub {
  my($op,$base,$sub)=@_;
  [((($base->getAttribute('stackscripts')||'no') eq 'yes') ? 'munder' : 'msub'),
   {},
   pmml($base),pmml_smaller($sub)]; });

# Should we have such a thing, or should the combining
# be done by the sub/sup handlers?
DefMathML('Apply:SUBSUPERSCRIPTOP:?',   sub { 
  my($op,$base,$sub,$sup)=@_;
  [((($base->getAttribute('stackscripts')||'no') eq 'yes')
    ? 'munderover' : 'msubsup'),{},
   pmml($base),pmml_smaller($sub),pmml_smaller($sup)]; });

DefMathML('Apply:POSTFIX:?', sub {
  ['mrow',{},pmml($_[1]),pmml($_[0])]; });

DefMathML('Apply:?:sideset', sub {
  my($op,$presub,$presup,$postsub,$postsup,$base)=@_;
  ['mmultiscripts',{},
   pmml($base),pmml_smaller($postsub),pmml_smaller($postsup), 
   ['mprescripts'],pmml_smaller($presub),pmml_smaller($presup)]; });

DefMathML('Apply:ADDOP:?', \&pmml_infix);
DefMathML('Apply:MULOP:?', \&pmml_infix);
DefMathML('Apply:RELOP:?', \&pmml_infix);
DefMathML('Apply:ARROW:?', \&pmml_infix);
DefMathML('Apply:COMPOSEOP:?', \&pmml_infix);
DefMathML('Apply:METARELOP:?',\&pmml_infix);

DefMathML('Apply:FENCED:?',sub {
  my($op,@elements)=@_;
  pmml_parenthesize(pmml_punctuate($op->getAttribute('separators'),@elements),
		    $op->getAttribute('argopen'), $op->getAttribute('argclose')); });

# Note how annoyingly MML's arrays don't change the style the same
# way TeX does!
DefMathML('Apply:STACKED:?', sub {
  my($op,$over,$under)=@_;
  my $stack = ['mtable',{rowspacing=>"0.2ex", columnspacing=>"0.4em"},
	       ['mtr',{},['mtd',{},pmml($over)]],
	       ['mtr',{},['mtd',{},pmml($under)]]];
  if($LaTeXML::MathML::STYLE =~/^(text|script)$/){
    ['mstyle',{scriptlevel=>'+1'},$stack]; }
  else {
    $stack; }});

# Various specific formatters.
DefMathML('Apply:?:sqrt', sub { ['msqrt',{},pmml($_[1])]; });
DefMathML('Apply:?:root', sub { ['mroot',{},pmml($_[2]),
				 pmml_smaller($_[1])]; });

DefMathML('Apply:?:div', sub {
  my($op,$num,$den)=@_;
  my $style = $op->getAttribute('style');
  my $thickness = $op->getAttribute('thickness');
  ['mfrac',{($thickness ? (linethickness=>$thickness):()),
	    ($style && ($style eq 'inline') ? (bevelled=>'true'):())},
   pmml_smaller($num),pmml_smaller($den)]; });

DefMathML('Apply:?:LimitFrom', sub {
  my($op,$arg,$dir)=@_;
  ['mrow',{},pmml($arg),pmml($dir)]; });

DefMathML('Apply:?:Annotated', sub {
  my($op,$var,$annotation)=@_;
  ['mrow',{},pmml($var),pmml($annotation)];});

# NOTE: Markup probably isn't right here....
DefMathML('Apply:?:AT', sub {
  my($op,$expr,$value)=@_;
  pmml_row(pmml($expr),['msub',{},pmml_mo('|'),pmml_smaller($value)]); });


# Have to deal w/ screwy structure:
# If denom is a sum/diff then last summand can be: cdots, cfrac 
#  or invisibleTimes of cdots and something which could also be a cfrac!
# NOTE: Deal with cfracstyle!!
# OR: Can XMDual build the right stuff?
# AND, the propogation of style is likely wrong...
sub do_cfrac {
  my($numer,$denom)=@_;
  if($denom->nodeName eq 'XMApp'){ # Denominator is some kind of application
    my ($denomop,@denomargs)=element_nodes($denom);
    if(($denomop->getAttribute('role')||'') eq 'ADDOP'){ # Is it a sum or difference?
      my $last = pop(@denomargs);			# Check last operand in denominator.
      # this is the current contribution to the cfrac (if we match the last term)
      my $curr = ['mfrac',{},pmml_smaller($numer),
		  ['mrow',{},pmml_infix($denomop,@denomargs),
		   pmml_smaller($denomop)]];
      if(getTokenMeaning($last) eq 'cdots'){ # Denom ends w/ \cdots
	return ($curr,pmml($last));}		   # bring dots up to toplevel
      elsif($last->nodeName eq 'XMApp'){	   # Denom ends w/ application --- what kind?
	my($lastop,@lastargs)=element_nodes($last);
	if(getTokenMeaning($lastop) eq 'cfrac'){ # Denom ends w/ cfrac, pull it to toplevel
#	  return ($curr,do_cfrac(@lastargs)); }
	  return ($curr,pmml($last)); }
	elsif((getTokenMeaning($lastop) eq "\x{2062}")  # Denom ends w/ * (invisible)
	      && (scalar(@lastargs)==2) && (getTokenMeaning($lastargs[0]) eq 'cdots')){
	  return ($curr,pmml($lastargs[0]),pmml($lastargs[1])); }}}}
  (['mfrac',{},pmml_smaller($numer),pmml_smaller($denom)]); }

DefMathML('Apply:?:cfrac', sub {
  my($op,$numer,$denom)=@_;
  pmml_row(do_cfrac($numer,$denom)); });

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Specific converters for Presentation, Content, or Parallel.
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#================================================================================
# Presentation MathML
package LaTeXML::Post::MathML::Presentation;
use strict;
use base qw(LaTeXML::Post::MathML);

sub processNode { LaTeXML::Post::MathML::pmml_top($_[1],$_[2]); }
sub getEncodingName { 'MathML-Presentation'; }

#================================================================================
# Content MathML
package LaTeXML::Post::MathML::Content;
use strict;
use base qw(LaTeXML::Post::MathML);

sub processNode { LaTeXML::Post::MathML::cmml_top($_[1],$_[2]); }
sub getEncodingName { 'MathML-Content'; }

#================================================================================
# Parallel MathML
package LaTeXML::Post::MathML::Parallel;
use strict;
use base qw(LaTeXML::Post::MathML);

sub processNode {
  my($self,$node,$style)=@_;
  my($main_proc,@annotation_procs)=@{$$self{math_processors}};
  ['semantics',{},
   $main_proc->processNode($node,$style),
   map( ['annotation-xml',{encoding=>$_->getEncodingName},
	 $_->processNode($node,$style)],
	@annotation_procs) ]; }
sub getEncodingName { 'MathML-Parallel'; }

#================================================================================

1;
