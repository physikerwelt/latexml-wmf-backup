<?xml version="1.0" encoding="UTF-8"?>
<?latexml searchpaths="//home/bruce/svn/LaTeXML/trunk/doc/"?>
<?latexml class="book"?>
<?latexml package="latexmldoc"?>
<?latexml package="makeidx"?>
<?latexml RelaxNGSchema="LaTeXML"?>
<document xmlns="http://dlmf.nist.gov/LaTeXML" labels="LABEL:idx">
  <title><ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref>: The Manual</title>
  <subtitle>A LaTeX to <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> Converter;<break/><emph>Version 0.6.0</emph></subtitle>
  <creator role="author">
    <personname>Bruce R. Miller</personname>
  </creator>
  <date role="conversion">January 16, 2008</date>
  <!-- %%%====================================================================== -->
  <chapter refnum="1" xml:id="Ch1" labels="LABEL:intro">
    <title>Introduction</title>
    <para xml:id="Ch1.p1">
      <p>For many, LaTeX is the prefered format for document authoring, particularly those
involving significant mathematical content and where quality typesetting is desired.
On the other hand, content-oriented <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> is an extremely useful representation for documents,
allowing them to be used, and reused, for a variety of purposes, not least,
presentation on the Web. Yet, the style and intent of LaTeX markup, as compared to <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> markup, not to mention its programmability, presents difficulties in converting
documents from the former format to the latter.
Perhaps ironically, these difficulties can be particularly large for mathematical material,
where there is a tendency for the markup to focus on appearance rather than meaning.
<!-- %**** manual.tex Line 25 **** --></p>
    </para>
    <para xml:id="Ch1.p2">
      <p>The choice of LaTeX for authoring, and <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> for delivery were natural and uncontroversial
choices for the <ref href="http://dlmf.nist.gov">Digital Library of Mathematical Functions</ref>.
Faced with the need to perform this conversion and the lack of suitable tools to perform it,
the DLMF project proceeded to develop thier own tool, <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref>, for this purpose.
This document describes a <emph>preview</emph> release of <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref>.</p>
    </para>
    <paragraph xml:id="Ch1.S0.SS0.SSS0.P1">
      <title>Design Goals</title>
      <para xml:id="Ch1.S0.SS0.SSS0.P1.p1">
        <p>The idealistic goals of <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> are:</p>
        <itemize xml:id="Ch1.I1">
          <item xml:id="Ch1.I1.i1">
            <p>Faithful emulation of TeX's behaviour.</p>
          </item>
          <item xml:id="Ch1.I1.i2">
            <p>Easily extensible.</p>
          </item>
          <item xml:id="Ch1.I1.i3">
            <p>Lossless; preserving both semantic and presentation cues.</p>
          </item>
          <item xml:id="Ch1.I1.i4">
            <p>Uses abstract LaTeX-like, extensible, document type.</p>
          </item>
          <item xml:id="Ch1.I1.i5">
            <p>Determine the semantics of mathematical content<break/>(<emph>Good</emph> Presentation <ref href="http://www.w3.org/Math/"><text font="typewriter">MathML</text></ref>, eventually Content <ref href="http://www.w3.org/Math/"><text font="typewriter">MathML</text></ref> and <ref href="http://www.openmath.org/"><text font="typewriter">OpenMath</text></ref>).</p>
          </item>
        </itemize>
      </para>
      <para xml:id="Ch1.S0.SS0.SSS0.P1.p2">
        <p>As these goals are not entirely practical, or even somewhat contradictory,
they are implicitly modified by ``as much as possible.''
Completely mimicing TeX's behaviour would seem to require the sneakiest modifications
to TeX, itself.  `Ease of use' is, of course, in the eye of the beholder.
More significantly, few documents are likely to have completely unambiguous
mathematics markup; human understanding of both the topic and the surrounding
text is needed to properly interpret any particular fragment.
Thus, rather than pretend to provide a `turn-key' solution,
<!-- %**** manual.tex Line 50 **** -->we expect that document-specific declarations or tuning to be necessary
to faithfully convert documents.  Towards this end, we provide a variety
of means to customize the processing and declare the author's intent.
At the same time, especially for new documents, we encourage a more logical,
content-oriented markup style, over a purely presentation-oriented style.</p>
      </para>
    </paragraph>
    <paragraph xml:id="Ch1.S0.SS0.SSS0.P2">
      <title>Overview of this Manual</title>
      <toctitle>Overview</toctitle>
      <para xml:id="Ch1.S0.SS0.SSS0.P2.p1">
        <p>Chapter <ref labelref="LABEL:usage"/> describes the usage of <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref>, along with
common use cases and techniques.  Chapter <ref labelref="LABEL:architecture"/> describes
the system architecture in some detail. Strategies for customization
and implementation of new packages is described in Chapter <ref labelref="LABEL:customization"/>.
The special considerations for mathematics, including details of representation
and how to improve the conversion, are covered in Chapter <ref labelref="LABEL:math"/>.
An overview of outstanding issues and planned future improvements
are given in Chapter <ref labelref="LABEL:todo"/>.
Finally, the Appendices <ref labelref="LABEL:commands"/>, <ref labelref="LABEL:coremodules"/> give detailed documentation
on the commands and modules comprising the system.</p>
      </para>
      <para xml:id="Ch1.S0.SS0.SSS0.P2.p2">
        <p>If all else fails, you can consult the source code, or the author.</p>
      </para>
      <!-- %%%====================================================================== -->
    </paragraph>
  </chapter>
  <chapter refnum="2" xml:id="Ch2" labels="LABEL:usage">
    <title>Using <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref></title>
    <para xml:id="Ch2.p1">
      <p>The main commands provided by the <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> system are</p>
      <description xml:id="Ch2.I1">
        <item xml:id="Ch2.I1.i1">
          <tag>
            <ref labelref="LABEL:latexml">latexml</ref>
          </tag>
          <p>for converting TeX sources to <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref>.
<!-- %**** manual.tex Line 75 **** --></p>
        </item>
        <item xml:id="Ch2.I1.i2">
          <tag>
            <ref labelref="LABEL:latexmlpost">latexmlpost</ref>
          </tag>
          <p>for various postprocessing tasks including
conversion to <ref href="http://www.w3.org/HTML/"><text font="typewriter">HTML</text></ref>, processing images, conversion to <ref href="http://www.w3.org/Math/"><text font="typewriter">MathML</text></ref> and so on.</p>
        </item>
      </description>
      <p>The usage of these commands can be as simple as</p>
      <quote>
<text font="typewriter">latexml doc.tex | latexmpost --dest=doc.xhtml</text>
</quote>
      <p>to convert a single document into <ref href="http://www.w3.org/HTML/"><text font="typewriter">HTML</text></ref>,  or as complicated as</p>
      <quote>
<text font="typewriter">latexml --dest=A.xml doca<break/></text>
<text font="typewriter">latexml --dest=B.xml docb<break/></text>
<text/>…<break/>
<text font="typewriter">latexmlpost --prescan --dbfile=my.db --dest=A.xhtml A<break/></text>
<text font="typewriter">latexmlpost --prescan --dbfile=my.db --dest=B.xhtml B<break/></text>
<text/>…<break/>
<text font="typewriter">latexmlpost --noscan --dbfile=my.db --dest=A.xhtml A<break/></text>
<text font="typewriter">latexmlpost --noscan --dbfile=my.db --dest=B.xhtml B<break/></text>
<text/>…</quote>
      <p>to convert a whole set of documents into a complete site.</p>
    </para>
    <para xml:id="Ch2.p2">
      <p>How best to use the commands depends, of course, on what you
are trying to achieve.  In the next section, we'll describe
the use of <ref labelref="LABEL:latexml">latexml</ref>, which will be sufficient
if the <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> representation is what you want, or if you
<!-- %**** manual.tex Line 100 **** -->intend to carry out any further processing with your own
<ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref>-tools.  The following sections consider a sequence of
successively more complicated postprocessing situations,
using <ref labelref="LABEL:latexmlpost">latexmlpost</ref>,
in which one or more TeX sources can be converted into
one or more web documents or a complete site.</p>
    </para>
    <!-- %%%__ -->
    <section refnum="2.1" xml:id="Ch2.S1" labels="LABEL:usage.conversion">
      <title>Basic <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> Conversion</title>
      <toctitle>Conversion</toctitle>
      <indexmark>
        <indexphrase key="latexml">latexml</indexphrase>
        <indexphrase key="usage">usage</indexphrase>
      </indexmark>
      <para xml:id="Ch2.S1.p1">
        <p>The command</p>
        <quote>
<text font="typewriter">latexml <text font="italic">options</text> --destination=<text font="italic">doc</text>.xml <text font="italic">doc</text></text>
</quote>
        <p>loads any required definition modules (see below),
reads, tokenizes, expands and digests the TeX document <text font="typewriter">doc.tex</text>
(or from standard input, if <text font="typewriter">-</text> is given for the filename),
converts it to <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref>,
performs some document rewriting, parses the mathematical content
and writes the result in <text font="typewriter">doc.xml</text>.
For details on the processing, see Chapter <ref labelref="LABEL:architecture"/>,
and Chapter <ref labelref="LABEL:math"/> for more information about math parsing.</p>
      </para>
      <paragraph xml:id="Ch2.S1.SS0.SSS0.P1">
        <title>Module Loading</title>
        <para xml:id="Ch2.S1.SS0.SSS0.P1.p1">
          <p>A first consideration is what definitions for control sequences and
environments are active and used for the processing.
<!-- %**** manual.tex Line 125 **** -->Definitions and customization modules, if present, are loaded in the following
order:</p>
          <description xml:id="Ch2.I2">
            <item xml:id="Ch2.I2.i1">
              <tag>
                <text font="typewriter">TeX.pool.ltxml</text>
              </tag>
              <p>the core module is always loaded.</p>
            </item>
            <item xml:id="Ch2.I2.i2">
              <tag>
                <text font="typewriter">--preload=<text font="italic">module</text></text>
              </tag>
              <p>causes loading of <text font="typewriter italic">module<text font="upright">.ltxml</text></text>.
For example, if <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> fails to recognize a LaTeX document
<text font="typewriter">--preload=LaTeX.pool</text> can be useful to force LaTeX-mode.
Or if you want
This option can be repeated, and the modules will be loaded in the
given order.</p>
            </item>
            <item xml:id="Ch2.I2.i3">
              <tag>
                <text font="typewriter italic">doc<text font="upright">.latexml</text></text>
              </tag>
              <p>a document-specific customization module
is loaded if present.</p>
            </item>
          </description>
          <p>As processing proceeds, additional modules may be loaded as follows.</p>
          <description xml:id="Ch2.I3">
            <item xml:id="Ch2.I3.i1">
              <tag>
                <text font="typewriter">LaTeX.pool.ltxml</text>
              </tag>
              <p>the core latex module, is loaded
upon encountering certain recognizably LaTeX-specific commands, such as
<verbatim font="typewriter">\documentclass</verbatim>.</p>
            </item>
            <item xml:id="Ch2.I3.i2">
              <tag>\<text font="typewriter">documentclass{<text font="italic">class}</text></text></tag>
              <p>loads <text font="typewriter italic">class<text font="upright">.cls.ltxml</text></text>.
(legacy <verbatim font="typewriter">\documentstyle</verbatim> behaves similarly, along with any required packages).</p>
            </item>
            <item xml:id="Ch2.I3.i3">
              <tag>\<text font="typewriter">usepackage{<text font="italic">package}</text></text></tag>
              <p>(or related) loads
<text font="typewriter italic">package<text font="upright">.sty.ltxml</text></text>.  <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> will not
attempt to read the <text font="typewriter italic">package<text font="upright">.sty</text></text> file, as these
often involve LaTeX internals meaningless to the generation of <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref>,
<!-- %**** manual.tex Line 150 **** -->unless forced to with the option</p>
              <quote>
<text font="typewriter">--includestyles</text>
</quote>
              <p>A selective, per-file, option may be developed in the future — please
provide use cases.</p>
            </item>
            <item xml:id="Ch2.I3.i4">
              <tag>\<text font="typewriter">input{<text font="italic">file}</text></text></tag>
              <p>loads an appropriate version
of <text font="typewriter italic">file</text>, specifically the first found of:
<text font="typewriter italic">file<text font="upright">.tex.ltxml</text></text>, <text font="typewriter italic">file<text font="upright">.tex</text></text>,
<text font="typewriter italic">file<text font="upright">.ltxml</text></text> or <text font="typewriter italic">file</text>.</p>
            </item>
          </description>
          <p>Some of these modules (esp. <text font="typewriter">TeX</text> and <text font="typewriter">LaTeX</text>), are parts of
the <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> distribution; others are supplied by the user, or can be
overridden by the user.
See Chapter <ref labelref="LABEL:customization"/> for details about what can go in these modules.</p>
        </para>
        <para xml:id="Ch2.S1.SS0.SSS0.P1.p2">
          <p>Directories to search (in addition to the working directory)
for modules and other files can be specified using</p>
          <quote>
<text font="typewriter">--path=<text font="italic">directory</text></text>
</quote>
          <p>This option can be repeated.</p>
        </para>
      </paragraph>
      <paragraph xml:id="Ch2.S1.SS0.SSS0.P2">
        <title>Other Options</title>
        <para xml:id="Ch2.S1.SS0.SSS0.P2.p1">
          <p>The number and detail of progress and debugging messages printed
<!-- %**** manual.tex Line 175 **** -->during processing can be controlled using</p>
          <quote>
<text font="typewriter">--verbose</text> and <text font="typewriter">--quiet</text>
</quote>
          <p>They can  be repeated to get even more or fewer details.</p>
        </para>
        <para xml:id="Ch2.S1.SS0.SSS0.P2.p2">
          <p>An option most useful in constructing complicated sites is</p>
          <quote>
<text font="typewriter">--documentid=<text font="italic">id</text></text>
</quote>
          <p>which provides an ID for the document root element which is inheritted
as a prefix for id's of the child-elements in the document.
Using this option can assure unique identifiers across a set
of source documents.</p>
        </para>
        <para xml:id="Ch2.S1.SS0.SSS0.P2.p3">
          <p>See the documentation for the command <ref labelref="LABEL:latexml">latexml</ref> for
less common options.</p>
        </para>
        <!-- %%%__ -->
      </paragraph>
    </section>
    <section refnum="2.2" xml:id="Ch2.S2" labels="LABEL:usage.single">
      <title>Basic Postprocessing</title>
      <toctitle>Postprocessing</toctitle>
      <indexmark>
        <indexphrase key="latexmlpost">latexmlpost</indexphrase>
        <indexphrase key="usage">usage</indexphrase>
      </indexmark>
      <para xml:id="Ch2.S2.p1">
        <p>In the simplest situation, you have a single TeX source document
from which you want to generate a single output document.
The command</p>
        <quote>
<text font="typewriter">latexmlpost <text font="italic">options</text> --destination=doc.xhtml doc</text>
<!-- %**** manual.tex Line 200 **** --></quote>
        <p>or similarly with <text font="typewriter">--destination=doc.html</text>,
will carry out a set of appropriate transformations in sequence:</p>
        <itemize xml:id="Ch2.I4">
          <item xml:id="Ch2.I4.i1">
            <p>scanning of labels and ids;</p>
          </item>
          <item xml:id="Ch2.I4.i2">
            <p>filling in the index and bibliography (if needed);</p>
          </item>
          <item xml:id="Ch2.I4.i3">
            <p>cross-referencing;</p>
          </item>
          <item xml:id="Ch2.I4.i4">
            <p>conversion of math;</p>
          </item>
          <item xml:id="Ch2.I4.i5">
            <p>conversion of graphics and picture environments to web format (png);</p>
          </item>
          <item xml:id="Ch2.I4.i6">
            <p>applying an <ref href="http://www.w3.org/Style/XSL/"><text font="typewriter">XSLT</text></ref> stylesheet.</p>
          </item>
        </itemize>
        <p>The output format affects the defaults for each step and is determined
by the file extension of <text font="typewriter">--destination</text>, or by the option</p>
        <quote>
<text font="typewriter">--format=(xhtml|html|xml)</text>
</quote>
        <description xml:id="Ch2.I5">
          <item xml:id="Ch2.I5.i1">
            <tag>html</tag>
            <p>both math and graphics are converted to png images;
the stylesheet <text font="typewriter">LaTeXML-html.xslt</text> is used.</p>
          </item>
          <item xml:id="Ch2.I5.i2">
            <tag>xhtml</tag>
            <p>math is converted to Presentation <ref href="http://www.w3.org/Math/"><text font="typewriter">MathML</text></ref>, other graphics are converted to images;
the stylesheet <text font="typewriter">LaTeXML-xhtml.xslt</text>  is used.</p>
          </item>
          <item xml:id="Ch2.I5.i3">
            <tag>xml</tag>
            <p>no math, graphics or <ref href="http://www.w3.org/Style/XSL/"><text font="typewriter">XSLT</text></ref> conversion is carried out.</p>
          </item>
        </description>
        <p>Of course, all of these conversions can be controlled or overridden
by explicit options described below.
<!-- %**** manual.tex Line 225 **** -->For more details about less common options, see the command
documentation <ref labelref="LABEL:latexmlpost">latexmlpost</ref>, as well as Appendix <ref labelref="LABEL:postmodules"/>.</p>
      </para>
      <paragraph xml:id="Ch2.S2.SS0.SSS0.P1">
        <title>Scanning</title>
        <para xml:id="Ch2.S2.SS0.SSS0.P1.p1">
          <p>The scanning step collects information about all labels, ids,
indexing commands, cross-references and so on, to be used
in the following postprocessing stages.</p>
        </para>
      </paragraph>
      <paragraph xml:id="Ch2.S2.SS0.SSS0.P2">
        <title>Indexing</title>
        <para xml:id="Ch2.S2.SS0.SSS0.P2.p1">
          <p>An index is built from <verbatim font="typewriter">\index</verbatim> markup, if
<text font="typewriter">makeidx</text>'s <verbatim font="typewriter">\printindex</verbatim> command has been used,
but this can be disabled by</p>
          <quote>
<text font="typewriter">--noindex</text>
</quote>
          <p>The index entries can be permuted with the option</p>
          <quote>
<text font="typewriter">--permutedindex</text>
</quote>
          <p>Thus <verbatim font="typewriter">\index{term a!term b}</verbatim> also shows up as <verbatim font="typewriter">\index{term b!term a}</verbatim>.
This leads to a more complete, but possibly rather silly, index,
depending on how the terms have been written.</p>
        </para>
      </paragraph>
      <paragraph xml:id="Ch2.S2.SS0.SSS0.P3">
        <title>Bibliography</title>
        <para xml:id="Ch2.S2.SS0.SSS0.P3.p1">
          <p>Bibilographic data from BibTeX can be provided with the option
<!-- %**** manual.tex Line 250 **** --></p>
          <quote>
<text font="typewriter">--bibliography=<text font="italic">bibfile</text>.xml</text>
</quote>
          <p>However, the tools to convert a BibTeX file to <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> are
not yet provided with the distribution.</p>
        </para>
      </paragraph>
      <paragraph xml:id="Ch2.S2.SS0.SSS0.P4">
        <title>Cross-Referencing</title>
        <para xml:id="Ch2.S2.SS0.SSS0.P4.p1">
          <p>In this stage, the scanned information is used to fill in the
text and links of cross-references within the document.
The option</p>
          <quote>
<text font="typewriter">--urlstyle=(server|negotiated|file)</text>
</quote>
          <p>can control the format of urls with the document.</p>
          <description xml:id="Ch2.I6">
            <item xml:id="Ch2.I6.i1">
              <tag>server</tag>
              <p>formats urls appropriate for use from a web server.
In particular, trailing <text font="typewriter">index.html</text> are omitted. (default)</p>
            </item>
            <item xml:id="Ch2.I6.i2">
              <tag>negotiated</tag>
              <p>formats urls appropriate for use by a server
that implements content negotiation. File extensions for <text font="typewriter">html</text>
and <text font="typewriter">xhtml</text> are omitted.  This enables you to set up a server
that serves the appropriate format depending on the browser being used.</p>
            </item>
            <item xml:id="Ch2.I6.i3">
              <tag>file</tag>
              <p>formats urls explicitly, with full filename and extension.
This allows the files to be browsed from the local filesystem.</p>
            </item>
          </description>
        </para>
        <!-- %**** manual.tex Line 275 **** -->
      </paragraph>
      <paragraph xml:id="Ch2.S2.SS0.SSS0.P5">
        <title>Math Conversion</title>
        <para xml:id="Ch2.S2.SS0.SSS0.P5.p1">
          <p>Specific conversions of the mathematics can be requested
using the options</p>
          <quote>
<text font="typewriter">--mathimages</text>   converts math to png images,<break/>
<text font="typewriter">--presentationmathml</text> (or <text font="typewriter">--pmml</text>) creates Presentation <ref href="http://www.w3.org/Math/"><text font="typewriter">MathML</text></ref><break/>
<text font="typewriter">--contentmathml</text> (or <text font="typewriter">--cmml</text>) creates Content <ref href="http://www.w3.org/Math/"><text font="typewriter">MathML</text></ref><break/>
<text font="typewriter">--openmath</text> (or <text font="typewriter">--om</text>) creates <ref href="http://www.openmath.org/"><text font="typewriter">OpenMath</text></ref></quote>
          <p>(Each of these options can also be negated if needed, eg. <text font="typewriter">--nomathimages</text>)
It must be pointed out that the Content <ref href="http://www.w3.org/Math/"><text font="typewriter">MathML</text></ref> and <ref href="http://www.openmath.org/"><text font="typewriter">OpenMath</text></ref> conversions are currently rather experimental.</p>
        </para>
        <para xml:id="Ch2.S2.SS0.SSS0.P5.p2">
          <p>More than one of these conversions can be requested, and
each will be included in the output document.
However, the option</p>
          <quote>
<text font="typewriter">--parallelmath</text>
</quote>
          <p>can be used to generate parallel <ref href="http://www.w3.org/Math/"><text font="typewriter">MathML</text></ref> markup, provided the first
conversion is either <text font="typewriter">--pmml</text> or <text font="typewriter">--cmml</text>.</p>
        </para>
      </paragraph>
      <paragraph xml:id="Ch2.S2.SS0.SSS0.P6">
        <title>Graphics processing</title>
        <toctitle>Graphics</toctitle>
        <para xml:id="Ch2.S2.SS0.SSS0.P6.p1">
          <p>Conversion of graphics (eg. from the <text font="typewriter">graphic(s|x)</text> packages'
<verbatim font="typewriter">\includegraphics</verbatim>) can be enabled or disabled
<!-- %**** manual.tex Line 300 **** -->using</p>
          <quote>
<text font="typewriter">--graphicsimages</text> or <text font="typewriter">--nographicsimages</text>
</quote>
          <p>Similarly, the conversion of <text font="typewriter">picture</text> environments can be controlled with</p>
          <quote>
<text font="typewriter">--pictureimages</text> or <text font="typewriter">--nopictureimages</text>
</quote>
          <p>An experimental capability for converting the latter to <text font="smallcaps">SVG</text> can be
controlled by</p>
          <quote>
<text font="typewriter">--svg</text> or <text font="typewriter">--nosvg</text>
</quote>
        </para>
      </paragraph>
      <paragraph xml:id="Ch2.S2.SS0.SSS0.P7">
        <title>Stylesheet</title>
        <para xml:id="Ch2.S2.SS0.SSS0.P7.p1">
          <p>If you wish to provide your own <ref href="http://www.w3.org/Style/XSL/"><text font="typewriter">XSLT</text></ref> or
<ref href="http://www.w3.org/Style/CSS/"><text font="typewriter">CSS</text></ref> stylesheets, the options</p>
          <quote>
<text font="typewriter">--stylesheet=<text font="italic">stylesheet</text>.xsl<break/></text>
<text font="typewriter">--css=<text font="italic">stylesheet</text>.css</text>
</quote>
          <p>can be used.  The <text font="typewriter">--css</text> option can be repeated to include multiple stylesheets;
for example, the distribution provides several in addition to the <text font="typewriter">core.css</text> stylesheet
which is included by default.</p>
          <description xml:id="Ch2.I7">
            <!-- %**** manual.tex Line 325 **** -->
            <item xml:id="Ch2.I7.i1">
              <tag>
                <text font="typewriter">navbar-left.css</text>
              </tag>
              <p>Places a navigation bar on the left.</p>
            </item>
            <item xml:id="Ch2.I7.i2">
              <tag>
                <text font="typewriter">navbar-right.css</text>
              </tag>
              <p>Places a navigation bar on the left.</p>
            </item>
            <item xml:id="Ch2.I7.i3">
              <tag>
                <text font="typewriter">theme-blue.css</text>
              </tag>
              <p>Colors various features in a soft blue.</p>
            </item>
            <item xml:id="Ch2.I7.i4">
              <tag>
                <text font="typewriter">amsart.css</text>
              </tag>
              <p>A style appropriate for many journal articles.</p>
            </item>
          </description>
        </para>
        <para xml:id="Ch2.S2.SS0.SSS0.P7.p2">
          <p>To develop such stylesheets, a knowledge
of the <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> document type is necessary; See Appendix <ref labelref="LABEL:schema"/>.</p>
        </para>
        <!-- %%%__ -->
      </paragraph>
    </section>
    <section refnum="2.3" xml:id="Ch2.S3" labels="LABEL:usage.multiple">
      <title>Splitting the Output</title>
      <toctitle>Splitting</toctitle>
      <indexmark>
        <indexphrase key="latexmlpost">latexmlpost</indexphrase>
        <indexphrase key="usage">usage</indexphrase>
        <indexphrase key="splitpages">split pages</indexphrase>
      </indexmark>
      <para xml:id="Ch2.S3.p1">
        <p>For larger documents, it is often desirable to break the
result into several interlinked pages. This split,
carried out before scanning, is requested by</p>
        <quote>
<text font="typewriter">--splitat=<text font="italic">level</text></text>
</quote>
        <p>where <text font="italic">level</text> is one of <text font="typewriter">chapter</text>,
<text font="typewriter">section</text>, <text font="typewriter">subsection</text>, or <text font="typewriter">subsubsection</text>.
For example, <text font="typewriter">section</text> would split the document into
chapters (if any) and sections, along with separate
bibliography, index and any appendices.
The removed document nodes are replaced by a Table of Contents.</p>
      </para>
      <para xml:id="Ch2.S3.p2">
        <p>The extra files are named using either the id or label
<!-- %**** manual.tex Line 350 **** -->of the root node of each new page document according to</p>
        <quote>
<text font="typewriter">--splitnaming=(id|idrelative|label|labelrelative)</text>
</quote>
        <p>The relative foms create shorter names in subdirectories for each
level of splitting.
The <text font="typewriter">--urlstyle</text> option may also be useful here,
as well as the <ref labelref="LABEL:latexml">latexml</ref> option <text font="typewriter">--documentid</text>.</p>
      </para>
      <para xml:id="Ch2.S3.p3">
        <p>Additionally, the index and bibliography can be split
into separate pages according to the initial letter of entries by using the options</p>
        <quote>
<text font="typewriter">--splitindex</text> and <text font="typewriter">--splitbibliography</text>
</quote>
      </para>
      <!-- %%%__ -->
    </section>
    <section refnum="2.4" xml:id="Ch2.S4" labels="LABEL:usage.site">
      <title>Site processing</title>
      <toctitle>Sites</toctitle>
      <indexmark>
        <indexphrase key="latexmlpost">latexmlpost</indexphrase>
        <indexphrase key="usage">usage</indexphrase>
        <indexphrase key="site">site</indexphrase>
      </indexmark>
      <para xml:id="Ch2.S4.p1">
        <p>A more complicated situation combines several TeX sources
into a single interlinked site consisting of multiple pages
and a composite index and bibliography.
The games one must play with LaTeX's aux files to satisfy cross-references
between these documents are not covered here, but the situation is handled
by <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> in the following fashion.</p>
      </para>
      <para xml:id="Ch2.S4.p2">
        <description xml:id="Ch2.I8">
          <!-- %**** manual.tex Line 375 **** -->
          <item xml:id="Ch2.I8.i1">
            <tag>Conversion</tag>
            <p>First, all TeX sources must be converted
to <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref>, using <ref labelref="LABEL:latexml">latexml</ref>.  Since every target-able element
in all files to be combined must have a unique identifier, it is useful to
prefix each identifier with a unique value for each file.
The <ref labelref="LABEL:latexml">latexml</ref> option <text font="typewriter">--documentid=<text font="italic">id</text></text> provides this.</p>
          </item>
          <item xml:id="Ch2.I8.i2">
            <tag>Scanning</tag>
            <p>Secondly, all <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> files must be split and scanned using
the command</p>
            <quote>
<text font="typewriter">latexmlpost --prescan --dbfile=<text font="italic">DB</text> --dest=<text font="italic">i</text>.xhtml <text font="italic">i</text></text>
</quote>
            <p>where <text font="typewriter italic">DB</text> names a file in which to store the scanned data.
Other conversions, including writing the output file, are skipped in this prescanning step.</p>
          </item>
          <item xml:id="Ch2.I8.i3">
            <tag>Pagination</tag>
            <p>Finally, all <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> files are cross-referenced and converted into
the final format using the command</p>
            <quote>
<text font="typewriter">latexmlpost --noscan --dbfile=<text font="italic">DB</text> --dest=<text font="italic">i</text>.xhtml <text font="italic">i</text></text>
</quote>
            <p>which skips the unnecessary scanning step.</p>
          </item>
        </description>
      </para>
      <!-- %%%====================================================================== -->
    </section>
  </chapter>
  <chapter refnum="3" xml:id="Ch3" labels="LABEL:architecture">
    <title>Architecture</title>
    <para xml:id="Ch3.p1">
      <p>Like TeX, <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> is data-driven: the text and executable control
<!-- %**** manual.tex Line 400 **** -->sequences (ie. macros and primitives)
in the source file (and any packages loaded) direct the processing.
The user exerts control over the conversion, and customizes it, by
providing alternative <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref>-specific implementations of the control sequences and packages,
by declaring properties of the desired document structure,
and by defining rewrite rules to be applied to the constructed document tree.</p>
    </para>
    <figure placement="tb" refnum="3.1" xml:id="Ch3.F1" labels="LABEL:fig:dataflow">
      <graphics graphic="dataflow" options="width=433.62pt"/>
      <caption>Flow of data through <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref>'s digestive tract.</caption>
    </figure>
    <para xml:id="Ch3.p2">
      <p>The top-level class, <ref labelref="LABEL:LaTeXML">LaTeXML</ref>, manages the processing, providing several methods
for converting a TeX document or string into an <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> document, with varying degrees
of postprocessing and optionally writing the document to file.
A <ref labelref="LABEL:LaTeXML::State">LaTeXML::State</ref> object maintains the current state
of processing, current definitions for control sequences and emulates the
TeX's scoping rules.
The processing is broken into the following stages</p>
      <description xml:id="Ch3.I1">
        <item xml:id="Ch3.I1.i1">
          <tag>Digestion</tag>
          <p>the TeX-like digestion phase which converts the input into boxes.</p>
        </item>
        <item xml:id="Ch3.I1.i2">
          <tag>Construction</tag>
          <p>converts the resulting boxes into an <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> DOM.</p>
        </item>
        <item xml:id="Ch3.I1.i3">
          <tag>Rewriting</tag>
          <p>applies rewrite rules to modify the DOM.</p>
        </item>
        <item xml:id="Ch3.I1.i4">
          <tag>Math Parsing</tag>
          <p>parses the tokenized mathematics.</p>
        </item>
      </description>
      <p>See Figure <ref labelref="LABEL:fig:dataflow"/> for illustration.
<!-- %**** manual.tex Line 425 **** -->The first three stages are discussed in the following sections;
the parsing of mathematics is covered in detail in Chapter <ref labelref="LABEL:math"/>.</p>
    </para>
    <para xml:id="Ch3.p3">
      <p>The <ref labelref="LABEL:LaTeXML">LaTeXML</ref> object binds <verbatim font="typewriter">$STATE</verbatim>, <verbatim font="typewriter">$GULLET</verbatim>, <verbatim font="typewriter">$STOMACH</verbatim>,
and <verbatim font="typewriter">$MODEL</verbatim> to corresponding active objects during processing.</p>
    </para>
    <!-- %%%__ -->
    <section refnum="3.1" xml:id="Ch3.S1" labels="LABEL:architecture.digestion">
      <title>Digestion</title>
      <para xml:id="Ch3.S1.p1">
        <p>Digestion is carried out primarily in a <emph>pull</emph> mode: The <ref labelref="LABEL:LaTeXML::Stomach">LaTeXML::Stomach</ref>
pulls expanded <ref labelref="LABEL:LaTeXML::Token">LaTeXML::Token</ref>s from the <ref labelref="LABEL:LaTeXML::Gullet">LaTeXML::Gullet</ref>, which itself pulls tokens from
the <ref labelref="LABEL:LaTeXML::Mouth">LaTeXML::Mouth</ref>.  The <ref labelref="LABEL:LaTeXML::Mouth">LaTeXML::Mouth</ref> converts characters from the plain text input
into tokens according to the current category codes assigned to them (in the <ref labelref="LABEL:LaTeXML::State">LaTeXML::State</ref>).
The <ref labelref="LABEL:LaTeXML::Gullet">LaTeXML::Gullet</ref> is responsible for expanding any macro or expandible
tokens (when the current binding of the token in the <ref labelref="LABEL:LaTeXML::State">LaTeXML::State</ref> is
an <ref labelref="LABEL:LaTeXML::Expandable">LaTeXML::Expandable</ref> definition),
and for parsing sequences of tokens into common core datatypes (numbers, dimensions, etc.).
The <ref labelref="LABEL:LaTeXML::Stomach">LaTeXML::Stomach</ref> digests these tokens by executing <ref labelref="LABEL:LaTeXML::Primitive">LaTeXML::Primitive</ref> control
sequences (generally for side effect), converting control sequences bound
to <ref labelref="LABEL:LaTeXML::Constructor">LaTeXML::Constructor</ref>s into <ref labelref="LABEL:LaTeXML::Whatsit">LaTeXML::Whatsit</ref>s, and converting the remaining tokens
into a recursive structure consisting of
<ref labelref="LABEL:LaTeXML::Box">LaTeXML::Box</ref>es and <ref labelref="LABEL:LaTeXML::List">LaTeXML::List</ref>s and of <ref labelref="LABEL:LaTeXML::Box">LaTeXML::Box</ref>es.</p>
      </para>
      <!-- %%%__ -->
    </section>
    <section refnum="3.2" xml:id="Ch3.S2" labels="LABEL:architecture.construction">
      <title>Construction</title>
      <para xml:id="Ch3.S2.p1">
        <p>The main (intentional) deviation of <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref>'s digestion from that of TeX is in the
<!-- %**** manual.tex Line 450 **** -->extension of control sequences to include <ref labelref="LABEL:LaTeXML::Constructor">LaTeXML::Constructor</ref>s responsible for constructing
<ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> document fragments, and <ref labelref="LABEL:LaTeXML::Whatsit">LaTeXML::Whatsit</ref>s to represent thier digested form including
whatever arguments were passed to the control sequence.</p>
      </para>
      <para xml:id="Ch3.S2.p2">
        <p><emph>Construction</emph> thus consists of creating an <ref labelref="LABEL:LaTeXML::Document">LaTeXML::Document</ref>, containing
an <ref href="http://search.cpan.org/search?query=XML%3A%3ALibXML%3A%3ADocument&amp;mode=module">XML::LibXML::Document</ref> structure, and having it absorb the digested lists, boxes
and whatsits.  Generally, boxes represent text which is converted to text nodes within the
document. Whatsits generally create a document fragment involving elements, attributes
and text.</p>
      </para>
      <para xml:id="Ch3.S2.p3">
        <p>A <ref labelref="LABEL:LaTeXML::Model">LaTeXML::Model</ref> is maintained througout the digestion phase which accumulates
any document model declarations in particular the document type (currently only
the DTD, but eventually may be RelaxNG based).  As LaTeX markup is more
like <ref href="http://www.w3.org/MarkUp/SGML/"><text font="typewriter">HTML</text></ref> than <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref>, declarations may be used to indicate which elements may
be automatically opened or closed when needed to build a document tree that matches
the document type.  As an example, a <verbatim font="typewriter">&lt;subsection&gt;</verbatim> will automaticall be closed
when a <verbatim font="typewriter">&lt;section&gt;</verbatim> is begun.</p>
      </para>
      <!-- %%%__ -->
    </section>
    <section refnum="3.3" xml:id="Ch3.S3" labels="LABEL:architecture.rewriting">
      <title>Rewriting</title>
      <para xml:id="Ch3.S3.p1">
        <p>Once the basic document is constructed, <ref labelref="LABEL:LaTeXML::Rewrite">LaTeXML::Rewrite</ref> rules are applied which can
perform various functions. Ligatures and combining mathematics digits and letters (in certain fonts)
into composite math tokens are handled this way.  Additionally, declarations
of the type or grammatical role of math tokens can be applied here.</p>
      </para>
      <!-- %**** manual.tex Line 475 **** 
     %%%======================================================================-->
    </section>
  </chapter>
  <chapter refnum="4" xml:id="Ch4" labels="LABEL:customization">
    <title>Customization</title>
    <para xml:id="Ch4.p1">
      <p>The processsing of the LaTeX document and its  conversion into <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> is affected
by the definitions of control sequences, either as macros, primitives or constructors,
and other declarations specifying the document type, properties of <ref href="http://www.w3.org/XML/"><text font="typewriter">XML</text></ref> tags, ligatures, ….
These definitions and declarations are typically contained in `packages' which provide
the implementation of LaTeX classes and packages.  For example, the LaTeX directive
<verbatim font="typewriter">\usepackage{foo}</verbatim> would cause <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> to load the file <text font="typewriter">foo.sty.ltxml</text>.
This file would be sought in any of the directories in perl's <verbatim font="typewriter">@INC</verbatim> list (typically
including the current directory), or in a <verbatim font="typewriter">LaTeXML/Package</verbatim> subdirectory of any of
those directories.  If no such file is found, <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> would look for <text font="typewriter">foo.sty</text> and
attempt to process it.</p>
    </para>
    <para xml:id="Ch4.p2">
      <p>When processing a typical file, say <text font="typewriter italic">jobname<text font="upright">.tex</text></text>,
the following packages are loaded:</p>
      <enumerate xml:id="Ch4.I1">
        <item refnum="1" xml:id="Ch4.I1.i1">
          <p>the core <text font="typewriter">TeX</text> package</p>
        </item>
        <item refnum="2" xml:id="Ch4.I1.i2">
          <p>any packages named with the <verbatim font="typewriter">--preload</verbatim> option,</p>
        </item>
        <item refnum="3" xml:id="Ch4.I1.i3">
          <p>a file <text font="typewriter italic">jobname<text font="upright">.latexml</text></text>, if present;
this provides for document-specific declarations.</p>
        </item>
      </enumerate>
      <p>Document processing then commences; by default, <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> assumes that the document is plain TeX.
However, if a <verbatim font="typewriter">\documentclass</verbatim> directive is encountered, the <text font="typewriter">LaTeX</text> package, as well
as a package for the named document class are loaded.
<!-- %**** manual.tex Line 500 **** --></p>
    </para>
    <para xml:id="Ch4.p3">
      <p><ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> implementations are provided for a number of the standard LaTeX packages,
although many implement only part of the functionality.  Contributed implementations are,
of course, welcome.  These files, as well as the document specific <text font="typewriter italic">jobname<text font="upright">.latexml</text></text>,
are essentially Perl modules, but use the facilities described in <ref labelref="LABEL:LaTeXML::Package">LaTeXML::Package</ref>.</p>
    </para>
    <para xml:id="Ch4.p4">
      <p>Much more needs to be explained here, but for the time being,
please consult the documentation for the module <ref labelref="LABEL:LaTeXML::Package">LaTeXML::Package</ref>, and
the various implementations of packages included with the distribution.</p>
    </para>
    <!-- %%%====================================================================== -->
  </chapter>
  <chapter refnum="5" xml:id="Ch5" labels="LABEL:math">
    <title>Mathematics</title>
    <para xml:id="Ch5.p1">
      <p>There are several issues that have to be dealt with in treating the mathematics.
On the one hand, the TeX markup gives a pretty good indication of what the
author wants the math to look like, and so we would seem to have a good handle
on the conversion to presentation forms.  On the other hand, content formats
are desirable as well; there are a few, but too few, clues about what the
intent of the mathematics is.  And in fact, the generation of even Presentation
MathML of high quality requires recognizing the mathematical structure, if not
the actual semantics. The mathematics processing must therefore preserve the
presentational information provided by the author, while inferring, likely
with some help, the mathematical content.</p>
    </para>
    <para xml:id="Ch5.p2">
      <p>From a parsing point of view, the TeX-like processing serves as the lexer,
tokenizing the input which <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> will then parse
<!-- %**** manual.tex Line 525 **** -->[perhaps eventually a type-analysis phase will be added].
Of course, there are a few twists.
For one, the tokens, represented by <ref idref="dtd.element.XMTok"><text font="typewriter">XMTok</text></ref>, can carry extra attributes
such as font and style, but also the name, meaning and grammatical role,
with defaults that can be overridden by the author — more on those, in a moment.
Another twist is that, although LaTeX's math markup is not nearly
as semantic as we might like, there is considerable semantics and structure in the
markup that we can exploit. For example, given a <verbatim font="typewriter">\frac</verbatim>, we've already
established the numerator and denominator which can be parsed individually,
but the fraction as a whole can be directly represented as an application,
using <ref idref="dtd.element.XMApp"><text font="typewriter">XMApp</text></ref>, of a fraction operator; the resulting structure can be treated
as atomic within its containing expression.This <emph>structure preserving</emph> character
greatly simplifies the parsing task and helps reduce misinterpretation.</p>
    </para>
    <para xml:id="Ch5.p3">
      <p>The parser, invoked by the postprocessor, works only with the top-level lists of lexical tokens,
or with those sublists contained in an <ref idref="dtd.element.XMArg"><text font="typewriter">XMArg</text></ref>.  The grammar works primarily through
the name and grammatical role.  The name is given by an attribute, or the content if it is
the same.  The role (things like ID, FUNCTION, OPERATOR, OPEN, …) is also given
by an attribute, or, if not present, the name is looked up in a document-specific
dictionary (<text font="typewriter italic">jobname<text font="upright">.dict</text></text>), or in a default dictionary.</p>
    </para>
    <para xml:id="Ch5.p4">
      <p>Additional exceptions that need fuller explanation are:</p>
      <itemize xml:id="Ch5.I1">
        <item xml:id="Ch5.I1.i1">
          <p><ref labelref="LABEL:LaTeXML::Constructor">LaTeXML::Constructor</ref>s may wish to create a dual object (<ref idref="dtd.element.XMDual"><text font="typewriter">XMDual</text></ref>) whose children are
the semantic and presentational forms.
<!-- %**** manual.tex Line 550 **** --></p>
        </item>
        <item xml:id="Ch5.I1.i2">
          <p>Spacing and similar markup generates <ref idref="dtd.element.XMHint"><text font="typewriter">XMHint</text></ref> elements, which are currently ignored
during parsing, but probably shouldn't.</p>
        </item>
      </itemize>
    </para>
    <!-- %%%__ -->
    <section refnum="5.1" xml:id="Ch5.S1" labels="LABEL:math.details">
      <title>Math Details</title>
      <para xml:id="Ch5.S1.p1">
        <p><ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> processes mathematical material by proceeding through several stages:</p>
        <itemize xml:id="Ch5.I2">
          <item xml:id="Ch5.I2.i1">
            <p>Basic processing of macros, primitives and constructors resulting in
an XML document; the math is primarily represented by a sequence of
tokens (<ref idref="dtd.element.XMTok"><text font="typewriter">XMTok</text></ref>) or structured items (<ref idref="dtd.element.XMApp"><text font="typewriter">XMApp</text></ref>, <ref idref="dtd.element.XMDual"><text font="typewriter">XMDual</text></ref>) and
hints (<ref idref="dtd.element.XMHint"><text font="typewriter">XMHint</text></ref>, which are ignored).</p>
          </item>
          <item xml:id="Ch5.I2.i2">
            <p>Document tree rewriting, where rules are applied to modify the document tree.
User supplied rules can be used here to clarify the intent of markup used in the document.</p>
          </item>
          <item xml:id="Ch5.I2.i3">
            <p>Math Parsing; a grammar based parser is applied, depth first, to each level of the math.
In particular, at the top level of each math expression, as well as each
subexpression within structured items (these will have been contained in
an <ref idref="dtd.element.XMArg"><text font="typewriter">XMArg</text></ref> or <ref idref="dtd.element.XMWrap"><text font="typewriter">XMWrap</text></ref> element).  This results in an expression tree
that will hopefully be an accurate representation of the expression's structure,
but may be ambigous in specifics (eg.`what the meaning of a superscript is).
The parsing is driven almost entirely by the grammatical <text font="typewriter">role</text> assigned
to each item.</p>
          </item>
          <item xml:id="Ch5.I2.i4">
            <p><emph>Not yet implemented</emph> a following stage must be developed to resolve
the semantic ambiguities by analyzing and augmenting the expression tree.</p>
          </item>
          <item xml:id="Ch5.I2.i5">
            <p>Target conversion: from the internal <text font="typewriter">XM*</text> representation to
<!-- %**** manual.tex Line 575 **** --><ref href="http://www.w3.org/Math/"><text font="typewriter">MathML</text></ref> or <ref href="http://www.openmath.org/"><text font="typewriter">OpenMath</text></ref>.</p>
          </item>
        </itemize>
      </para>
      <para xml:id="Ch5.S1.p2">
        <p>The <ref idref="dtd.element.Math"><text font="typewriter">Math</text></ref> element is a top-level container for any math mode material,
serving as the container for various representations of the math including
images (through attributes <text font="typewriter">mathimage</text>, <text font="typewriter">width</text> and <text font="typewriter">height</text>),
textual (through attributes <text font="typewriter">tex</text>, <text font="typewriter">content-tex</text> and <text font="typewriter">text</text>),
<ref href="http://www.w3.org/Math/"><text font="typewriter">MathML</text></ref> and the internal representation itself.
The <text font="typewriter">mode</text> attribute specifies whether the math should be in display or inline mode.</p>
      </para>
      <subsection refnum="5.1.1" xml:id="Ch5.S1.SS1" labels="LABEL:math.details.representation">
        <title>Internal Math Representation</title>
        <para xml:id="Ch5.S1.SS1.p1">
          <p>The <ref idref="dtd.element.XMath"><text font="typewriter">XMath</text></ref> element is the container for the internal representation</p>
        </para>
        <para xml:id="Ch5.S1.SS1.p2">
          <p>The following attributes can appear on all <text font="typewriter">XM*</text> elements:</p>
          <description xml:id="Ch5.I3">
            <item xml:id="Ch5.I3.i1">
              <tag>
                <text font="typewriter">role</text>
              </tag>
              <p>the grammatical role that this element plays</p>
            </item>
            <item xml:id="Ch5.I3.i2">
              <tag><text font="typewriter">open</text>, <text font="typewriter">close</text></tag>
              <p>parenthese or delimiters that were used to wrap the
expression represented by this element.</p>
            </item>
            <item xml:id="Ch5.I3.i3">
              <tag><text font="typewriter">argopen</text>, <text font="typewriter">argclose</text>, <text font="typewriter">separators</text></tag>
              <p>delimiters on an function or operator
(the first element of an <ref idref="dtd.element.XMApp"><text font="typewriter">XMApp</text></ref>)  that were used to delimit the arguments of the function.
The separators is a string of the punctuation characters used to separate arguments.</p>
            </item>
            <item xml:id="Ch5.I3.i4">
              <tag>
                <text font="typewriter">xml:id</text>
              </tag>
              <p>a unique identifier to allow reference (<ref idref="dtd.element.XMRef"><text font="typewriter">XMRef</text></ref>) to this element.</p>
            </item>
          </description>
        </para>
        <paragraph xml:id="Ch5.S1.SS1.SSS0.P1">
          <title>Math Tags</title>
          <para xml:id="Ch5.S1.SS1.SSS0.P1.p1">
            <p>The following tags are used for the intermediate math representation:
<!-- %**** manual.tex Line 600 **** --></p>
            <description xml:id="Ch5.I4">
              <item xml:id="Ch5.I4.i1">
                <tag>
                  <ref idref="dtd.element.XMTok">
                    <text font="typewriter">XMTok</text>
                  </ref>
                </tag>
                <p>represents a math token. It may contain text for presentation.
Additional attributes are:</p>
                <description xml:id="Ch5.I4.I1">
                  <item xml:id="Ch5.I4.I1.i1">
                    <tag>
                      <text font="typewriter">name</text>
                    </tag>
                    <p>the name that represents the `meaning' of the token; this overrides
the content for identifying the token.</p>
                  </item>
                  <item xml:id="Ch5.I4.I1.i2">
                    <tag>
                      <text font="typewriter">omcd</text>
                    </tag>
                    <p>the <ref href="http://www.openmath.org/"><text font="typewriter">OpenMath</text></ref> content dictionary that the name belongs to.</p>
                  </item>
                  <item xml:id="Ch5.I4.I1.i3">
                    <tag>
                      <text font="typewriter">font</text>
                    </tag>
                    <p>the font to be used for presenting the content.</p>
                  </item>
                  <item xml:id="Ch5.I4.I1.i4">
                    <tag>
                      <text font="typewriter">style</text>
                    </tag>
                    <p>?</p>
                  </item>
                  <item xml:id="Ch5.I4.I1.i5">
                    <tag>
                      <text font="typewriter">size</text>
                    </tag>
                    <p>?</p>
                  </item>
                  <item xml:id="Ch5.I4.I1.i6">
                    <tag>
                      <text font="typewriter">stackscripts</text>
                    </tag>
                    <p>whether scripts should be stacked above/below the item, instead
of the usual script position.</p>
                  </item>
                </description>
              </item>
              <item xml:id="Ch5.I4.i2">
                <tag>
                  <ref idref="dtd.element.XMApp">
                    <text font="typewriter">XMApp</text>
                  </ref>
                </tag>
                <p>represents the generalized application of some function or operator to arguments.
The first child element is the operator, the remainig elements are the arguments.
Additional attributes:</p>
                <description xml:id="Ch5.I4.I2">
                  <item xml:id="Ch5.I4.I2.i1">
                    <tag>
                      <text font="typewriter">name</text>
                    </tag>
                    <p>the name that represents the meaning of the construct as a whole.</p>
                  </item>
                  <item xml:id="Ch5.I4.I2.i2">
                    <tag>
                      <text font="typewriter">stackscripts</text>
                    </tag>
                    <p>?</p>
                  </item>
                </description>
              </item>
              <item xml:id="Ch5.I4.i3">
                <tag>
                  <ref idref="dtd.element.XMDual">
                    <text font="typewriter">XMDual</text>
                  </ref>
                </tag>
                <p>combines representations of the content (the first child) and presentation
(the second child), useful when the two structures are not easily related.</p>
              </item>
              <item xml:id="Ch5.I4.i4">
                <tag>
                  <ref idref="dtd.element.XMHint">
                    <text font="typewriter">XMHint</text>
                  </ref>
                </tag>
                <p>represents spacing or other apparent purely presentation material.</p>
                <description xml:id="Ch5.I4.I3">
                  <item xml:id="Ch5.I4.I3.i1">
                    <tag>
                      <text font="typewriter">name</text>
                    </tag>
                    <p>names the effect that the hint was intended to achieve.
<!-- %**** manual.tex Line 625 **** --></p>
                  </item>
                  <item xml:id="Ch5.I4.I3.i2">
                    <tag>
                      <text font="typewriter">style</text>
                    </tag>
                    <p>?</p>
                  </item>
                </description>
              </item>
              <item xml:id="Ch5.I4.i5">
                <tag>
                  <ref idref="dtd.element.XMWrap">
                    <text font="typewriter">XMWrap</text>
                  </ref>
                </tag>
                <p>serves to assert the expected type or role of a subexpression that
may otherwise be difficult to interpret — the parser is more forgiving about these.</p>
                <description xml:id="Ch5.I4.I4">
                  <item xml:id="Ch5.I4.I4.i1">
                    <tag>
                      <text font="typewriter">name</text>
                    </tag>
                    <p>?</p>
                  </item>
                  <item xml:id="Ch5.I4.I4.i2">
                    <tag>
                      <text font="typewriter">style</text>
                    </tag>
                    <p>?</p>
                  </item>
                </description>
              </item>
              <item xml:id="Ch5.I4.i6">
                <tag>
                  <ref idref="dtd.element.XMArg">
                    <text font="typewriter">XMArg</text>
                  </ref>
                </tag>
                <p>serves to wrap individual arguments or subexpressions, created by
structured markup, such as <verbatim font="typewriter">\frac</verbatim>.  These subexpressions can be parsed individually.</p>
                <description xml:id="Ch5.I4.I5">
                  <item xml:id="Ch5.I4.I5.i1">
                    <tag>
                      <text font="typewriter">rule</text>
                    </tag>
                    <p>the grammar rule that this subexpression should match.</p>
                  </item>
                </description>
              </item>
              <item xml:id="Ch5.I4.i7">
                <tag>
                  <ref idref="dtd.element.XMRef">
                    <text font="typewriter">XMRef</text>
                  </ref>
                </tag>
                <p>refers to another subexpression,.  This is used to avoid duplicating
arguments when constructing an <ref idref="dtd.element.XMDual"><text font="typewriter">XMDual</text></ref> to represent a function application, for example.
The arguments will be placed in the content branch (wrapped in an <ref idref="dtd.element.XMArg"><text font="typewriter">XMArg</text></ref>) while
<ref idref="dtd.element.XMRef"><text font="typewriter">XMRef</text></ref>'s will be placed in the presentation branch.</p>
                <description xml:id="Ch5.I4.I6">
                  <item xml:id="Ch5.I4.I6.i1">
                    <tag>
                      <text font="typewriter">idref</text>
                    </tag>
                    <p>the identifier of the referenced math subexpression.</p>
                  </item>
                </description>
              </item>
            </description>
          </para>
        </paragraph>
      </subsection>
      <subsection refnum="5.1.2" xml:id="Ch5.S1.SS2" labels="LABEL:math.details.roles">
        <title>Grammatical Roles</title>
        <para xml:id="Ch5.S1.SS2.p1">
          <p>The <text font="typewriter">role</text> attempts to capture the syntactic nature of each item.
This is used primarily to drive the parsing; the grammar rules are keyed
<!-- %**** manual.tex Line 650 **** -->on the <text font="typewriter">role</text>, rather than content, of the nodes.  The <text font="typewriter">role</text>
is also used to drive the conversion to presentation markup, especially
Presentation <ref href="http://www.w3.org/Math/"><text font="typewriter">MathML</text></ref>, and in fact some values of <text font="typewriter">role</text> are only used
that way, never appearing explicitly in the grammar.</p>
        </para>
        <para xml:id="Ch5.S1.SS2.p2">
          <p>The following grammatical roles are recognized by the math parser.
These values can be specified in the <text font="typewriter">role</text> attribute during the initial
document construction or by rewrite rules.  Although the precedence of operators
is loosely described in the following, since the grammar contains various special
case productions, no rigidly ordered precedence is given.</p>
          <description xml:id="Ch5.I5">
            <item xml:id="Ch5.I5.i1">
              <tag>
                <text font="typewriter">ATOM</text>
              </tag>
              <p>a general atomic subexpression.</p>
            </item>
            <item xml:id="Ch5.I5.i2">
              <tag>
                <text font="typewriter">ID</text>
              </tag>
              <p>a variable-like token, whether scalar or otherwise.</p>
            </item>
            <item xml:id="Ch5.I5.i3">
              <tag>
                <text font="typewriter">PUNCT</text>
              </tag>
              <p>punctuation.</p>
            </item>
            <item xml:id="Ch5.I5.i4">
              <tag>
                <text font="typewriter">APPLYOP</text>
              </tag>
              <p>an explicit infix application operator (high precedence).</p>
            </item>
            <item xml:id="Ch5.I5.i5">
              <tag>
                <text font="typewriter">RELOP</text>
              </tag>
              <p>a relational operator, loosely binding.</p>
            </item>
            <item xml:id="Ch5.I5.i6">
              <tag>
                <text font="typewriter">ARROW</text>
              </tag>
              <p>an arrow operator (with little semantic significance).
treated equivalently to <text font="typewriter">RELOP</text>.</p>
            </item>
            <item xml:id="Ch5.I5.i7">
              <tag>
                <text font="typewriter">METARELOP</text>
              </tag>
              <p>an operator used for relations between relations, with lower precedence.</p>
            </item>
            <item xml:id="Ch5.I5.i8">
              <tag>
                <text font="typewriter">ADDOP</text>
              </tag>
              <p>an addition operator, precedence between relational and multiplicative operators.</p>
            </item>
            <item xml:id="Ch5.I5.i9">
              <tag>
                <text font="typewriter">MULOP</text>
              </tag>
              <p>a multiplicative operator, high precedence.</p>
            </item>
            <item xml:id="Ch5.I5.i10">
              <tag>
                <text font="typewriter">SUPOP</text>
              </tag>
              <p>An operator appearing in a superscript, such as a collection of primes.</p>
            </item>
            <item xml:id="Ch5.I5.i11">
              <tag>
                <text font="typewriter">OPEN</text>
              </tag>
              <p>an open delimiter.</p>
            </item>
            <item xml:id="Ch5.I5.i12">
              <tag>
                <text font="typewriter">CLOSE</text>
              </tag>
              <p>a close delimiter.</p>
            </item>
            <item xml:id="Ch5.I5.i13">
              <tag>
                <text font="typewriter">MIDDLE</text>
              </tag>
              <p>a middle operator used to group items between an <text font="typewriter">OPEN</text>, <text font="typewriter">CLOSE</text> pair.
<!-- %**** manual.tex Line 675 **** --></p>
            </item>
            <item xml:id="Ch5.I5.i14">
              <tag>
                <text font="typewriter">OPERATOR</text>
              </tag>
              <p>a general operator; higher precedence than function application.
For example, for an operator <Math mode="inline" tex="A" text="A"><XMath><XMTok role="UNKNOWN" font="italic">A</XMTok></XMath></Math>, and function <Math mode="inline" tex="F" text="F"><XMath><XMTok role="UNKNOWN" font="italic">F</XMTok></XMath></Math>, <Math mode="inline" tex="AFx" text="A * F * x"><XMath><XMApp><XMTok role="MULOP">⁢</XMTok><XMTok role="UNKNOWN" font="italic">A</XMTok><XMTok role="UNKNOWN" font="italic">F</XMTok><XMTok role="UNKNOWN" font="italic">x</XMTok></XMApp></XMath></Math> would be interpretted as <Math mode="inline" tex="(A(F))(x)" text="A * F * x"><XMath><XMApp><XMTok role="MULOP">⁢</XMTok><XMTok role="UNKNOWN" possibleFunction="yes" font="italic">A</XMTok><XMTok role="UNKNOWN" open="(" close=")" font="italic">F</XMTok><XMTok role="UNKNOWN" open="(" close=")" font="italic">x</XMTok></XMApp></XMath></Math>.</p>
            </item>
            <item xml:id="Ch5.I5.i15">
              <tag>
                <text font="typewriter">SUMOP</text>
              </tag>
              <p>a summation/union operator.</p>
            </item>
            <item xml:id="Ch5.I5.i16">
              <tag>
                <text font="typewriter">INTOP</text>
              </tag>
              <p>an integral operator.</p>
            </item>
            <item xml:id="Ch5.I5.i17">
              <tag>
                <text font="typewriter">LIMITOP</text>
              </tag>
              <p>a limiting operator.</p>
            </item>
            <item xml:id="Ch5.I5.i18">
              <tag>
                <text font="typewriter">DIFFOP</text>
              </tag>
              <p>a differential operator.</p>
            </item>
            <item xml:id="Ch5.I5.i19">
              <tag>
                <text font="typewriter">BIGOP</text>
              </tag>
              <p>a general operator, but lower precedence, such as a <Math mode="inline" tex="P" text="P"><XMath><XMTok role="UNKNOWN" font="italic">P</XMTok></XMath></Math> preceding
an integral to denote the principal value.
Note that <text font="typewriter">SUMOP</text>, <text font="typewriter">INTOP</text>, <text font="typewriter">LIMITOP</text>, <text font="typewriter">DIFFOP</text> and <text font="typewriter">BIGOP</text> are treated
equivalently by the grammar, but are distinguished to facilitate (<emph>eventually!</emph>)
analyzing the argument structure (eg bound variables and differentials within an integral).
<text font="bold">Note</text> are <text font="typewriter">SUMOP</text> and <text font="typewriter">LIMITOP</text> significantly different in this sense?</p>
            </item>
            <item xml:id="Ch5.I5.i20">
              <tag>
                <text font="typewriter">VERTBAR</text>
              </tag>
            </item>
            <item xml:id="Ch5.I5.i21">
              <tag>
                <text font="typewriter">FUNCTION</text>
              </tag>
              <p>a function which (may) apply to following arguments with higher
precedence than addition and multiplication, or parenthesized arguments.</p>
            </item>
            <item xml:id="Ch5.I5.i22">
              <tag>
                <text font="typewriter">NUMBER</text>
              </tag>
              <p>a number.</p>
            </item>
            <item xml:id="Ch5.I5.i23">
              <tag>
                <text font="typewriter">POSTSUPERSCRIPT</text>
              </tag>
              <p>the usual superscript, where the script is treated as
an argument, but the base will be determined by parsing. Note that this is not
necessarily assumed to be a power. Very high precedence.</p>
            </item>
            <item xml:id="Ch5.I5.i24">
              <tag>
                <text font="typewriter">POSTSUBSCRIPT</text>
              </tag>
              <p>Similar to <text font="typewriter">POSTSUPERSCRIPT</text> for subscripts.</p>
            </item>
            <item xml:id="Ch5.I5.i25">
              <tag>
                <text font="typewriter">FLOATINGSUPERSCRIPT</text>
              </tag>
              <p>A special case for a superscript on an empty base,
ie. <verbatim font="typewriter">{}^{x}</verbatim>.  It is often used to place a pre-superscript or for
non-math uses (eg. <verbatim font="typewriter">10${}^{th}</verbatim>).</p>
            </item>
            <item xml:id="Ch5.I5.i26">
              <tag>
                <text font="typewriter">FLOATINGSUBSCRIPT</text>
              </tag>
              <p>Similar to <text font="typewriter">POSTSUPERSCRIPT</text> for subscripts.</p>
            </item>
            <item xml:id="Ch5.I5.i27">
              <tag>
                <text font="typewriter">POSTFIX</text>
              </tag>
              <p>for a postfix operator
<!-- %**** manual.tex Line 700 **** --></p>
            </item>
            <item xml:id="Ch5.I5.i28">
              <tag>
                <text font="typewriter">UNKNOWN</text>
              </tag>
              <p>an unknown expression. This is the default for token elements,
and generates a warning if the unknown seems to be used as a function.</p>
            </item>
          </description>
        </para>
        <para xml:id="Ch5.S1.SS2.p3">
          <p>The following roles are not used in the grammar, but are used to capture
the presentation style:</p>
          <description xml:id="Ch5.I6">
            <item xml:id="Ch5.I6.i1">
              <tag>
                <text font="typewriter">STACKED</text>
              </tag>
              <p>corresponds to stacked structures, such as
<verbatim font="typewriter">\atop</verbatim>, and the presentation of binomial coefficients.</p>
            </item>
          </description>
        </para>
        <!-- %Some 
     %%%======================================================================-->
      </subsection>
    </section>
  </chapter>
  <chapter refnum="6" xml:id="Ch6" labels="LABEL:todo">
    <title>ToDo</title>
    <para xml:id="Ch6.p1">
      <p>Lots…!</p>
      <itemize xml:id="Ch6.I1">
        <item xml:id="Ch6.I1.i1">
          <p>Lots of useful LaTeX packages have not been implemented, and those
that are aren't necessarily complete.</p>
        </item>
        <item xml:id="Ch6.I1.i2">
          <p>TeX boxes aren't really complete, and in particular things like <verbatim font="typewriter">\ht0</verbatim>
don't work.</p>
        </item>
        <item xml:id="Ch6.I1.i3">
          <p>Possibly useful to override (pre-override?) a macro defined in the source file;
that is, define it and silently ignore the definition given in the source.</p>
        </item>
        <item xml:id="Ch6.I1.i4">
          <p>…um, …<emph>documentation</emph>!</p>
        </item>
      </itemize>
    </para>
    <!-- %**** manual.tex Line 725 **** 
     %%%======================================================================-->
  </chapter>
  <appendix refnum="A" xml:id="A1" labels="LABEL:commands">
    <title>Command Documentation</title>
    <toctitle>Commands</toctitle>
    <!-- %input the 1st, to avoid quasi-blank page; include the rest -->
    <section xml:id="A1.Sx1" labels="LABEL:latexml">
      <title>
        <text font="typewriter">latexml<indexmark><indexphrase key="latexml">latexml</indexphrase></indexmark></text>
      </title>
      <para xml:id="A1.Sx1.p1">
        <p>Transforms a TeX/LaTeX file into XML.</p>
      </para>
      <subsection xml:id="A1.Sx1.SSx1" labels="LABEL:latexml_Synopsis">
        <title>Synopsis<indexmark><indexphrase key="latexml">latexml</indexphrase><indexphrase key="synopsis">Synopsis</indexphrase></indexmark></title>
        <para xml:id="A1.Sx1.SSx1.p1">
          <p>latexml [options] texfile</p>
        </para>
        <para xml:id="A1.Sx1.SSx1.p2">
          <verbatim font="typewriter">
 Options:
 --destination=file specifies destination file (default stdout).
 --output=file      [obsolete synonym for --destination]
 --preload=module   requests loading of an optional module;
                    can be repeated
 --includestyles    allows latexml to load raw *.sty file;
                    by default it avoids this.
 --path=dir         adds dir to the paths searched for files,
                    modules, etc;
 --documentid=id    assign an id to the document root.
 --quiet            suppress messages (can repeat)
 --verbose          more informative output (can repeat)
 --strict           makes latexml less forgiving of errors
 --xml              requests xml output (default).
 --tex              requests TeX output after expansion.
 --box              requests box output after expansion
                    and digestion.
 --noparse          suppresses parsing math
 --nocomments       omit comments from the output
 --inputencoding=enc specify the input encoding.
 --VERSION          show version number.
 --debug=package    enables debugging output for the named
                    package
 --help             shows this help message.
</verbatim>
        </para>
        <para xml:id="A1.Sx1.SSx1.p3">
          <p>If texfile is '-', latexml reads the TeX source from standard input.</p>
        </para>
      </subsection>
      <subsection xml:id="A1.Sx1.SSx2" labels="LABEL:latexml_Options_Arguments">
        <title>Options &amp; Arguments<indexmark><indexphrase key="latexml">latexml</indexphrase><indexphrase key="optionsarguments">Options &amp; Arguments</indexphrase></indexmark></title>
        <para xml:id="A1.Sx1.SSx2.p1">
          <description xml:id="A1.I1">
            <item xml:id="A1.I1.i1">
              <tag><text font="typewriter">--destination</text>=<text font="italic">file</text></tag>
              <p><text/></p>
              <p>Specifies the destination file; by default the XML is written to stdout.</p>
            </item>
            <item xml:id="A1.I1.i2">
              <tag><text font="typewriter">--preload</text>=<text font="italic">module</text></tag>
              <p><text/>
<!-- %**** generated/latexml.tex Line 50 **** --></p>
              <p>Requests the loading of an optional module or package.  This may be useful if the TeX code
does not specificly require the module (eg. through input or usepackage).
For example, use <text font="typewriter">--preload=LaTeX.pool</text> to force LaTeX mode.</p>
            </item>
            <item xml:id="A1.I1.i3">
              <tag>
                <text font="typewriter">--includestyles</text>
              </tag>
              <p><text/></p>
              <p>This optional allows processing of style files (files with extensions <text font="typewriter">sty</text>,
<text font="typewriter">cls</text>, <text font="typewriter">clo</text>, <text font="typewriter">cnf</text>).  By default, these files are ignored  unless a latexml
implementation of them is found (with an extension of <text font="typewriter">ltxml</text>).</p>
              <p>These style files generally fall into two classes:  Those
that merely affect document style are ignorable in the XML.
Others define new markup and document structure, often using
deeper LaTeX macros to achieve their ends.  Although the omission
will lead to other errors (missing macro definitions), it is
unlikely that processing the TeX code in the style file will
lead to a correct document.</p>
            </item>
            <item xml:id="A1.I1.i4">
              <tag><text font="typewriter">--path</text>=<text font="italic">dir</text></tag>
              <p><text/></p>
              <!-- %**** generated/latexml.tex Line 75 **** -->
              <p>Add <text font="italic">dir</text> to the search paths used when searching for files, modules, style files, etc;
somewhat like TEXINPUTS.  This option can be repeated.</p>
            </item>
            <item xml:id="A1.I1.i5">
              <tag><text font="typewriter">--documentid</text>=<text font="italic">id</text></tag>
              <p><text/></p>
              <p>Assigns an ID to the root element of the XML document.  This ID is generally
inherited as the prefix of ID's on all other elements within the document.
This is useful when constructing a site of multiple documents so that
all nodes have unique IDs.</p>
            </item>
            <item xml:id="A1.I1.i6">
              <tag>
                <text font="typewriter">--quiet</text>
              </tag>
              <p><text/></p>
              <p>Reduces the verbosity of output during processing, used twice is pretty silent.</p>
            </item>
            <item xml:id="A1.I1.i7">
              <tag>
                <text font="typewriter">--verbose</text>
              </tag>
              <p><text/></p>
              <p>Increases the verbosity of output during processing, used twice is pretty chatty.
Can be useful for getting more details when errors occur.</p>
            </item>
            <item xml:id="A1.I1.i8">
              <tag>
                <text font="typewriter">--strict</text>
              </tag>
              <p><text/></p>
              <!-- %**** generated/latexml.tex Line 100 **** -->
              <p>Specifies a strict processing mode. By default, undefined control sequences and
invalid document constructs (that violate the DTD) give warning messages, but attempt
to continue processing.  Using –strict makes them generate fatal errors.</p>
            </item>
            <item xml:id="A1.I1.i9">
              <tag>
                <text font="typewriter">--xml</text>
              </tag>
              <p><text/></p>
              <p>Requests XML output; this is the default.</p>
            </item>
            <item xml:id="A1.I1.i10">
              <tag>
                <text font="typewriter">--tex</text>
              </tag>
              <p><text/></p>
              <p>Requests TeX output for debugging purposes;  processing is only carried out through expansion and digestion.
This may not be quite valid TeX, since Unicode may be introduced.</p>
            </item>
            <item xml:id="A1.I1.i11">
              <tag>
                <text font="typewriter">--box</text>
              </tag>
              <p><text/></p>
              <p>Requests Box output for debugging purposes;  processing is carried out through expansion and digestions,
and the result is printed.</p>
            </item>
            <item xml:id="A1.I1.i12">
              <tag>
                <text font="typewriter">--nocomments</text>
              </tag>
              <p><text/></p>
              <p>Normally latexml preserves comments from the source file, and adds a comment every 25 lines as
<!-- %**** generated/latexml.tex Line 125 **** -->an aid in tracking the source.  The option –nocomments discards such comments.</p>
            </item>
            <item xml:id="A1.I1.i13">
              <tag>
                <text font="typewriter">--inputencoding=</text>
                <text font="italic">encoding</text>
              </tag>
              <p><text/></p>
              <p>Specify the input encoding, eg. <text font="typewriter">--inputencoding=iso-8859-1</text>.
The encoding must be one known to Perl's Encode package.
Note that this only enables the translation of the input bytes to
UTF-8 used internally by LaTeXML, but does not affect catcodes.
In such cases, you should be using the inputenc package.
Note also that this does not affect the output encoding, which is
always UTF-8.</p>
            </item>
            <item xml:id="A1.I1.i14">
              <tag>
                <text font="typewriter">--VERSION</text>
              </tag>
              <p><text/></p>
              <p>Shows the version number of the LaTeXML package..</p>
            </item>
            <item xml:id="A1.I1.i15">
              <tag><text font="typewriter">--debug</text>=<text font="italic">package</text></tag>
              <p><text/></p>
              <p>Enables debugging output for the named package. The package is given without the leading LaTeXML::.</p>
            </item>
            <item xml:id="A1.I1.i16">
              <tag>
                <text font="typewriter">--help</text>
              </tag>
              <p><text/>
<!-- %**** generated/latexml.tex Line 150 **** --></p>
              <p>Shows this help message.</p>
            </item>
          </description>
        </para>
      </subsection>
      <subsection xml:id="A1.Sx1.SSx3" labels="LABEL:latexml_See_also">
        <title>See also<indexmark><indexphrase key="latexml">latexml</indexphrase><indexphrase key="seealso">See also</indexphrase></indexmark></title>
        <para xml:id="A1.Sx1.SSx3.p1">
          <p><ref href="http://search.cpan.org/search?query=latexmlpost&amp;mode=module">latexmlpost</ref>, <ref labelref="LABEL:LaTeXML">LaTeXML</ref></p>
        </para>
      </subsection>
    </section>
    <section xml:id="A1.Sx2" labels="LABEL:latexmlpost">
      <title>
        <text font="typewriter">latexmlpost<indexmark><indexphrase key="latexmlpost">latexmlpost</indexphrase></indexmark></text>
      </title>
      <para xml:id="A1.Sx2.p1">
        <p>Postprocesses an xml file generated by <text font="typewriter">latexml</text>
to perform common tasks, such as convert math to images and processing
graphics inclusions for the web.</p>
      </para>
      <subsection xml:id="A1.Sx2.SSx1" labels="LABEL:latexmlpost_Synopsis">
        <title>Synopsis<indexmark><indexphrase key="latexmlpost">latexmlpost</indexphrase><indexphrase key="synopsis">Synopsis</indexphrase></indexmark></title>
        <para xml:id="A1.Sx2.SSx1.p1">
          <p>latexmlpost [options] xmlfile</p>
        </para>
        <para xml:id="A1.Sx2.SSx1.p2">
          <verbatim font="typewriter">
 Options:
 --destination=file      specifies output file (and directory).
 --source=sourcedir      specifies directory of source TeX file.
 --format=html|xhtml|xml requests the output format.
 --stylesheet=xslfile    requests the XSL transform using the
                         given xslfile as stylesheet.
 --css=cssfile           adds a css stylesheet to html/xhtml
                         (can be repeated)
 --nodefaultcss          disables use of default css stylesheet
 --split                 requests splitting each document
 --nosplit               disables the above (default)
 --splitat               specifies level to split the document
 --splitpath=xpath       specifies xpath expression for splitting
                         (default is section-like, if splitting)
 --splitnaming=(id|idrelative|label|labelrelative) specifies how
                         to name split files (def. idrelative).
 --index                 requests filling in the index (default)
 --noindex               disables the above
 --permutedindex         permutes index phrases in the index
 --nopermutedindex       disables the above (default)
 --splitindex            Splits the index into pages per initial.
 --nosplitindex          disables the above (default)
 --bibliography=file     specifies a bibliography file
 --splitbibliography     splits the bibliography into pages per
                         initial.
 --nosplitbibliography   disables the above (default)
 --scan                  scans documents to extract ids, labels,
                         section titles, etc. (default)
 --noscan                disables the above
 --crossref              fills in crossreferences (default)
 --nocrossref            disables the above
 --urlstyle=(server|negotiated|file) format to use for urls
                         (default server).
 --prescan               carries out only the split (if enabled)
                         and scan, storing cross-referencing data
                         in dbfile
                         (default is complete processing)
 --dbfile=dbfile         specifies file to store crossreferences
 --mathimages            converts math to images
                         (default for html format)
 --nomathimages          disables the above
 --mathimagemagnification=mag specifies magnification factor
 --presentationmathml    converts math to Presentation MathML
                         (default for xhtml format)
 --pmml                  alias for --presentationmathml
 --nopresentationmathml  disables the above
 --linelength=n          formats presentation mathml to a
                         linelength max of n characters
 --contentmathml         converts math to Content MathML
 --nocontentmathml       disables the above (default)
 --cmml                  alias for --contentmathml
 --openmath              converts math to OpenMath
 --noopenmath            disables the above (default)
 --om                    alias for --openmath
 --parallelmath          requests parallel math markup for MathML
                         (default when multiple math formats)
 --noparallelmath        disables the above
 --graphicimages        converts graphics to images (default)
 --nographicimages      disables the above
 --pictureimages         converts picture environments to
                         images (default)
 --nopictureimages       disables the above
 --svg                   converts picture environments to SVG
 --nosvg                 disables the above (default)
 --keepXMath             preserves the intermediate XMath
                         representation (default is to remove)
 --verbose               shows progress during processing.
 --VERSION               show version number.
 --help                  shows help message.
</verbatim>
        </para>
        <para xml:id="A1.Sx2.SSx1.p3">
          <p>If xmlfile is '-', latexmlpost reads the XML from standard input.</p>
        </para>
      </subsection>
      <subsection xml:id="A1.Sx2.SSx2" labels="LABEL:latexmlpost_Options_Arguments">
        <title>Options &amp; Arguments<indexmark><indexphrase key="latexmlpost">latexmlpost</indexphrase><indexphrase key="optionsarguments">Options &amp; Arguments</indexphrase></indexmark></title>
        <subsubsection xml:id="A1.Sx2.SSx2.SSSx1" labels="LABEL:latexmlpost_General_Options">
          <title>General Options<indexmark><indexphrase key="latexmlpost">latexmlpost</indexphrase><indexphrase key="generaloptions">General Options</indexphrase></indexmark></title>
          <para xml:id="A1.Sx2.SSx2.SSSx1.p1">
            <description xml:id="A1.I2">
              <item xml:id="A1.I2.i1">
                <tag>
                  <text font="typewriter">--verbose</text>
                </tag>
                <p><text/></p>
                <p>Requests informative output as processing proceeds. Can be repeated
to increase the amount of information.</p>
              </item>
              <item xml:id="A1.I2.i2">
                <tag>
                  <text font="typewriter">--VERSION</text>
                </tag>
                <p><text/></p>
                <!-- %**** generated/latexmlpost.tex Line 100 **** -->
                <p>Shows the version number of the LaTeXML package..</p>
              </item>
              <item xml:id="A1.I2.i3">
                <tag>
                  <text font="typewriter">--help</text>
                </tag>
                <p><text/></p>
                <p>Shows this help message.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A1.Sx2.SSx2.SSSx2" labels="LABEL:latexmlpost_Format_Options">
          <title>Format Options<indexmark><indexphrase key="latexmlpost">latexmlpost</indexphrase><indexphrase key="formatoptions">Format Options</indexphrase></indexmark></title>
          <para xml:id="A1.Sx2.SSx2.SSSx2.p1">
            <description xml:id="A1.I3">
              <item xml:id="A1.I3.i1">
                <tag><text font="typewriter">--format</text>=<text font="typewriter">(html|xhtml|xml)</text></tag>
                <p><text/></p>
                <p>Specifies the output format for post processing.
html format converts the material to html and the mathematics to png images.
xhtml format converts to xhtml and uses presentation MathML (after attempting
to parse the mathematics) for representing the math.  In both cases, any
graphics will be converted to web-friendly formats and/or copied to the
destination directory.  By default, the output is left in LaTeXML's xml,
but the math is parsed and converted to presentation MathML.
For html and xhtml, a default stylesheet is provided, but see
the <text font="typewriter">--stylesheet</text> option.</p>
              </item>
              <item xml:id="A1.I3.i2">
                <tag><text font="typewriter">--source</text>=<text font="italic">source</text></tag>
                <p><text/>
<!-- %**** generated/latexmlpost.tex Line 125 **** --></p>
                <p>Specifies the directory where the original latex source is located.
Unless latexmlpost is run from that directory, or it can be determined
from the xml filename, it may be necessary to specify this option in
order to find graphics and style files.</p>
              </item>
              <item xml:id="A1.I3.i3">
                <tag>
                  <text font="typewriter">--destination=</text>
                  <text font="italic">destination</text>
                </tag>
                <p><text/></p>
                <p>Specifies the destination file and directory.  The directory is needed for
mathimages and graphics processing.</p>
              </item>
              <item xml:id="A1.I3.i4">
                <tag><text font="typewriter">--stylesheet</text>=<text font="italic">xslfile</text></tag>
                <p><text/></p>
                <p>Requests the XSL transformation of the document using the given xslfile as stylesheet.
If the stylesheet is omitted, a `standard' one appropriate for the
format (html or xhtml) will be used.</p>
              </item>
              <item xml:id="A1.I3.i5">
                <tag><text font="typewriter">--css</text>=<text font="italic">cssfile</text></tag>
                <p><text/></p>
                <p>Adds <text font="italic">cssfile</text> as a css stylesheet to be used in the transformed html/xhtml.
Multiple stylesheets can be used; they are included in the html in the
order given, following the default <text font="typewriter">core.css</text>
<!-- %**** generated/latexmlpost.tex Line 150 **** -->(but see <text font="typewriter">--nodefaultcss</text>). Some stylesheets included in the distribution are
–css=navbar-left   Puts a navigation bar on the left
(default omits navbar)
–css=navbar-right  Puts a navigation bar on the left
–css=theme-blue    A blue coloring theme for headings
–css=amsart        A style suitable for journal articles</p>
              </item>
              <item xml:id="A1.I3.i6">
                <tag>
                  <text font="typewriter">--nodefaultcss</text>
                </tag>
                <p><text/></p>
                <p>Disables the inclusion of the default <text font="typewriter">core.css</text> stylesheet.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A1.Sx2.SSx2.SSSx3" labels="LABEL:latexmlpost_Site_Crossreferencing_Options">
          <title>Site &amp; Crossreferencing Options<indexmark><indexphrase key="latexmlpost">latexmlpost</indexphrase><indexphrase key="sitecrossreferencingoptions">Site &amp; Crossreferencing Options</indexphrase></indexmark></title>
          <para xml:id="A1.Sx2.SSx2.SSSx3.p1">
            <description xml:id="A1.I4">
              <item xml:id="A1.I4.i1">
                <tag><text font="typewriter">--split</text>, <text font="typewriter">--nosplit</text></tag>
                <p><text/></p>
                <p>Enables or disables (default) the splitting of documents into multiple `pages'.
If enabled, the the document will be split into sections, bibliography,
index and appendices (if any) by default, unless <text font="typewriter">--splitpath</text> is specified.</p>
              </item>
              <item xml:id="A1.I4.i2">
                <tag>
                  <text font="typewriter">--splitat=</text>
                  <text font="italic">unit</text>
                </tag>
                <p><text/></p>
                <!-- %**** generated/latexmlpost.tex Line 175 **** -->
                <p>Specifies what level of the document to split at. Should be one
of <text font="typewriter">chapter</text>, <text font="typewriter">section</text> (the default), <text font="typewriter">subsection</text> or <text font="typewriter">subsubsection</text>.
For more control, see <text font="typewriter">--splitpath</text>.</p>
              </item>
              <item xml:id="A1.I4.i3">
                <tag>
                  <text font="typewriter">--splitpath=</text>
                  <text font="italic">xpath</text>
                </tag>
                <p><text/></p>
                <p>Specifies an XPath expression to select nodes that will generate separate
pages. The default splitpath is
//ltx:section |//ltx:bibliography |//ltx:appendix |//ltx:index</p>
                <p>Specifying
–splitpath="//ltx:section |//ltx:subsection |//ltx:bibliography
|//ltx:appendix |//ltx:index"</p>
                <p>would split the document at subsections as well as sections.</p>
              </item>
              <item xml:id="A1.I4.i4">
                <tag><text font="typewriter">--splitnaming</text>=<text font="typewriter">(id|idrelative|label|labelrelative)</text></tag>
                <p><text/></p>
                <p>Specifies how to name the files for subdocuments created by splitting.
<!-- %**** generated/latexmlpost.tex Line 200 **** -->The values <text font="typewriter">id</text> and <text font="typewriter">label</text> simply use the id or label of the subdocument's
root node for it's filename.  <text font="typewriter">idrelative</text> and <text font="typewriter">labelrelative</text> use
the portion of the id or label that follows the parent document's
id or label. Furthermore, to impose structure and uniqueness,
if a split document has children that are also split, that document
(and it's children) will be in a separate subdirectory with the
name index.</p>
              </item>
              <item xml:id="A1.I4.i5">
                <tag><text font="typewriter">--scan</text>, <text font="typewriter">--noscan</text></tag>
                <p><text/></p>
                <p>Enables (default) or disables the scanning of documents for ids, labels,
references, indexmarks, etc, for use in filling in refs, cites, index and
so on.  It may be useful to disable when generating documents not based
on the LaTeXML doctype.</p>
              </item>
              <item xml:id="A1.I4.i6">
                <tag><text font="typewriter">--crossref</text>, <text font="typewriter">--nocrossref</text></tag>
                <p><text/></p>
                <p>Enables (default) or disables the filling in of references, hrefs, etc
based on a previous scan (either from <text font="typewriter">--scan</text>, or <text font="typewriter">--dbfile</text>)
It may be useful to disable when generating documents not based
on the LaTeXML doctype.</p>
                <!-- %**** generated/latexmlpost.tex Line 225 **** -->
              </item>
              <item xml:id="A1.I4.i7">
                <tag><text font="typewriter">--urlstyle</text>=<text font="typewriter">(server|negotiated|file)</text></tag>
                <p><text/></p>
                <p>This option determines the way that URLs within the documents
are formatted, depending on the way they are intended to be served.
The default, <text font="typewriter">server</text>, eliminates unneccessary
trailing <text font="typewriter">index.html</text>.  With <text font="typewriter">negotiated</text>, the trailing
file extension (typically <text font="typewriter">html</text> or <text font="typewriter">xhtml</text>) are eliminated.
The scheme <text font="typewriter">file</text> preserves complete (but relative) urls
so that the site can be browsed as files without any server.</p>
              </item>
              <item xml:id="A1.I4.i8">
                <tag><text font="typewriter">--index</text>, <text font="typewriter">--noindex</text></tag>
                <p><text/></p>
                <p>Enables (default) or disables the generation of an index from indexmarks
embedded within the document.  Enabling this has no effect unless
there is an index element in the document (generated by <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math>printindex).</p>
              </item>
              <item xml:id="A1.I4.i9">
                <tag><text font="typewriter">--splitindex</text>, <text font="typewriter">--nosplitindex</text></tag>
                <p><text/></p>
                <p>Enables or disables (default) the splitting of generated indexes
into separate pages per initial letter.</p>
              </item>
              <item xml:id="A1.I4.i10">
                <tag>
                  <text font="typewriter">--bibliography=</text>
                  <text font="italic">pathname</text>
                </tag>
                <p><text/>
<!-- %**** generated/latexmlpost.tex Line 250 **** --></p>
                <p>Specifies a bibliography file generated from a BibTeX file
and used to fill in a bibliography element.
Hand-written bibliographies placed in a <text font="typewriter">thebibliography</text> environment
do not need this processing.  Enabling this has no effect unless
there is an bibliography element in the document (generated by <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math>bibliography).</p>
              </item>
              <item xml:id="A1.I4.i11">
                <tag><text font="typewriter">--splitbibliography</text>, <text font="typewriter">--nosplitbibliography</text></tag>
                <p><text/></p>
                <p>Enables or disables (default) the splitting of generated bibliographies
into separate pages per initial letter.</p>
              </item>
              <item xml:id="A1.I4.i12">
                <tag>
                  <text font="typewriter">--prescan</text>
                </tag>
                <p><text/></p>
                <p>By default <text font="typewriter">latexmlpost</text> processes a single document into one
(or more; see <text font="typewriter">--split</text>) destination files in a single pass.
When generating a complicated site consisting of several documents
it may be advantageous to first scan through the documents
to extract and store (in <text font="typewriter">dbfile</text>) cross-referencing data
(such as ids, titles, urls, and so on).
A later pass then has complete information allowing all documents
to reference each other, and also constructs an index and bibliography
that reflects the entire document set.  The same effect (though less efficient)
<!-- %**** generated/latexmlpost.tex Line 275 **** -->can be achieved by running <text font="typewriter">latexmlpost</text> twice, provided a <text font="typewriter">dbfile</text>
is specified.</p>
              </item>
              <item xml:id="A1.I4.i13">
                <tag>
                  <text font="typewriter">--dbfile</text>
                  <text font="italic">=file</text>
                </tag>
                <p><text/></p>
                <p>Specifies a filename to use for the crossreferencing data when
using two-pass processing.  This file may reside in the intermediate
destination directory.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A1.Sx2.SSx2.SSSx4" labels="LABEL:latexmlpost_Math_Options">
          <title>Math Options<indexmark><indexphrase key="latexmlpost">latexmlpost</indexphrase><indexphrase key="mathoptions">Math Options</indexphrase></indexmark></title>
          <para xml:id="A1.Sx2.SSx2.SSSx4.p1">
            <p>These options specify how math should be converted into other formats.
Multiple formats can be requested; how they will be combined
depends on the format and other options.</p>
          </para>
          <para xml:id="A1.Sx2.SSx2.SSSx4.p2">
            <description xml:id="A1.I5">
              <item xml:id="A1.I5.i1">
                <tag><text font="typewriter">--mathimages</text>, <text font="typewriter">--nomathimages</text></tag>
                <p><text/></p>
                <p>Requests or disables the conversion of math to images.
Conversion is the default for html format.</p>
                <!-- %**** generated/latexmlpost.tex Line 300 **** -->
              </item>
              <item xml:id="A1.I5.i2">
                <tag>
                  <text font="typewriter">--mathimagemagnification=</text>
                  <text font="italic">factor</text>
                </tag>
                <p><text/></p>
                <p>Specifies the magnification used for math images, if they are made.
Default is 1.75.</p>
              </item>
              <item xml:id="A1.I5.i3">
                <tag><text font="typewriter">--presentationmathml</text>, <text font="typewriter">--nopresentationmathml</text></tag>
                <p><text/></p>
                <p>Requests or disables conversion of math to Presentation MathML.
Conversion is the default for xhtml format.</p>
              </item>
              <item xml:id="A1.I5.i4">
                <tag>
                  <text font="typewriter">--linelength</text>
                  <text font="italic">=number</text>
                </tag>
                <p><text/></p>
                <p>(Experimental) Line-breaks the generated Presentation
MathML so that it is no longer than <text font="italic">number</text> `characters'.</p>
              </item>
              <item xml:id="A1.I5.i5">
                <tag><text font="typewriter">--contentmathml</text>, <text font="typewriter">--nocontentmathml</text></tag>
                <p><text/></p>
                <p>Requests or disables conversion of math to Content MathML.
Conversion is disabled by default.
<text font="bold">Note</text> that this conversion is only partially implemented.</p>
                <!-- %**** generated/latexmlpost.tex Line 325 **** -->
              </item>
              <item xml:id="A1.I5.i6">
                <tag>
                  <text font="typewriter">--openmath</text>
                </tag>
                <p><text/></p>
                <p>Requests or disables conversion of math to OpenMath.
Conversion is disabled by default.
<text font="bold">Note</text> that this conversion is only partially implemented.</p>
              </item>
              <item xml:id="A1.I5.i7">
                <tag><text font="typewriter">--parallelmath</text>, <text font="typewriter">--noparallelmath</text></tag>
                <p><text/></p>
                <p>Requests or disables parallel math markup.
Parallel markup is the default for xhtml formats when multiple math
formats are requested.</p>
                <p>This method uses the MathML <text font="typewriter">semantics</text> element with additional formats
appearing as <text font="typewriter">annotation</text>'s.
The first math format requested must be either Presentation or Content MathML;
additional formats may be MathML or OpenMath.</p>
                <p>If this option is disabled and multiple formats are requested, the
representations are simply stored as separate children of the <text font="typewriter">Math</text> element.
<!-- %**** generated/latexmlpost.tex Line 350 **** --></p>
              </item>
              <item xml:id="A1.I5.i8">
                <tag>
                  <text font="typewriter">--keepXMath</text>
                </tag>
                <p><text/></p>
                <p>By default, when any of the MathML or OpenMath conversions
are used, the intermediate math representation will be removed;
this option preserves it.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A1.Sx2.SSx2.SSSx5" labels="LABEL:latexmlpost_Graphics_Options">
          <title>Graphics Options<indexmark><indexphrase key="latexmlpost">latexmlpost</indexphrase><indexphrase key="graphicsoptions">Graphics Options</indexphrase></indexmark></title>
          <para xml:id="A1.Sx2.SSx2.SSSx5.p1">
            <description xml:id="A1.I6">
              <item xml:id="A1.I6.i1">
                <tag><text font="typewriter">--graphicimages</text>, <text font="typewriter">--nographicimages</text></tag>
                <p><text/></p>
                <p>Enables (default) or disables the conversion of graphics
to web-appropriate format (png).</p>
              </item>
              <item xml:id="A1.I6.i2">
                <tag><text font="typewriter">--pictureimages</text>, <text font="typewriter">--nopictureimages</text></tag>
                <p><text/></p>
                <p>Enables (default) or disables the conversion of picture environments
and pstricks material into images.</p>
              </item>
              <item xml:id="A1.I6.i3">
                <tag><text font="typewriter">--svg</text>, <text font="typewriter">--nosvg</text></tag>
                <p><text/>
<!-- %**** generated/latexmlpost.tex Line 375 **** --></p>
                <p>Enables or disables (default) the conversion of picture environments
and pstricks material to SVG.</p>
              </item>
            </description>
          </para>
        </subsubsection>
      </subsection>
      <subsection xml:id="A1.Sx2.SSx3" labels="LABEL:latexmlpost_See_also">
        <title>See also<indexmark><indexphrase key="latexmlpost">latexmlpost</indexphrase><indexphrase key="seealso">See also</indexphrase></indexmark></title>
        <para xml:id="A1.Sx2.SSx3.p1">
          <p><ref href="http://search.cpan.org/search?query=latexml&amp;mode=module">latexml</ref>, <ref labelref="LABEL:LaTeXML">LaTeXML</ref></p>
        </para>
        <!-- %%%====================================================================== -->
      </subsection>
    </section>
  </appendix>
  <appendix refnum="B" xml:id="A2" labels="LABEL:coremodules">
    <title>Core Module Documentation</title>
    <toctitle>Modules</toctitle>
    <section xml:id="A2.Sx1" labels="LABEL:LaTeXML">
      <title>
        <text font="typewriter">LaTeXML<indexmark><indexphrase key="latexml">LaTeXML</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx1.p1">
        <p>Transforms TeX into XML.</p>
      </para>
      <subsection xml:id="A2.Sx1.SSx1" labels="LABEL:LaTeXML_Synopsis">
        <title>Synopsis<indexmark><indexphrase key="latexml">LaTeXML</indexphrase><indexphrase key="synopsis">Synopsis</indexphrase></indexmark></title>
        <para xml:id="A2.Sx1.SSx1.p1">
          <verbatim font="typewriter">
    use LaTeXML;
    my $latexml = LaTeXML-&gt;new();
    $latexml-&gt;convertAndWrite("adocument");
</verbatim>
        </para>
        <para xml:id="A2.Sx1.SSx1.p2">
          <p>But also see the convenient command line script <ref href="http://search.cpan.org/search?query=latexml&amp;mode=module">latexml</ref> which suffices for most purposes.</p>
        </para>
      </subsection>
      <subsection xml:id="A2.Sx1.SSx2" labels="LABEL:LaTeXML_Description">
        <title>Description<indexmark><indexphrase key="latexml">LaTeXML</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <subsubsection xml:id="A2.Sx1.SSx2.SSSx1" labels="LABEL:LaTeXML_Methods">
          <title>Methods<indexmark><indexphrase key="latexml">LaTeXML</indexphrase><indexphrase key="methods">Methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx1.SSx2.SSSx1.p1">
            <description xml:id="A2.I1">
              <item xml:id="A2.I1.i1">
                <tag>
                  <text font="typewriter">my $latexml = LaTeXML-&gt;new(%options);</text>
                </tag>
                <p><text/></p>
                <p>Creates a new LaTeXML object for transforming TeX files into XML.</p>
                <verbatim font="typewriter">
 verbosity  : Controls verbosity; higher is more verbose,
              smaller is quieter. 0 is the default.
 strict     : If true, undefined control sequences and
              invalid document constructs give fatal
              errors, instead of warnings.
 includeComments : If false, comments will be excluded
              from the result document.
 preload    : an array of modules to preload
 searchpath : an array of paths to be searched for Packages
              and style files.
</verbatim>
                <p>(these generally set config variables in the <ref labelref="LABEL:LaTeXML::State">LaTeXML::State</ref> object)</p>
              </item>
              <item xml:id="A2.I1.i2">
                <tag>$<text font="typewriter">latexml-&gt;convertAndWriteFile($file);</text></tag>
                <p><text/></p>
                <p>Reads the TeX file $<text font="typewriter">file</text>.tex, digests and converts it to XML, and saves it in $<text font="typewriter">file</text>.xml.</p>
              </item>
              <item xml:id="A2.I1.i3">
                <tag>$<text font="typewriter">doc = $latexml-&gt;convertFile($file);</text></tag>
                <p><text/></p>
                <p>Reads the TeX file $<text font="typewriter">file</text>, digests and converts it to XML and returns the
resulting <ref href="http://search.cpan.org/search?query=XML%3A%3ALibXML%3A%3ADocument&amp;mode=module">XML::LibXML::Document</ref>.
<!-- %**** generated/LaTeXML.tex Line 50 **** --></p>
              </item>
              <item xml:id="A2.I1.i4">
                <tag>$<text font="typewriter">doc = $latexml-&gt;convertString($string);</text></tag>
                <p><text/></p>
                <p>Digests $<text font="typewriter">string</text>, presumably containing TeX markup, converts it to XML
and returns the <ref href="http://search.cpan.org/search?query=XML%3A%3ALibXML%3A%3ADocument&amp;mode=module">XML::LibXML::Document</ref>.</p>
              </item>
              <item xml:id="A2.I1.i5">
                <tag>$<text font="typewriter">latexml-&gt;writeDOM($doc,$name);</text></tag>
                <p><text/></p>
                <p>Writes the XML document to $name.xml.</p>
              </item>
              <item xml:id="A2.I1.i6">
                <tag>$<text font="typewriter">string = $latexml-&gt;DOMtoString($doc);</text></tag>
                <p><text/></p>
                <p>Converts the XML document to a string (of utf8 bytes).</p>
              </item>
              <item xml:id="A2.I1.i7">
                <tag>$<text font="typewriter">box = $latexml-&gt;digestFile($file);</text></tag>
                <p><text/></p>
                <p>Reads the TeX file $<text font="typewriter">file</text>, and digests it returning the <ref labelref="LABEL:LaTeXML::Box">LaTeXML::Box</ref> representation.</p>
              </item>
              <item xml:id="A2.I1.i8">
                <tag>$<text font="typewriter">box = $latexml-&gt;digestString($string);</text></tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML.tex Line 75 **** -->
                <p>Digests $<text font="typewriter">string</text>, which presumably contains TeX markup,
returning the <ref labelref="LABEL:LaTeXML::Box">LaTeXML::Box</ref> representation.</p>
              </item>
              <item xml:id="A2.I1.i9">
                <tag>$<text font="typewriter">doc = $latexml-&gt;convertDocument($digested);</text></tag>
                <p><text/></p>
                <p>Converts $<text font="typewriter">digested</text> (the <ref labelref="LABEL:LaTeXML::Box">LaTeXML::Box</ref> reprentation) into XML,
returning the <ref href="http://search.cpan.org/search?query=XML%3A%3ALibXML%3A%3ADocument&amp;mode=module">XML::LibXML::Document</ref>.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx1.SSx2.SSSx2" labels="LABEL:LaTeXML_Customization">
          <title>Customization<indexmark><indexphrase key="latexml">LaTeXML</indexphrase><indexphrase key="customization">Customization</indexphrase></indexmark></title>
          <para xml:id="A2.Sx1.SSx2.SSSx2.p1">
            <p>In the simplest case, LaTeXML will understand your source file and convert it
automatically.  With more complicated (realistic) documents, you will likely
need to make document specific declarations for it to understand local macros,
your mathematical notations, and so forth.  Before processing a file
<text font="italic">doc.tex</text>, LaTeXML reads the file <text font="italic">doc.latexml</text>, if present.
Likewise, the LaTeXML implementation of a TeX style file, say
<text font="italic">style.sty</text> is provided by a file <text font="italic">style.ltxml</text>.</p>
          </para>
          <para xml:id="A2.Sx1.SSx2.SSSx2.p2">
            <p>See <ref labelref="LABEL:LaTeXML::Package">LaTeXML::Package</ref> for documentation of these customization and
implementation files.
<!-- %**** generated/LaTeXML.tex Line 100 **** --></p>
          </para>
        </subsubsection>
      </subsection>
      <subsection xml:id="A2.Sx1.SSx3" labels="LABEL:LaTeXML_See_also">
        <title>See also<indexmark><indexphrase key="latexml">LaTeXML</indexphrase><indexphrase key="seealso">See also</indexphrase></indexmark></title>
        <para xml:id="A2.Sx1.SSx3.p1">
          <p>See <ref href="http://search.cpan.org/search?query=latexml&amp;mode=module">latexml</ref> for a simple command line script.</p>
        </para>
        <para xml:id="A2.Sx1.SSx3.p2">
          <p>See <ref labelref="LABEL:LaTeXML::Package">LaTeXML::Package</ref> for documentation of these customization and
implementation files.</p>
        </para>
        <para xml:id="A2.Sx1.SSx3.p3">
          <p>For cases when the high-level declarations described in <ref labelref="LABEL:LaTeXML::Package">LaTeXML::Package</ref>
are not enough, or for understanding more of LaTeXML's internals, see</p>
        </para>
        <para xml:id="A2.Sx1.SSx3.p4">
          <description xml:id="A2.I2">
            <item xml:id="A2.I2.i1">
              <tag>
                <ref labelref="LABEL:LaTeXML::State">LaTeXML::State</ref>
              </tag>
              <p><text/></p>
              <p>maintains the current state of processing, bindings or
variables, definitions, etc.</p>
            </item>
            <item xml:id="A2.I2.i2">
              <tag><ref labelref="LABEL:LaTeXML::Token">LaTeXML::Token</ref>, <ref labelref="LABEL:LaTeXML::Mouth">LaTeXML::Mouth</ref></tag>
              <p><text font="bold">and <ref labelref="LABEL:LaTeXML::Gullet">LaTeXML::Gullet</ref></text>
<!-- %**** generated/LaTeXML.tex Line 125 **** --></p>
              <p>deal with tokens, tokenization of strings and files, and
basic TeX sequences such as arguments, dimensions and so forth.</p>
            </item>
            <item xml:id="A2.I2.i3">
              <tag><ref labelref="LABEL:LaTeXML::Box">LaTeXML::Box</ref> and <ref labelref="LABEL:LaTeXML::Stomach">LaTeXML::Stomach</ref></tag>
              <p><text/></p>
              <p>deal with digestion of tokens into boxes.</p>
            </item>
            <item xml:id="A2.I2.i4">
              <tag><ref labelref="LABEL:LaTeXML::Document">LaTeXML::Document</ref>, <ref labelref="LABEL:LaTeXML::Model">LaTeXML::Model</ref>,</tag>
              <p><ref labelref="LABEL:LaTeXML::Rewrite">LaTeXML::Rewrite</ref></p>
              <p>dealing with conversion of the digested boxes into XML.</p>
            </item>
            <item xml:id="A2.I2.i5">
              <tag><ref labelref="LABEL:LaTeXML::Definition">LaTeXML::Definition</ref> and <ref labelref="LABEL:LaTeXML::Parameters">LaTeXML::Parameters</ref></tag>
              <p><text/></p>
              <p>representation of LaTeX macros, primitives, registers and constructors.</p>
            </item>
            <item xml:id="A2.I2.i6">
              <tag>
                <ref labelref="LABEL:LaTeXML::MathParser">LaTeXML::MathParser</ref>
              </tag>
              <p><text/></p>
              <p>the math parser.</p>
              <!-- %**** generated/LaTeXML.tex Line 150 **** -->
            </item>
            <item xml:id="A2.I2.i7">
              <tag><ref labelref="LABEL:LaTeXML::Global">LaTeXML::Global</ref>, <ref labelref="LABEL:LaTeXML::Error">LaTeXML::Error</ref>,</tag>
              <p><ref labelref="LABEL:LaTeXML::Object">LaTeXML::Object</ref><text font="bold">, <ref labelref="LABEL:LaTeXML::Font">LaTeXML::Font</ref></text></p>
              <p>other random modules.</p>
            </item>
          </description>
        </para>
      </subsection>
    </section>
    <section xml:id="A2.Sx2" labels="LABEL:LaTeXML::Object">
      <title>
        <text font="typewriter">LaTeXML::Object<indexmark><indexphrase key="latexmlobject">LaTeXML::Object</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx2.p1">
        <p>Abstract base class for most LaTeXML objects.</p>
      </para>
      <subsection xml:id="A2.Sx2.SSx1" labels="LABEL:LaTeXML::Object_Description">
        <title>Description<indexmark><indexphrase key="latexmlobject">LaTeXML::Object</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx2.SSx1.p1">
          <p><text font="typewriter">LaTeXML::Object</text> serves as an abstract base class for all other objects (both the
data objects and control objects).  It provides for common methods for
stringification and comparison operations to simplify coding and
to beautify error reporting.</p>
        </para>
        <subsubsection xml:id="A2.Sx2.SSx1.SSSx1" labels="LABEL:LaTeXML::Object_Methods">
          <title>Methods<indexmark><indexphrase key="latexmlobject">LaTeXML::Object</indexphrase><indexphrase key="methods">Methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx2.SSx1.SSSx1.p1">
            <description xml:id="A2.I3">
              <item xml:id="A2.I3.i1">
                <tag>$<text font="typewriter">string = $object-&gt;stringify;</text></tag>
                <p><text/></p>
                <p>Returns a readable representation of $<text font="typewriter">object</text>,
useful for debugging.</p>
              </item>
              <item xml:id="A2.I3.i2">
                <tag>$<text font="typewriter">string = $object-&gt;toString;</text></tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML_Object.tex Line 25 **** -->
                <p>Returns the string content of $<text font="typewriter">object</text>;
most useful for extracting a usable string from tokens or boxes
that might representing a filename or such.</p>
              </item>
              <item xml:id="A2.I3.i3">
                <tag>$<text font="typewriter">boole = $object-&gt;equals($other);</text></tag>
                <p><text/></p>
                <p>Returns whether $object and $other are equal.  Should perform
a deep comparision, but the default implementation just compares
for object identity.</p>
              </item>
              <item xml:id="A2.I3.i4">
                <tag>$<text font="typewriter">boole = $object-&gt;isaToken;</text></tag>
                <p><text/></p>
                <p>Returns whether $<text font="typewriter">object</text> is an <ref labelref="LABEL:LaTeXML::Token">LaTeXML::Token</ref>.</p>
              </item>
              <item xml:id="A2.I3.i5">
                <tag>$<text font="typewriter">boole = $object-&gt;isaBox;</text></tag>
                <p><text/></p>
                <p>Returns whether $<text font="typewriter">object</text> is an <ref labelref="LABEL:LaTeXML::Box">LaTeXML::Box</ref>.</p>
              </item>
              <item xml:id="A2.I3.i6">
                <tag>$<text font="typewriter">boole = $object-&gt;isaDefinition;</text></tag>
                <p><text/></p>
                <p>Returns whether $<text font="typewriter">object</text> is an <ref labelref="LABEL:LaTeXML::Definition">LaTeXML::Definition</ref>.
<!-- %**** generated/LaTeXML_Object.tex Line 50 **** --></p>
              </item>
              <item xml:id="A2.I3.i7">
                <tag>$<text font="typewriter">digested = $object-&gt;beDigested;</text></tag>
                <p><text/></p>
                <p>Does whatever is needed to digest the object, and
return the digested representation.  Tokens would be digested
into boxes; Some objects, such as numbers can just return themselves.</p>
              </item>
              <item xml:id="A2.I3.i8">
                <tag>$<text font="typewriter">object-&gt;beAbsorbed($document);</text></tag>
                <p><text/></p>
                <p>Do whatever is needed to absorb the $<text font="typewriter">object</text> into the $<text font="typewriter">document</text>,
typically by invoking appropriate methods on the $<text font="typewriter">document</text>.</p>
              </item>
            </description>
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx3" labels="LABEL:LaTeXML::Definition">
      <title>
        <text font="typewriter">LaTeXML::Definition<indexmark><indexphrase key="latexmldefinition">LaTeXML::Definition</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx3.p1">
        <p>Control sequence definitions.</p>
      </para>
      <subsection xml:id="A2.Sx3.SSx1" labels="LABEL:LaTeXML::Definition_Description">
        <title>Description<indexmark><indexphrase key="latexmldefinition">LaTeXML::Definition</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx3.SSx1.p1">
          <p>These represent the various executables corresponding to control sequences.
See <ref labelref="LABEL:LaTeXML::Package">LaTeXML::Package</ref> for the most convenient means to create them.</p>
        </para>
        <para xml:id="A2.Sx3.SSx1.p2">
          <description xml:id="A2.I4">
            <item xml:id="A2.I4.i1" labels="LABEL:LaTeXML::Expandable">
              <tag>
                <text font="typewriter">LaTeXML::Expandable</text>
              </tag>
              <p><text/></p>
              <p>represents macros and other expandable control sequences
that are carried out in the Gullet during expansion. The results of invoking an
<text font="typewriter">LaTeXML::Expandable</text> should be a list of <text font="typewriter">LaTeXML::Token</text>s.</p>
            </item>
            <item xml:id="A2.I4.i2" labels="LABEL:LaTeXML::Primitive">
              <tag>
                <text font="typewriter">LaTeXML::Primitive</text>
              </tag>
              <p><text/></p>
              <!-- %**** generated/LaTeXML_Definition.tex Line 25 **** -->
              <p>represents primitive control sequences that are primarily carried out
for side effect during digestion in the <ref labelref="LABEL:LaTeXML::Stomach">LaTeXML::Stomach</ref> and for changing
the <ref labelref="LABEL:LaTeXML::State">LaTeXML::State</ref>.  The results of invoking a <text font="typewriter">LaTeXML::Primitive</text>, if any,
should be a list of digested items (<text font="typewriter">LaTeXML::Box</text>, <text font="typewriter">LaTeXML::List</text>
or <text font="typewriter">LaTeXML::Whatsit</text>).</p>
            </item>
            <item xml:id="A2.I4.i3" labels="LABEL:LaTeXML::Register">
              <tag>
                <text font="typewriter">LaTeXML::Register</text>
              </tag>
              <p><text/></p>
              <p>is set up as a speciallized primitive with a getter and setter
to access and store values in the Stomach.</p>
            </item>
            <item xml:id="A2.I4.i4" labels="LABEL:LaTeXML::CharDef">
              <tag>
                <text font="typewriter">LaTeXML::CharDef</text>
              </tag>
              <p><text/></p>
              <p>represents a further specialized Register for chardef.</p>
            </item>
            <item xml:id="A2.I4.i5" labels="LABEL:LaTeXML::Constructor">
              <tag>
                <text font="typewriter">LaTeXML::Constructor</text>
              </tag>
              <p><text/>
<!-- %**** generated/LaTeXML_Definition.tex Line 50 **** --></p>
              <p>represents control sequences that contribute arbitrary XML fragments
to the document tree.  During digestion, a <text font="typewriter">LaTeXML::Constuctor</text> records the arguments
used in the invokation to produce a <ref labelref="LABEL:LaTeXML::Whatsit">LaTeXML::Whatsit</ref>.  The resulting <ref labelref="LABEL:LaTeXML::Whatsit">LaTeXML::Whatsit</ref>
(usually) generates an XML document fragment when absorbed by an instance of <ref labelref="LABEL:LaTeXML::Document">LaTeXML::Document</ref>.
Additionally, a <text font="typewriter">LaTeXML::Constructor</text> may have beforeDigest and afterDigest daemons
defined which are executed for side effect, or for adding additional boxes to the output.</p>
            </item>
          </description>
        </para>
        <para xml:id="A2.Sx3.SSx1.p3">
          <p>More documentation needed, but see LaTeXML::Package for the main user access to these.</p>
        </para>
        <subsubsection xml:id="A2.Sx3.SSx1.SSSx1" labels="LABEL:LaTeXML::Definition_Methods_in_general">
          <title>Methods in general<indexmark><indexphrase key="latexmldefinition">LaTeXML::Definition</indexphrase><indexphrase key="methodsingeneral">Methods in general</indexphrase></indexmark></title>
          <para xml:id="A2.Sx3.SSx1.SSSx1.p1">
            <description xml:id="A2.I5">
              <item xml:id="A2.I5.i1">
                <tag>$<text font="typewriter">token = $defn-&gt;getCS;</text></tag>
                <p><text/></p>
                <p>Returns the (main) token that is bound to this definition.</p>
              </item>
              <item xml:id="A2.I5.i2">
                <tag>$<text font="typewriter">string = $defn-&gt;getCSName;</text></tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML_Definition.tex Line 75 **** -->
                <p>Returns the string form of the token bound to this definition,
taking into account any alias for this definition.</p>
              </item>
              <item xml:id="A2.I5.i3">
                <tag>$<text font="typewriter">defn-&gt;readArguments($gullet);</text></tag>
                <p><text/></p>
                <p>Reads the arguments for this $<text font="typewriter">defn</text> from the $<text font="typewriter">gullet</text>,
returning a list of <ref labelref="LABEL:LaTeXML::Tokens">LaTeXML::Tokens</ref>.</p>
              </item>
              <item xml:id="A2.I5.i4">
                <tag>$<text font="typewriter">parameters = $defn-&gt;getParameters;</text></tag>
                <p><text/></p>
                <p>Return the <text font="typewriter">LaTeXML::Parameters</text> object representing the formal parameters
of the definition.</p>
              </item>
              <item xml:id="A2.I5.i5">
                <tag>
                  <text font="typewriter">@tokens = $defn-&gt;invocation(@args);</text>
                </tag>
                <p><text/></p>
                <p>Return the tokens that would invoke the given definition with the
provided arguments.  This is used to recreate the TeX code (or it's
equivalent).</p>
              </item>
              <item xml:id="A2.I5.i6">
                <tag>$<text font="typewriter">defn-&gt;invoke;</text></tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML_Definition.tex Line 100 **** -->
                <p>Invoke the action of the $<text font="typewriter">defn</text>.  For expandable definitions, this is done in
the Gullet, and returns a list of <ref labelref="LABEL:LaTeXML::Token">LaTeXML::Token</ref>s.  For primitives, it
is carried out in the Stomach, and returns a list of <ref labelref="LABEL:LaTeXML::Box">LaTeXML::Box</ref>es.
For a constructor, it is also carried out by the Stomach, and returns a <ref labelref="LABEL:LaTeXML::Whatsit">LaTeXML::Whatsit</ref>.
That whatsit will be responsible for constructing the XML document fragment, when the
<ref labelref="LABEL:LaTeXML::Document">LaTeXML::Document</ref> invokes $<text font="typewriter">whatsit-</text>beAbsorbed($document);&gt;.</p>
                <p>Primitives and Constructors also support before and after daemons, lists of subroutines
that are executed before and after digestion.  These can be useful for changing modes, etc.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx3.SSx1.SSSx2" labels="LABEL:LaTeXML::Definition_More_about_Primitives">
          <title>More about Primitives<indexmark><indexphrase key="latexmldefinition">LaTeXML::Definition</indexphrase><indexphrase key="moreaboutprimitives">More about Primitives</indexphrase></indexmark></title>
          <para xml:id="A2.Sx3.SSx1.SSSx2.p1">
            <p>Primitive definitions may have lists of daemon subroutines, <text font="typewriter">beforeDigest</text> and <text font="typewriter">afterDigest</text>,
that are executed before (and before the arguments are read) and after digestion.
These should either end with <text font="typewriter">return;</text>, <text font="typewriter">()</text>, or return a list of digested
objects (<ref labelref="LABEL:LaTeXML::Box">LaTeXML::Box</ref>, etc) that will be contributed to the current list.</p>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx3.SSx1.SSSx3" labels="LABEL:LaTeXML::Definition_More_about_Registers">
          <title>More about Registers<indexmark><indexphrase key="latexmldefinition">LaTeXML::Definition</indexphrase><indexphrase key="moreaboutregisters">More about Registers</indexphrase></indexmark></title>
          <para xml:id="A2.Sx3.SSx1.SSSx3.p1">
            <p>Registers generally store some value in the current <text font="typewriter">LaTeXML::State</text>, but are not
<!-- %**** generated/LaTeXML_Definition.tex Line 125 **** -->required to. Like TeX's registers, when they are digested, they expect an optional
<text font="typewriter">=</text>, and then a value of the appropriate type. Register definitions support these
additional methods:</p>
          </para>
          <para xml:id="A2.Sx3.SSx1.SSSx3.p2">
            <description xml:id="A2.I6">
              <item xml:id="A2.I6.i1">
                <tag>$<text font="typewriter">value = $register-&gt;valueOf(@args);</text></tag>
                <p><text/></p>
                <p>Return the value associated with the register, by invoking it's <text font="typewriter">getter</text> function.
The additional args are used by some registers
to index into a set, such as the index to <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">count</text>.</p>
              </item>
              <item xml:id="A2.I6.i2">
                <tag>$<text font="typewriter">register-&gt;setValue($value,@args);</text></tag>
                <p><text/></p>
                <p>Assign a value to the register, by invoking it's <text font="typewriter">setter</text> function.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx3.SSx1.SSSx4" labels="LABEL:LaTeXML::Definition_More_about_Constructors LABEL:LaTeXML::ConstructorCompiler">
          <title>More about Constructors<indexmark><indexphrase key="latexmldefinition">LaTeXML::Definition</indexphrase><indexphrase key="moreaboutconstructors">More about Constructors</indexphrase></indexmark></title>
          <para xml:id="A2.Sx3.SSx1.SSSx4.p1">
            <p>A constructor has as it's <text font="typewriter">replacement</text> a subroutine or a string pattern representing
the XML fragment it should generate.  In the case of a string pattern, the pattern is
<!-- %**** generated/LaTeXML_Definition.tex Line 150 **** -->compiled into a subroutine on first usage by the internal class <text font="typewriter">LaTeXML::ConstructorCompiler</text>.
Like primitives, constructors may have <text font="typewriter">beforeDigest</text> and <text font="typewriter">afterDigest</text>.</p>
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx4" labels="LABEL:LaTeXML::Global">
      <title>
        <text font="typewriter">LaTeXML::Global<indexmark><indexphrase key="latexmlglobal">LaTeXML::Global</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx4.p1">
        <p>Global exports used within LaTeXML, and in Packages.</p>
      </para>
      <subsection xml:id="A2.Sx4.SSx1" labels="LABEL:LaTeXML::Global_Synopsis">
        <title>Synopsis<indexmark><indexphrase key="latexmlglobal">LaTeXML::Global</indexphrase><indexphrase key="synopsis">Synopsis</indexphrase></indexmark></title>
        <para xml:id="A2.Sx4.SSx1.p1">
          <p>use LaTeXML::Global;</p>
        </para>
      </subsection>
      <subsection xml:id="A2.Sx4.SSx2" labels="LABEL:LaTeXML::Global_Description">
        <title>Description<indexmark><indexphrase key="latexmlglobal">LaTeXML::Global</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx4.SSx2.p1">
          <p>This module exports the various constants and constructors that are useful
throughout LaTeXML, and in Package implementations.</p>
        </para>
        <subsubsection xml:id="A2.Sx4.SSx2.SSSx1" labels="LABEL:LaTeXML::Global_Global_state">
          <title>Global state<indexmark><indexphrase key="latexmlglobal">LaTeXML::Global</indexphrase><indexphrase key="globalstate">Global state</indexphrase></indexmark></title>
          <para xml:id="A2.Sx4.SSx2.SSSx1.p1">
            <description xml:id="A2.I7">
              <item xml:id="A2.I7.i1">
                <tag>$<text font="typewriter">STATE;</text></tag>
                <p><text/></p>
                <p>This is bound to the currently active <ref labelref="LABEL:LaTeXML::State">LaTeXML::State</ref> by an instance
of <ref labelref="LABEL:LaTeXML">LaTeXML</ref> during processing.</p>
                <!-- %**** generated/LaTeXML_Global.tex Line 25 **** -->
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx4.SSx2.SSSx2" labels="LABEL:LaTeXML::Global_Tokens">
          <title>Tokens<indexmark><indexphrase key="latexmlglobal">LaTeXML::Global</indexphrase><indexphrase key="tokens">Tokens</indexphrase></indexmark></title>
          <para xml:id="A2.Sx4.SSx2.SSSx2.p1">
            <description xml:id="A2.I8">
              <item xml:id="A2.I8.i1">
                <tag>$<text font="typewriter">catcode = CC_ESCAPE;</text></tag>
                <p><text/></p>
                <p>Constants for the category codes:</p>
                <verbatim font="typewriter">
  CC_BEGIN, CC_END, CC_MATH, CC_ALIGN, CC_EOL,
  CC_PARAM, CC_SUPER, CC_SUB, CC_IGNORE,
  CC_SPACE, CC_LETTER, CC_OTHER, CC_ACTIVE,
  CC_COMMENT, CC_INVALID, CC_CS, CC_NOTEXPANDED.
</verbatim>
                <p>[The last 2 are (apparent) extensions,
with catcodes 16 and 17, respectively].</p>
              </item>
              <item xml:id="A2.I8.i2">
                <tag>$<text font="typewriter">token = Token($string,$cc);</text></tag>
                <p><text/></p>
                <p>Creates a <ref labelref="LABEL:LaTeXML::Token">LaTeXML::Token</ref> with the given content and catcode.
The following shorthand versions are also exported for convenience:</p>
                <!-- %**** generated/LaTeXML_Global.tex Line 50 **** -->
                <verbatim font="typewriter">
  T_BEGIN, T_END, T_MATH, T_ALIGN, T_PARAM,
  T_SUB, T_SUPER, T_SPACE, T_LETTER($letter),
  T_OTHER($char), T_ACTIVE($char),
  T_COMMENT($comment), T_CS($cs)
</verbatim>
              </item>
              <item xml:id="A2.I8.i3">
                <tag>$<text font="typewriter">tokens = Tokens(@token);</text></tag>
                <p><text/></p>
                <p>Creates a <ref labelref="LABEL:LaTeXML::Tokens">LaTeXML::Tokens</ref> from a list of <ref labelref="LABEL:LaTeXML::Token">LaTeXML::Token</ref>'s</p>
              </item>
              <item xml:id="A2.I8.i4">
                <tag>$<text font="typewriter">tokens = Tokenize($string);</text></tag>
                <p><text/></p>
                <p>Tokenizes the $<text font="typewriter">string</text> according to the standard cattable, returning a <ref labelref="LABEL:LaTeXML::Tokens">LaTeXML::Tokens</ref>.</p>
              </item>
              <item xml:id="A2.I8.i5">
                <tag>$<text font="typewriter">tokens = TokenizeInternal($string);</text></tag>
                <p><text/></p>
                <p>Tokenizes the $<text font="typewriter">string</text> according to the internal cattable (where @ is a letter),
returning a <ref labelref="LABEL:LaTeXML::Tokens">LaTeXML::Tokens</ref>.</p>
              </item>
              <item xml:id="A2.I8.i6">
                <tag>
                  <text font="typewriter">@tokens = Explode($string);</text>
                </tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML_Global.tex Line 75 **** -->
                <p>Returns a list of the tokens corresponding to the characters in $<text font="typewriter">string</text>.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx4.SSx2.SSSx3" labels="LABEL:LaTeXML::Global_Numbers_etc_">
          <title>Numbers, etc.<indexmark><indexphrase key="latexmlglobal">LaTeXML::Global</indexphrase><indexphrase key="numbersetc">Numbers, etc.</indexphrase></indexmark></title>
          <para xml:id="A2.Sx4.SSx2.SSSx3.p1">
            <description xml:id="A2.I9">
              <item xml:id="A2.I9.i1">
                <tag>$<text font="typewriter">number = Number($num);</text></tag>
                <p><text/></p>
                <p>Creates a Number object representing $<text font="typewriter">num</text>.</p>
              </item>
              <item xml:id="A2.I9.i2">
                <tag>$<text font="typewriter">number = Float($num);</text></tag>
                <p><text/></p>
                <p>Creates a floating point object representing $<text font="typewriter">num</text>;
This is not part of TeX, but useful.</p>
              </item>
              <item xml:id="A2.I9.i3">
                <tag>$<text font="typewriter">dimension = Dimension($dim);</text></tag>
                <p><text/></p>
                <p>Creates a Dimension object.  $<text font="typewriter">num</text> can be a string with the number and units
(with any of the usual TeX recognized units), or just a number standing for
scaled points (sp).</p>
              </item>
              <item xml:id="A2.I9.i4">
                <tag>$<text font="typewriter">mudimension = MuDimension($dim);</text></tag>
                <p><text/>
<!-- %**** generated/LaTeXML_Global.tex Line 100 **** --></p>
                <p>Creates a MuDimension object; similar to Dimension.</p>
              </item>
              <item xml:id="A2.I9.i5">
                <tag>$<text font="typewriter">glue = Glue($gluespec);</text></tag>
                <p><text/></p>
              </item>
              <item xml:id="A2.I9.i6">
                <tag>$<text font="typewriter">glue = Glue($sp,$plus,$pfill,$minus,$mfill);</text></tag>
                <p><text/></p>
                <p>Creates a Glue object.  $<text font="typewriter">gluespec</text> can be a string in the
form that TeX recognizes (number units optional plus and minus parts).
Alternatively, the dimension, plus and minus parts can be given separately:
$<text font="typewriter">pfill</text> and $<text font="typewriter">mfill</text> are 0 (when the $<text font="typewriter">plus</text> or $<text font="typewriter">minus</text> part is in sp)
or 1,2,3 for fil, fill or filll.</p>
              </item>
              <item xml:id="A2.I9.i7">
                <tag>$<text font="typewriter">glue = MuGlue($gluespec);</text></tag>
                <p><text/></p>
              </item>
              <item xml:id="A2.I9.i8">
                <tag>$<text font="typewriter">glue = MuGlue($sp,$plus,$pfill,$minus,$mfill);</text></tag>
                <p><text/></p>
                <p>Creates a MuGlue object, similar to Glue.</p>
              </item>
              <item xml:id="A2.I9.i9">
                <tag>$<text font="typewriter">pair = Pair($num1,$num2);</text></tag>
                <p><text/></p>
                <p>Creates an object representing a pair of numbers;
Not a part of TeX, but useful for graphical objects.
The two components can be any numerical object.
<!-- %**** generated/LaTeXML_Global.tex Line 125 **** --></p>
              </item>
              <item xml:id="A2.I9.i10">
                <tag>$<text font="typewriter">pair = PairList(@pairs);</text></tag>
                <p><text/></p>
                <p>Creates an object representing a list of pairs of numbers;
Not a part of TeX, but useful for graphical objects.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx4.SSx2.SSSx4" labels="LABEL:LaTeXML::Global_Error_Reporting">
          <title>Error Reporting<indexmark><indexphrase key="latexmlglobal">LaTeXML::Global</indexphrase><indexphrase key="errorreporting">Error Reporting</indexphrase></indexmark></title>
          <para xml:id="A2.Sx4.SSx2.SSSx4.p1">
            <description xml:id="A2.I10">
              <item xml:id="A2.I10.i1">
                <tag>
                  <text font="typewriter">Fatal($message);</text>
                </tag>
                <p><text/></p>
                <p>Signals an fatal error, printing $<text font="typewriter">message</text> along with some context.
In verbose mode a stack trace is printed.</p>
              </item>
              <item xml:id="A2.I10.i2">
                <tag>
                  <text font="typewriter">Error($message);</text>
                </tag>
                <p><text/></p>
                <p>Signals an error, printing $<text font="typewriter">message</text> along with some context.
If in strict mode, this is the same as Fatal().
Otherwise, it attempts to continue processing..</p>
              </item>
              <item xml:id="A2.I10.i3">
                <tag>
                  <text font="typewriter">Warn($message);</text>
                </tag>
                <p><text/>
<!-- %**** generated/LaTeXML_Global.tex Line 150 **** --></p>
                <p>Prints a warning message along with a short indicator of
the input context, unless verbosity is quiet.</p>
              </item>
              <item xml:id="A2.I10.i4">
                <tag>
                  <text font="typewriter">NoteProgress($message);</text>
                </tag>
                <p><text/></p>
                <p>Prints $<text font="typewriter">message</text> unless the verbosity level below 0.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx4.SSx2.SSSx5" labels="LABEL:LaTeXML::Global_Generic_functions">
          <title>Generic functions<indexmark><indexphrase key="latexmlglobal">LaTeXML::Global</indexphrase><indexphrase key="genericfunctions">Generic functions</indexphrase></indexmark></title>
          <para xml:id="A2.Sx4.SSx2.SSSx5.p1">
            <description xml:id="A2.I11">
              <item xml:id="A2.I11.i1">
                <tag>
                  <text font="typewriter">Stringify($object);</text>
                </tag>
                <p><text/></p>
                <p>Returns a short string identifying $<text font="typewriter">object</text>, for debugging.
Works on any values and objects, but invokes the stringify method on
blessed objects.
More informative than the default perl conversion to a string.</p>
              </item>
              <item xml:id="A2.I11.i2">
                <tag>
                  <text font="typewriter">ToString($object);</text>
                </tag>
                <p><text/></p>
                <p>Converts $<text font="typewriter">object</text> to string; most useful for Tokens or Boxes where the
string content is desired.  Works on any values and objects, but invokes
<!-- %**** generated/LaTeXML_Global.tex Line 175 **** -->the toString method on blessed objects.</p>
              </item>
              <item xml:id="A2.I11.i3">
                <tag>
                  <text font="typewriter">Equals($a,$b);</text>
                </tag>
                <p><text/></p>
                <p>Compares the two objects for equality.  Works on any values and objects,
but invokes the equals method on blessed objects, which does a
deep comparison of the two objects.</p>
              </item>
            </description>
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx5" labels="LABEL:LaTeXML::Error">
      <title>
        <text font="typewriter">LaTeXML::Error<indexmark><indexphrase key="latexmlerror">LaTeXML::Error</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx5.p1">
        <p>Internal Error reporting code.</p>
      </para>
      <subsection xml:id="A2.Sx5.SSx1" labels="LABEL:LaTeXML::Error_Description">
        <title>Description<indexmark><indexphrase key="latexmlerror">LaTeXML::Error</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx5.SSx1.p1">
          <p><text font="typewriter">LaTeXML::Error</text> does some simple stack analysis to generate more informative, readable,
error messages for LaTeXML.  Its routines are used by the error reporting methods
from <ref labelref="LABEL:LaTeXML::Global">LaTeXML::Global</ref>, namely <text font="typewriter">Warn</text>, <text font="typewriter">Error</text> and <text font="typewriter">Fatal</text>.</p>
        </para>
        <para xml:id="A2.Sx5.SSx1.p2">
          <p>No user serviceable parts inside.  No symbols are exported.</p>
        </para>
        <subsubsection xml:id="A2.Sx5.SSx1.SSSx1" labels="LABEL:LaTeXML::Error_Functions">
          <title>Functions<indexmark><indexphrase key="latexmlerror">LaTeXML::Error</indexphrase><indexphrase key="functions">Functions</indexphrase></indexmark></title>
          <para xml:id="A2.Sx5.SSx1.SSSx1.p1">
            <description xml:id="A2.I12">
              <item xml:id="A2.I12.i1">
                <tag>$<text font="typewriter">string = LaTeXML::Error::generateMessage($typ,$msg,$lng,@more);</text></tag>
                <p><text/></p>
                <p>Constructs an error or warning message based on the current stack and
the current location in the document.
$<text font="typewriter">typ</text> is a short string characterizing the type of message, such as "Error".
<!-- %**** generated/LaTeXML_Error.tex Line 25 **** -->$<text font="typewriter">msg</text> is the error message itself. If $<text font="typewriter">lng</text> is true, will generate a
more verbose message; this also uses the VERBOSITY set in the $<text font="typewriter">STATE</text>.
Longer messages will show a trace of the objects invoked on the stack,
<text font="typewriter">@more</text> are additional strings to include in the message.</p>
              </item>
              <item xml:id="A2.I12.i2">
                <tag>$<text font="typewriter">string = LaTeXML::Error::stacktrace;</text></tag>
                <p><text/></p>
                <p>Return a formatted string showing a trace of the stackframes up until this
function was invoked.</p>
              </item>
              <item xml:id="A2.I12.i3">
                <tag>
                  <text font="typewriter">@objects = LaTeXML::Error::objectStack;</text>
                </tag>
                <p><text/></p>
                <p>Return a list of objects invoked on the stack.  This procedure only
considers those stackframes which involve methods, and the objects are
those (unique) objects that the method was called on.</p>
              </item>
              <item xml:id="A2.I12.i4">
                <tag>$<text font="typewriter">line = LaTeXML::Error:line_in_file($file);</text></tag>
                <p><text/></p>
                <p>This returns the line number in $file that is currently being executed,
assuming that some stackframe is invoking code defined in that file.</p>
              </item>
            </description>
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx6" labels="LABEL:LaTeXML::Package">
      <title>
        <text font="typewriter">LaTeXML::Package<indexmark><indexphrase key="latexmlpackage">LaTeXML::Package</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx6.p1">
        <p>Support for package implementations and document customization.</p>
      </para>
      <subsection xml:id="A2.Sx6.SSx1" labels="LABEL:LaTeXML::Package_Synopsis">
        <title>Synopsis<indexmark><indexphrase key="latexmlpackage">LaTeXML::Package</indexphrase><indexphrase key="synopsis">Synopsis</indexphrase></indexmark></title>
        <para xml:id="A2.Sx6.SSx1.p1">
          <p>This package defines and exports most of the procedures users will need
to customize or extend LaTeXML. The LaTeXML implementation of some
package might look something like the following, but see the
installed <text font="typewriter">LaTeXML/Package</text> directory for realistic examples.</p>
        </para>
        <para xml:id="A2.Sx6.SSx1.p2">
          <verbatim font="typewriter">
  use LaTeXML::Package;
  use strict;
</verbatim>
        </para>
        <para xml:id="A2.Sx6.SSx1.p3">
          <verbatim font="typewriter">
  # Load "anotherpackage"
  RequirePackage('anotherpackage');
</verbatim>
        </para>
        <para xml:id="A2.Sx6.SSx1.p4">
          <verbatim font="typewriter">
  # A simple macro, just like in TeX
  DefMacro('\thesection', '\thechapter.\roman{section}');
</verbatim>
        </para>
        <para xml:id="A2.Sx6.SSx1.p5">
          <verbatim font="typewriter">
  # A constructor defines how a control sequence generates XML:
  DefConstructor('\thanks{}', "&lt;ltx:thanks&gt;#1&lt;/ltx:thanks&gt;");
</verbatim>
        </para>
        <para xml:id="A2.Sx6.SSx1.p6">
          <verbatim font="typewriter">
  # And a simple environment ...
  DefEnvironment('{abstract}','&lt;abstract&gt;#body&lt;/abstract&gt;');
</verbatim>
        </para>
        <para xml:id="A2.Sx6.SSx1.p7">
          <verbatim font="typewriter">
  # A math  symbol \Real to stand for the Reals:
  DefMath('\Real', "\x{211D}", role=&gt;'ID');
</verbatim>
        </para>
        <para xml:id="A2.Sx6.SSx1.p8">
          <verbatim font="typewriter">
   # Or a semantic floor:
  DefMath('\floor{}','\left\lfloor#1\right\rfloor');
</verbatim>
        </para>
        <para xml:id="A2.Sx6.SSx1.p9">
          <verbatim font="typewriter">
  # More esoteric ...
</verbatim>
        </para>
        <para xml:id="A2.Sx6.SSx1.p10">
          <verbatim font="typewriter">
  # Use a special DocType, if not LaTeXML.dtd
  DocType("rootelement","-//Your Site//Your DocType",'your.dtd',
          prefix=&gt;"http://whatever/");
  # Or use a RelaxNG schema
  RelaxNGSchema("MySchema");
</verbatim>
        </para>
        <para xml:id="A2.Sx6.SSx1.p11">
          <verbatim font="typewriter">
  # Allow sometag elements to be automatically closed if needed
  Tag('pre:sometag', autoClose=&gt;1);
</verbatim>
        </para>
        <para xml:id="A2.Sx6.SSx1.p12">
          <verbatim font="typewriter">
  # Don't forget this, so perl knows the package loaded.
  1;
</verbatim>
        </para>
      </subsection>
      <subsection xml:id="A2.Sx6.SSx2" labels="LABEL:LaTeXML::Package_Description">
        <title>Description<indexmark><indexphrase key="latexmlpackage">LaTeXML::Package</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx6.SSx2.p1">
          <p>To provide a LaTeXML-specific version of a LaTeX package <text font="typewriter">mypackage.sty</text>,
(so that <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">usepackage{mypackage}</text> works), you create the file <text font="typewriter">mypackage.ltxml</text>
and save it in the searchpath (current directory, or one of the directories
given to the –path option, or possibly added to the variable SEARCHPATHS).
Likewise, to provide document-specific customization for, say, <text font="typewriter">mydoc.tex</text>,
you would create the file <text font="typewriter">mydoc.latexml</text> (typically in the same directory).
In either case, you'll <text font="typewriter">use LaTeXML::Package;</text> to import the various declarations
and defining forms that allow you to specify what should be done with various
control sequences, whether there is special treatment of certain document elements,
and so forth.  Using <text font="typewriter">LaTeXML::Package</text> also imports the functions and variables
defined in <ref labelref="LABEL:LaTeXML::Global">LaTeXML::Global</ref>, so see that documentation as well.</p>
        </para>
        <!-- %**** generated/LaTeXML_Package.tex Line 75 **** -->
        <para xml:id="A2.Sx6.SSx2.p2">
          <p>Since LaTeXML attempts to mimic TeX, a familiarity with TeX's processing
model is also helpful.  Additionally, it is often useful, when implementing
non-trivial behaviour, to think TeX-like.</p>
        </para>
        <para xml:id="A2.Sx6.SSx2.p3">
          <p>Many of the following forms take code references as arguments or options.
That is, either a reference to a defined sub, <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math>&amp;<text font="typewriter">somesub</text>, or an
anonymous function sub { … }.  To document these cases, and the
arguments that are passed in each case, we'll use a notation like
CODE($token,..).</p>
        </para>
        <subsubsection xml:id="A2.Sx6.SSx2.SSSx1" labels="LABEL:LaTeXML::Package_Control_Sequence_Definitions">
          <title>Control Sequence Definitions<indexmark><indexphrase key="latexmlpackage">LaTeXML::Package</indexphrase><indexphrase key="controlsequencedefinitions">Control Sequence Definitions</indexphrase></indexmark></title>
          <para xml:id="A2.Sx6.SSx2.SSSx1.p1">
            <p>Many of the following forms define the behaviour of control sequences.
In TeX you'll typically only define macros. In LaTeXML, we're
effectively redefining TeX itself,  so we define macros as well as primitives,
registers, constructors and environments.  These define the behaviour
of these commands when processed during the various phases of LaTeX's
immitation of TeX's digestive tract.</p>
          </para>
          <!-- %**** generated/LaTeXML_Package.tex Line 100 **** -->
          <para xml:id="A2.Sx6.SSx2.SSSx1.p2">
            <p>The first argument to each of these defining forms (<text font="typewriter">DefMacro</text>, <text font="typewriter">DefPrimive</text>, etc)
is a <text font="italic">prototype</text> consisting of the control sequence being defined along with
the specification of parameters required by the control sequence.
Each parameter describes how to parse tokens following the control sequence into
arguments or how to delimit them.  To simplify coding and capture common idioms
in TeX/LaTeX programming, latexml's parameter specifications are more expressive
than TeX's  <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">def</text> or LaTeX's <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">newcommand</text>.  Examples of the prototypes for
familiar TeX or LaTeX control sequences are:</p>
          </para>
          <para xml:id="A2.Sx6.SSx2.SSSx1.p3">
            <verbatim font="typewriter">
   DefConstructor('\usepackage[]{}',...
   DefPrimitive('\multiply Variable SkipKeyword:by Number',..
   DefPrimitive('\newcommand OptionalMatch:* {Token}[][]{}', ...
</verbatim>
          </para>
          <paragraph xml:id="A2.Sx6.SSx2.SSSx1.Px1" labels="LABEL:LaTeXML::Package_Control_Sequence_Parameters">
            <title>Control Sequence Parameters<indexmark><indexphrase key="latexmlpackage">LaTeXML::Package</indexphrase><indexphrase key="controlsequenceparameters">Control Sequence Parameters</indexphrase></indexmark></title>
            <para xml:id="A2.Sx6.SSx2.SSSx1.Px1.p1">
              <p>The general syntax for parameter for a control sequence is something like</p>
            </para>
            <para xml:id="A2.Sx6.SSx2.SSSx1.Px1.p2">
              <verbatim font="typewriter">
  OpenDelim? Modifier? Type (: value (| value)* )? CloseDelim?
</verbatim>
            </para>
            <!-- %**** generated/LaTeXML_Package.tex Line 125 **** -->
            <para xml:id="A2.Sx6.SSx2.SSSx1.Px1.p3">
              <p>The enclosing delimiters, if any, are either {} or [], affect the way the
argument is delimited.  With {}, a regular TeX argument (token or sequence
balanced by braces) is read before parsing according to the type (if needed).
With [], a LaTeX optional argument is read, delimited by (non-nested) square brackets.</p>
            </para>
            <para xml:id="A2.Sx6.SSx2.SSSx1.Px1.p4">
              <p>The modifier can be either <text font="typewriter">Optional</text> or <text font="typewriter">Skip</text>, allowing the argument to
be optional. For <text font="typewriter">Skip</text>, no argument is contributed to the argument list.</p>
            </para>
            <para xml:id="A2.Sx6.SSx2.SSSx1.Px1.p5">
              <p>The shorthands {} and [] default the type to <text font="typewriter">Plain</text> and reads a normal
TeX argument or LaTeX default argument.</p>
            </para>
            <para xml:id="A2.Sx6.SSx2.SSSx1.Px1.p6">
              <p>The predefined argument types are as follows.</p>
            </para>
            <para xml:id="A2.Sx6.SSx2.SSSx1.Px1.p7">
              <description xml:id="A2.I13">
                <item xml:id="A2.I13.i1">
                  <tag><text font="typewriter">Plain</text>, <text font="typewriter">Semiverbatim</text></tag>
                  <p><text/></p>
                  <p>Reads a standard TeX argument being either the next token, or if the
next token is an {, the balanced token list.  In the case of <text font="typewriter">Semiverbatim</text>,
<!-- %**** generated/LaTeXML_Package.tex Line 150 **** -->many catcodes are disabled, which is handy for URL's, labels and similar.</p>
                </item>
                <item xml:id="A2.I13.i2">
                  <tag><text font="typewriter">Token</text>, <text font="typewriter">XToken</text></tag>
                  <p><text/></p>
                  <p>Read a single TeX Token.  For <text font="typewriter">XToken</text>, if the next token is expandable,
it is repeatedly expanded until an unexpandable token remains, which is returned.</p>
                </item>
                <item xml:id="A2.I13.i3">
                  <tag><text font="typewriter">Number</text>, <text font="typewriter">Dimension</text>, <text font="typewriter">Glue</text></tag>
                  <p><text font="bold">or <text font="typewriter">MuGlue</text></text></p>
                  <p>Read an Object corresponding to Number, Dimension, Glue or MuGlue,
using TeX's rules for parsing these objects.</p>
                </item>
                <item xml:id="A2.I13.i4">
                  <tag>
                    <text font="typewriter">Until:</text>
                    <text font="italic">match</text>
                  </tag>
                  <p><text/></p>
                  <p>Reads tokens until a match to the tokens <text font="italic">match</text> is found, returning
the tokens preceding the match.  This corresponds to TeX delimited arguments.</p>
                </item>
                <item xml:id="A2.I13.i5">
                  <tag>
                    <text font="typewriter">UntilBrace</text>
                  </tag>
                  <p><text/></p>
                  <p>Reads tokens until the next open brace {.
This corresponds to the peculiar TeX construct <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">def<Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP" font="serif">\</XMTok></XMath></Math>foo#{...</text>.
<!-- %**** generated/LaTeXML_Package.tex Line 175 **** --></p>
                </item>
                <item xml:id="A2.I13.i6">
                  <tag><text font="typewriter">Match:</text><text font="italic">match(|match)*</text>,</tag>
                  <p><text font="typewriter bold">Keyword:<text font="serif italic">match(|match)*</text></text></p>
                  <p>Reads tokens expecting a match to one of the token lists <text font="italic">match</text>,
returning the one that matches, or undef.
For <text font="typewriter">Keyword</text>, case and catcode of the <text font="italic">matches</text> are ignored.
Additionally, any leading spaces are skipped.</p>
                </item>
                <item xml:id="A2.I13.i7">
                  <tag>
                    <text font="typewriter">Balanced</text>
                  </tag>
                  <p><text/></p>
                  <p>Read tokens until a closing }, but respecting nested {} pairs.</p>
                </item>
                <item xml:id="A2.I13.i8">
                  <tag>
                    <text font="typewriter">Variable</text>
                  </tag>
                  <p><text/></p>
                  <p>Reads a token, expanding if necessary, and expects a control sequence naming
a writable register.  If such is found, it returns an array of the corresponding
definition object, and any arguments required by that definition.</p>
                </item>
                <item xml:id="A2.I13.i9">
                  <tag>
                    <text font="typewriter">SkipSpaces</text>
                  </tag>
                  <p><text/></p>
                  <p>Skips any space tokens, but contributes nothing to the argument list.
<!-- %**** generated/LaTeXML_Package.tex Line 200 **** --></p>
                </item>
              </description>
            </para>
          </paragraph>
          <paragraph xml:id="A2.Sx6.SSx2.SSSx1.Px2" labels="LABEL:LaTeXML::Package_Control_of_Scoping">
            <title>Control of Scoping<indexmark><indexphrase key="latexmlpackage">LaTeXML::Package</indexphrase><indexphrase key="controlofscoping">Control of Scoping</indexphrase></indexmark></title>
            <para xml:id="A2.Sx6.SSx2.SSSx1.Px2.p1">
              <p>Most defining commands accept an option to control how the definition is stored,
<text font="typewriter">scope=&gt;$scope</text>, where $<text font="typewriter">scope</text> can be c&lt;'global'&gt;for global definitions,
<text font="typewriter">'local'</text>, to be stored in the current stack frame, or a string naming a <text font="italic">scope</text>.
A scope saves a set of definitions and values that can be activated at a later time.</p>
            </para>
            <para xml:id="A2.Sx6.SSx2.SSSx1.Px2.p2">
              <p>Particularly interesting forms of scope are those that get automatically activated
upon changes of counter and label.  For example, definitions that have
<text font="typewriter">scope=&gt;'section:1.1'</text>  will be activated when the section number is "1.1",
and will be deactivated when the section ends.</p>
            </para>
          </paragraph>
          <paragraph xml:id="A2.Sx6.SSx2.SSSx1.Px3" labels="LABEL:LaTeXML::Package_The_defining_forms">
            <title>The defining forms<indexmark><indexphrase key="latexmlpackage">LaTeXML::Package</indexphrase><indexphrase key="thedefiningforms">The defining forms</indexphrase></indexmark></title>
            <para xml:id="A2.Sx6.SSx2.SSSx1.Px3.p1">
              <description xml:id="A2.I14">
                <item xml:id="A2.I14.i1">
                  <tag>
                    <text font="typewriter">DefExpandable($prototype,CODE($gullet,@args),%options);</text>
                  </tag>
                  <p><text/></p>
                  <p>Defines an expandable control sequence. The CODE should return
a list of <ref labelref="LABEL:LaTeXML::Token">LaTeXML::Token</ref>'s that replace the macro and its arguments.
The only option, other than <text font="typewriter">scope</text>, is <text font="typewriter">isConditional</text> which should be true,
<!-- %**** generated/LaTeXML_Package.tex Line 225 **** -->for conditional control sequences (TeX uses these to keep track of conditional
nesting when skipping to <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math>else or <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math>fi).</p>
                </item>
                <item xml:id="A2.I14.i2">
                  <tag>
                    <text font="typewriter">DefMacro($prototype,$string |$tokens |$code,%options);</text>
                  </tag>
                  <p><text/></p>
                  <p>Defines the macro expansion for $<text font="typewriter">prototype</text>.  If a $<text font="typewriter">string</text> is supplied, it will be
tokenized at definition time, and any macro arguments will be substituted for parameter
indicators (eg #1) at expansion time; the result is used as the expansion of
the control sequence.
The only option, other than <text font="typewriter">scope</text>, is <text font="typewriter">isConditional</text> which should be true,
for conditional control sequences (TeX uses these to keep track of conditional
nesting when skipping to <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math>else or <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math>fi).</p>
                  <p>If defined by $<text font="typewriter">code</text>, the form is <text font="typewriter">CODE($gullet,@args)</text>.</p>
                </item>
                <item xml:id="A2.I14.i3">
                  <tag>
                    <text font="typewriter">DefMacroI($cs,$paramlist,$string |$tokens |$code,%options);</text>
                  </tag>
                  <p><text/></p>
                  <p>Internal form of <text font="typewriter">DefMacro</text> where the control sequence and parameter list
have already been parsed; useful for definitions from within code.</p>
                  <!-- %**** generated/LaTeXML_Package.tex Line 250 **** -->
                </item>
                <item xml:id="A2.I14.i4">
                  <tag>
                    <text font="typewriter">DefPrimitive($prototype,CODE($stomach,@args),%options);</text>
                  </tag>
                  <p><text/></p>
                  <p>Define a primitive control sequence.
The CODE should return a list of digested items,
but usually should return nothing (eg. end with return; ).</p>
                  <p>The only option is for the special case: <text font="typewriter">isPrefix=&gt;1</text> is used for assignment
prefixes (like <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math>global).</p>
                </item>
                <item xml:id="A2.I14.i5">
                  <tag>
                    <text font="typewriter">DefPrimitiveI($cs,$paramlist,CODE($stomach,@args),%options);</text>
                  </tag>
                  <p><text/></p>
                  <p>Internal form of <text font="typewriter">DefPrimitive</text> where the control sequence and parameter list
have already been parsed; useful for definitions from within code.</p>
                </item>
                <item xml:id="A2.I14.i6">
                  <tag>
                    <text font="typewriter">DefRegister($prototype,$value,%options);</text>
                  </tag>
                  <p><text/></p>
                  <p>Defines a register with the given initial value (a Number, Dimension, Glue, MuGlue or Tokens
— I haven't handled Box's yet).  Usually, the $<text font="typewriter">prototype</text> is just the control sequence,
but registers are also handled by prototypes like <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">count{Number}</text>. <text font="typewriter">DefRegister</text> arranges
that the register value can be accessed when a numeric, dimension, ... value is being read,
and also defines the control sequence for assignment.
<!-- %**** generated/LaTeXML_Package.tex Line 275 **** --></p>
                  <p>Options are</p>
                  <description xml:id="A2.I14.I1">
                    <item xml:id="A2.I14.I1.i1">
                      <tag>
                        <text font="typewriter">readonly</text>
                      </tag>
                      <p><text/></p>
                      <p>specifies if it is not allowed to change this value.</p>
                    </item>
                    <item xml:id="A2.I14.I1.i2">
                      <tag><text font="typewriter">getter</text>=&gt;CODE(@args)</tag>
                      <p><text font="bold">=item <text font="typewriter">setter</text>=&gt;CODE($value,@args)</text></p>
                      <p>By default the value is stored in the State's Value table under a name concatenating the
control sequence and argument values.  These options allow other means of fetching and
storing the value.</p>
                    </item>
                  </description>
                </item>
                <item xml:id="A2.I14.i7">
                  <tag>
                    <text font="typewriter">DefRegisterI($cs,$paramlist,$value,%options);</text>
                  </tag>
                  <p><text/></p>
                  <p>Internal form of <text font="typewriter">DefRegister</text> where the control sequence and parameter list
have already been parsed; useful for definitions from within code.</p>
                  <!-- %**** generated/LaTeXML_Package.tex Line 300 **** -->
                </item>
                <item xml:id="A2.I14.i8">
                  <tag>
                    <text font="typewriter">DefConstructor($prototype,$xmlpattern |$code,%options);</text>
                  </tag>
                  <p><text/></p>
                  <p>The Constructor is where LaTeXML really starts getting interesting;
invoking the control sequence will generate an arbitrary XML
fragment in the document tree.  More specifically: during digestion, the arguments
will be read and digested, creating a <ref labelref="LABEL:LaTeXML::Whatsit">LaTeXML::Whatsit</ref> to represent the object. During
absorbtion by the <ref labelref="LABEL:LaTeXML::Document">LaTeXML::Document</ref>, the <text font="typewriter">Whatsit</text> will generate the XML fragment according
to the replacement $<text font="typewriter">xmlpattern</text>, or by executing <text font="typewriter">CODE</text>.</p>
                  <p>The $<text font="typewriter">xmlpattern</text> is simply a bit of XML as a string with certain substitutions to be made.
The substitutions are of the following forms:</p>
                  <p>If code is supplied,  the form is <text font="typewriter">CODE($document,@args,$properties)</text></p>
                  <description xml:id="A2.I14.I2">
                    <item xml:id="A2.I14.I2.i1">
                      <tag>#1, #2 … #name</tag>
                      <p><text/></p>
                      <p>These are replaced by the corresponding argument (for #1) or property (for #name)
stored with the Whatsit. Each are turned into a string when it appears as
<!-- %**** generated/LaTeXML_Package.tex Line 325 **** -->in an attribute position, or recursively processed when it appears as content.</p>
                    </item>
                    <item xml:id="A2.I14.I2.i2">
                      <tag>&amp;<text font="typewriter">function(@args)</text></tag>
                      <p><text/></p>
                      <p>Another form of substituted value is prefixed with &amp; which invokes a function.
For example, <text font="typewriter"> &amp;func(#1) </text> would invoke the function <text font="typewriter">func</text> on the first argument
to the control sequence; what it returns will be inserted into the document.</p>
                    </item>
                    <item xml:id="A2.I14.I2.i3">
                      <tag><text font="typewriter">?COND(pattern)</text> or <text font="typewriter">?COND(ifpattern)(elsepattern)</text></tag>
                      <p><text/></p>
                      <p>Patterns can be conditionallized using this form.  The <text font="typewriter">COND</text> is any
of the above expressions, considered true if the result is non-empty.
Thus <text font="typewriter">?#1(&lt;foo/&gt;)</text> would add the empty element <text font="typewriter">foo</text> if the first argument
were given.</p>
                    </item>
                    <item xml:id="A2.I14.I2.i4">
                      <tag>
                        <text font="typewriter">^</text>
                      </tag>
                      <p><text/></p>
                      <p>If the constuctor <text font="italic">begins</text> with <text font="typewriter">^</text>, the XML fragment is allowed to <text font="italic">float up</text>
to a parent node that is allowed to contain it, according to the Document Type.</p>
                    </item>
                  </description>
                  <!-- %**** generated/LaTeXML_Package.tex Line 350 **** -->
                  <p>The Whatsit property <text font="typewriter">font</text> is defined by default.  Additional properties
<text font="typewriter">body</text> and <text font="typewriter">trailer</text> are defined when <text font="typewriter">captureBody</text> is true, or for environments.
By using $<text font="typewriter">whatsit-&gt;setProperty(key=&gt;$value);</text> within <text font="typewriter">afterDigest</text>,
or by using the <text font="typewriter">properties</text> option, other properties can be added.</p>
                  <p>DefConstructor options are</p>
                  <description xml:id="A2.I14.I3">
                    <item xml:id="A2.I14.I3.i1">
                      <tag>mode=&gt;(text|display_math|</tag>
                      <p><text font="bold">inline_math)</text></p>
                      <p>Changes to this mode during digestion.</p>
                    </item>
                    <item xml:id="A2.I14.I3.i2">
                      <tag>bounded=&gt;boolean</tag>
                      <p><text/></p>
                      <p>If true, TeX grouping (ie. {}) is enforced around this invocation.</p>
                    </item>
                    <item xml:id="A2.I14.I3.i3">
                      <tag>requireMath=&gt;boolean</tag>
                      <p><text/></p>
                    </item>
                    <item xml:id="A2.I14.I3.i4">
                      <tag>forbidMath=&gt;boolean</tag>
                      <p><text/></p>
                      <!-- %**** generated/LaTeXML_Package.tex Line 375 **** -->
                      <p>These specify whether the given constructor can only appear,
or cannot appear, in math mode.</p>
                    </item>
                    <item xml:id="A2.I14.I3.i5">
                      <tag>font=&gt;{fontspec…}</tag>
                      <p><text/></p>
                      <p>Specifies the font to be set by this invocation.
See <ref href="http://search.cpan.org/search?query=/MergeFont&amp;mode=module">/MergeFont</ref>
If the font change is to only apply to this construct,
you would also use &lt;<text font="typewriter">bounded=</text>1&gt;&gt;.</p>
                    </item>
                    <item xml:id="A2.I14.I3.i6">
                      <tag>reversion=&gt;$texstring or CODE($whatsit,#1,#2,…)</tag>
                      <p><text/></p>
                      <p>Specifies the reversion of the invocation back into TeX tokens
(if the default reversion is not appropriate).
The $textstring string can include #1,#2…
The CODE is called with the $whatsit and digested arguments.</p>
                    </item>
                    <item xml:id="A2.I14.I3.i7">
                      <tag>properties=&gt;{prop=&gt;value,…}</tag>
                      <p><text font="bold">or CODE($stomach,#1,#2…)</text></p>
                      <p>This option supplies additional properties to be set on the
generated Whatsit.  In the first form, the values can
be of any type, but (1) if it is a code references, it takes
<!-- %**** generated/LaTeXML_Package.tex Line 400 **** -->the same args ($stomach,#1,#2,…) and should return a value.
and (2) if the value is a string, occurances of #1 (etc) are
replaced by the corresponding argument.
In the second form, the code should return a hash of properties.</p>
                    </item>
                    <item xml:id="A2.I14.I3.i8">
                      <tag>beforeDigest=&gt;CODE($stomach)</tag>
                      <p><text/></p>
                      <p>This option supplies a Daemon to be executed during digestion
just before the Whatsit is created.  The CODE should either
return nothing (return;) or a list of digested items (Box's,List,Whatsit).
It can thus change the State and/or add to the digested output.</p>
                    </item>
                    <item xml:id="A2.I14.I3.i9">
                      <tag>afterDigest=&gt;CODE($stomach,$whatsit)</tag>
                      <p><text/></p>
                      <p>This option supplies a Daemon to be executed during digestion
just after the Whatsit is created. it should either return
nothing (return;) or digested items.  It can thus change the State,
modify the Whatsit, and/or add to the digested output.</p>
                    </item>
                    <item xml:id="A2.I14.I3.i10">
                      <tag>beforeConstruct=&gt;CODE($document,$whatsit)</tag>
                      <p><text/></p>
                      <p>Supplies CODE to execute before constructing the XML
<!-- %**** generated/LaTeXML_Package.tex Line 425 **** -->(generated by $replacement).</p>
                    </item>
                    <item xml:id="A2.I14.I3.i11">
                      <tag>afterConstruct=&gt;CODE($document,$whatsit)</tag>
                      <p><text/></p>
                      <p>Supplies CODE to execute after constructing the XML.</p>
                    </item>
                    <item xml:id="A2.I14.I3.i12">
                      <tag>captureBody=&gt;boolean</tag>
                      <p><text/></p>
                      <p>if true, arbitrary following material will be accumulated into
a `body' until the current grouping level is reverted.
This body is available as the <text font="typewriter">body</text> property of the Whatsit.
This is used by environments and math.</p>
                    </item>
                    <item xml:id="A2.I14.I3.i13">
                      <tag>alias=&gt;$control_sequence</tag>
                      <p><text/></p>
                      <p>Provides a control sequence to be used when reverting Whatsit's back to Tokens,
in cases where it isn't the command used in the $<text font="typewriter">prototype</text>.</p>
                    </item>
                    <item xml:id="A2.I14.I3.i14">
                      <tag>nargs=&gt;$nargs</tag>
                      <p><text/></p>
                      <p>This gives a number of args for cases where it can't be infered directly
<!-- %**** generated/LaTeXML_Package.tex Line 450 **** -->from the $<text font="typewriter">prototype</text> (eg. when more args are explictly read by Daemons).</p>
                    </item>
                    <item xml:id="A2.I14.I3.i15">
                      <tag>scope=&gt;$scope</tag>
                      <p><text/></p>
                      <p>See <ref href="http://search.cpan.org/search?query=/scope&amp;mode=module">/scope</ref>.</p>
                    </item>
                  </description>
                </item>
                <item xml:id="A2.I14.i9">
                  <tag>
                    <text font="typewriter">DefConstructorI($cs,$paramlist,$xmlpattern |$code,%options);</text>
                  </tag>
                  <p><text/></p>
                  <p>Internal form of <text font="typewriter">DefConstructor</text> where the control sequence and parameter list
have already been parsed; useful for definitions from within code.</p>
                </item>
                <item xml:id="A2.I14.i10">
                  <tag>
                    <text font="typewriter">DefMath($prototype,$tex,%options);</text>
                  </tag>
                  <p><text/></p>
                  <p>A common shorthand constructor; it defines a control sequence that creates a mathematical object,
such as a symbol, function or operator application.
The options given can effectively create semantic macros that contribute to the eventual
parsing of mathematical content.
In particular, it generates an XMDual using the replacement $tex for the presentation.
The content information is drawn from the name and options</p>
                  <!-- %**** generated/LaTeXML_Package.tex Line 475 **** -->
                  <p>These <text font="typewriter">DefConstructor</text> options also apply:</p>
                  <verbatim font="typewriter">
  reversion, alias, beforeDigest, afterDigest,
  beforeConstruct, afterConstruct and scope.
</verbatim>
                  <p>Additionally, it accepts</p>
                  <description xml:id="A2.I14.I4">
                    <item xml:id="A2.I14.I4.i1">
                      <tag>style=&gt;astyle</tag>
                      <p><text/></p>
                      <p>adds a style attribute to the object.</p>
                    </item>
                    <item xml:id="A2.I14.I4.i2">
                      <tag>name=&gt;aname</tag>
                      <p><text/></p>
                      <p>gives a name attribute for the object</p>
                    </item>
                    <item xml:id="A2.I14.I4.i3">
                      <tag>omcd=&gt;cdname</tag>
                      <p><text/></p>
                      <!-- %**** generated/LaTeXML_Package.tex Line 500 **** -->
                      <p>gives the OpenMath content dictionary that name is from.</p>
                    </item>
                    <item xml:id="A2.I14.I4.i4">
                      <tag>role=&gt;grammatical_role</tag>
                      <p><text/></p>
                      <p>adds a grammatical role attribute to the object; this specifies
the grammatical role that the object plays in surrounding expressions.
This direly needs documentation!</p>
                    </item>
                    <item xml:id="A2.I14.I4.i5">
                      <tag>font=&gt;{fontspec}</tag>
                      <p><text/></p>
                      <p>Specifies the font to be used for when creating this object.
See <ref href="http://search.cpan.org/search?query=/MergeFont&amp;mode=module">/MergeFont</ref>.</p>
                    </item>
                    <item xml:id="A2.I14.I4.i6">
                      <tag>scriptpos=&gt;boolean</tag>
                      <p><text/></p>
                      <p>Controls whether any sub and super-scripts will be stacked over or under this
object, or whether they will appear in the usual position.</p>
                      <p>WRONG: Redocument this!</p>
                      <!-- %**** generated/LaTeXML_Package.tex Line 525 **** -->
                    </item>
                    <item xml:id="A2.I14.I4.i7">
                      <tag>operator_role=&gt;grammatical_role</tag>
                      <p><text/></p>
                    </item>
                    <item xml:id="A2.I14.I4.i8">
                      <tag>operator_scriptpos=&gt;boolean</tag>
                      <p><text/></p>
                      <p>These two are similar to <text font="typewriter">role</text> and <text font="typewriter">scriptpos</text>, but are used in
unusual cases.  These apply to the given attributes to the operator token
in the content branch.</p>
                    </item>
                    <item xml:id="A2.I14.I4.i9">
                      <tag>nogroup=&gt;boolean</tag>
                      <p><text/></p>
                      <p>Normally, these commands are digested with an implicit grouping around them,
so that changes to fonts, etc, are local.  Providing &lt;<text font="typewriter">noggroup=</text>1&gt;&gt;inhibits this.</p>
                    </item>
                  </description>
                </item>
                <item xml:id="A2.I14.i11">
                  <tag>
                    <text font="typewriter">DefMathI($cs,$paramlist,$tex,%options);</text>
                  </tag>
                  <p><text/></p>
                  <p>Internal form of <text font="typewriter">DefMath</text> where the control sequence and parameter list
have already been parsed; useful for definitions from within code.</p>
                </item>
                <item xml:id="A2.I14.i12">
                  <tag>
                    <text font="typewriter">DefEnvironment($prototype,$replacement,%options);</text>
                  </tag>
                  <p><text/></p>
                  <p>Defines an Environment that generates a specific XML fragment.  The $<text font="typewriter">replacement</text> is
<!-- %**** generated/LaTeXML_Package.tex Line 550 **** -->of the same form as that for DefConstructor, but will generally include reference to
the #<text font="typewriter">body</text> property. Upon encountering a <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">begin{env}</text>:  the mode is switched, if needed,
else a new group is opened; then the environment name is noted; the beforeDigest daemon is run.
Then the Whatsit representing the begin command (but ultimately the whole environment) is created
and the afterDigestBegin daemon is run.
Next, the body will be digested and collected until the balancing <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">end{env}</text>.   Then,
any afterDigest daemon is run, the environment is ended, finally the mode is ended or
the group is closed.  The body and <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">end{env}</text> whatsit are added to the <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">begin{env}</text>'s whatsit
as body and trailer, respectively.</p>
                  <p>It shares options with <text font="typewriter">DefConstructor</text>:</p>
                  <verbatim font="typewriter">
 mode, requireMath, forbidMath, properties, nargs,
 font, beforeDigest, afterDigest, beforeConstruct,
 afterConstruct and scope.
</verbatim>
                  <p>Additionally, <text font="typewriter">afterDigestBegin</text> is effectively an <text font="typewriter">afterDigest</text>
for the <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">begin{env}</text> control sequence.</p>
                  <!-- %**** generated/LaTeXML_Package.tex Line 575 **** -->
                </item>
                <item xml:id="A2.I14.i13">
                  <tag>
                    <text font="typewriter">DefEnvironmentI($name,$paramlist,$replacement,%options);</text>
                  </tag>
                  <p><text/></p>
                  <p>Internal form of <text font="typewriter">DefEnvironment</text> where the control sequence and parameter list
have already been parsed; useful for definitions from within code.</p>
                </item>
                <item xml:id="A2.I14.i14">
                  <tag>
                    <text font="typewriter">Let($token1,$token2);</text>
                  </tag>
                  <p><text/></p>
                  <p>Gives $<text font="typewriter">token1</text> the same `meaning' (definition) as $<text font="typewriter">token2</text>; like TeX's <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math>let.</p>
                </item>
              </description>
            </para>
          </paragraph>
        </subsubsection>
        <subsubsection xml:id="A2.Sx6.SSx2.SSSx2" labels="LABEL:LaTeXML::Package_Document_Declarations">
          <title>Document Declarations<indexmark><indexphrase key="latexmlpackage">LaTeXML::Package</indexphrase><indexphrase key="documentdeclarations">Document Declarations</indexphrase></indexmark></title>
          <para xml:id="A2.Sx6.SSx2.SSSx2.p1">
            <p>Constructors define how TeX markup will generate XML fragments, but the
Document Model is used to control exactly how those fragments are assembled.</p>
          </para>
          <para xml:id="A2.Sx6.SSx2.SSSx2.p2">
            <description xml:id="A2.I15">
              <item xml:id="A2.I15.i1">
                <tag>
                  <text font="typewriter">Tag($tag,%properties);</text>
                </tag>
                <p><text/></p>
                <p>Declares properties of elements with the name $<text font="typewriter">tag</text>.</p>
                <!-- %**** generated/LaTeXML_Package.tex Line 600 **** -->
                <p>The recognized properties are:</p>
                <description xml:id="A2.I15.I1">
                  <item xml:id="A2.I15.I1.i1">
                    <tag>autoOpen=&gt;boolean</tag>
                    <p><text/></p>
                    <p>Specifies whether this $tag can be automatically opened
if needed to insert an element that can only
be contained by $tag.
This property can help match the more  SGML-like LaTeX to XML.</p>
                  </item>
                  <item xml:id="A2.I15.I1.i2">
                    <tag>autoClose=&gt;boolean</tag>
                    <p><text/></p>
                    <p>Specifies whether this $tag can be automatically closed
if needed to close an ancestor node, or insert
an element into an ancestor.
This property can help match the more  SGML-like LaTeX to XML.</p>
                  </item>
                  <item xml:id="A2.I15.I1.i3">
                    <tag>afterOpen=&gt;CODE($document,$box)</tag>
                    <p><text/></p>
                    <p>Provides CODE to be run whenever a node with this $tag
is opened.  It is called with the document being constructed,
and the initiating digested object as arguments.
<!-- %**** generated/LaTeXML_Package.tex Line 625 **** -->It is called after the node has been created, and after
any initial attributes due to the constructor (passed to openElement)
are added.</p>
                  </item>
                  <item xml:id="A2.I15.I1.i4">
                    <tag>afterClose=&gt;CODE($document,$box)</tag>
                    <p><text/></p>
                    <p>Provides CODE to be run whenever a node with this $tag
is closed.  It is called with the document being constructed,
and the initiating digested object as arguments.</p>
                  </item>
                </description>
              </item>
              <item xml:id="A2.I15.i2">
                <tag>
                  <text font="typewriter">DocType($rootelement,$publicid,$systemid,%namespaces);</text>
                </tag>
                <p><text/></p>
                <p>Declares the expected rootelement, the public and system ID's of the document type
to be used in the final document.  The hash <text font="typewriter">%namespaces</text> specifies
the namespaces prefixes that are expected to be found in the DTD, along with
each associated namespace URI.  Use the prefix #<text font="typewriter">default</text> for the default namespace
(ie. the namespace of non-prefixed elements in the DTD).</p>
                <p>The prefixes defined for the DTD may be different from the prefixes used in
implementation CODE (eg. in ltxml files; see RegisterNamespace).
<!-- %**** generated/LaTeXML_Package.tex Line 650 **** -->The generated document will use the namespaces and prefixes defined for the DTD.</p>
              </item>
              <item xml:id="A2.I15.i3">
                <tag>
                  <text font="typewriter">RelaxNGSchema($schemaname);</text>
                </tag>
                <p><text/></p>
                <p>Specifies the schema to use for determining document model.
You can leave off the extension; it will look for <text font="typewriter">.rng</text>,
and maybe eventually, <text font="typewriter">.rnc</text> once that is implemented.</p>
              </item>
              <item xml:id="A2.I15.i4">
                <tag>
                  <text font="typewriter">RegisterNamespace($prefix,$URL);</text>
                </tag>
                <p><text/></p>
                <p>Declares the $<text font="typewriter">prefix</text> to be associated with the given $<text font="typewriter">URL</text>.
These prefixes may be used in ltxml files, particularly for
constructors, xpath expressions, etc.  They are not necessarily
the same as the prefixes that will be used in the generated document
(See DocType).</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx6.SSx2.SSSx3" labels="LABEL:LaTeXML::Package_Ligatures">
          <title>Ligatures<indexmark><indexphrase key="latexmlpackage">LaTeXML::Package</indexphrase><indexphrase key="ligatures">Ligatures</indexphrase></indexmark></title>
          <para xml:id="A2.Sx6.SSx2.SSSx3.p1">
            <p>During document construction, as each node gets closed, the text content gets simplfied.
We'll call it <text font="italic">applying ligatures</text>, for lack of a better name.</p>
          </para>
          <!-- %**** generated/LaTeXML_Package.tex Line 675 **** -->
          <para xml:id="A2.Sx6.SSx2.SSSx3.p2">
            <description xml:id="A2.I16">
              <item xml:id="A2.I16.i1">
                <tag>
                  <text font="typewriter">DefLigature($regexp,%options);</text>
                </tag>
                <p><text/></p>
                <p>Apply the regular expression (given as a string: "/fa/fa/" since it will
be converted internally to a true regexp), to the text content.
The only option is <text font="typewriter">fontTest=CODE($font)</text>; if given, then the substitution
is applied only when <text font="typewriter">fontTest</text> returns true.</p>
                <p>Predefined Ligatures combine sequences of "." or single-quotes into appropriate
Unicode characters.</p>
              </item>
              <item xml:id="A2.I16.i2">
                <tag>
                  <text font="typewriter">DefMathLigature(CODE($document,@nodes));</text>
                </tag>
                <p><text/></p>
                <p>CODE is called on each sequence of math nodes at a given level.  If they should
be replaced, return a list of <text font="typewriter">($n,$string,%attributes)</text> to replace
the text content of the first node with $<text font="typewriter">string</text> content and add the given attributes.
The next $<text font="typewriter">n-1</text> nodes are removed.  If no replacement is called for, CODE
should return undef.</p>
                <!-- %**** generated/LaTeXML_Package.tex Line 700 **** -->
                <p>Predefined Math Ligatures combine letter or digit Math Tokens (XMTok) into multicharacter
symbols or numbers, depending on the font (non math italic).</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx6.SSx2.SSSx4" labels="LABEL:LaTeXML::Package_Document_Rewriting">
          <title>Document Rewriting<indexmark><indexphrase key="latexmlpackage">LaTeXML::Package</indexphrase><indexphrase key="documentrewriting">Document Rewriting</indexphrase></indexmark></title>
          <para xml:id="A2.Sx6.SSx2.SSSx4.p1">
            <description xml:id="A2.I17">
              <item xml:id="A2.I17.i1">
                <tag>
                  <text font="typewriter">DefRewrite(%specification);</text>
                </tag>
                <p><text/></p>
              </item>
              <item xml:id="A2.I17.i2">
                <tag>
                  <text font="typewriter">DefMathRewrite(%specification);</text>
                </tag>
                <p><text/></p>
                <p>These two declarations define document rewrite rules that are applied to the
document tree after it has been constructed, but before math parsing, or
any other postprocessing, is done.  The <text font="typewriter">%specification</text> consists of a
seqeuence of key/value pairs with the initial specs successively narrowing the
selection of document nodes, and the remaining specs indicating how
to modify or replace the selected nodes.</p>
                <p>The following select portions of the document:</p>
                <description xml:id="A2.I17.I1">
                  <item xml:id="A2.I17.I1.i1">
                    <tag>label =&gt;$label</tag>
                    <p><text/></p>
                    <!-- %**** generated/LaTeXML_Package.tex Line 725 **** -->
                    <p>Selects the part of the document with label=$label</p>
                  </item>
                  <item xml:id="A2.I17.I1.i2">
                    <tag>scope =&gt;$scope</tag>
                    <p><text/></p>
                    <p>The $scope could be "label:foo" or "section:1.2.3" or something
similar. These select a subtree labelled 'foo', or
a section with reference number "1.2.3"</p>
                  </item>
                  <item xml:id="A2.I17.I1.i3">
                    <tag>xpath =&gt;$xpath</tag>
                    <p><text/></p>
                    <p>Select those nodes matching an explicit xpath expression.</p>
                  </item>
                  <item xml:id="A2.I17.I1.i4">
                    <tag>match =&gt;$TeX</tag>
                    <p><text/></p>
                    <p>Selects nodes that look like what the processing of $TeX would produce.</p>
                  </item>
                  <item xml:id="A2.I17.I1.i5">
                    <tag>regexp=&gt;$regexp</tag>
                    <p><text/></p>
                    <p>Selects text nodes that match the regular expression.</p>
                  </item>
                </description>
                <!-- %**** generated/LaTeXML_Package.tex Line 750 **** -->
                <p>The following act upon the selected node:</p>
                <description xml:id="A2.I17.I2">
                  <item xml:id="A2.I17.I2.i1">
                    <tag>attributes =&gt;$hash</tag>
                    <p><text/></p>
                    <p>Adds the attributes given in the hash reference to the node.</p>
                  </item>
                  <item xml:id="A2.I17.I2.i2">
                    <tag>replace =&gt;$replacement</tag>
                    <p><text/></p>
                    <p>Interprets the $replacement as TeX code to generate nodes that will
replace the selected nodes.</p>
                  </item>
                </description>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx6.SSx2.SSSx5" labels="LABEL:LaTeXML::Package_Other_useful_operations">
          <title>Other useful operations<indexmark><indexphrase key="latexmlpackage">LaTeXML::Package</indexphrase><indexphrase key="otherusefuloperations">Other useful operations</indexphrase></indexmark></title>
          <para xml:id="A2.Sx6.SSx2.SSSx5.p1">
            <description xml:id="A2.I18">
              <item xml:id="A2.I18.i1">
                <tag>
                  <text font="typewriter">RequirePackage($package);</text>
                </tag>
                <p><text/></p>
                <p>Finds an implementation (<text font="typewriter">*.sty</text> or <text font="typewriter">*.ltxml</text>) for the required $<text font="typewriter">package</text>,
loading it as appropriate.
<!-- %**** generated/LaTeXML_Package.tex Line 775 **** --></p>
              </item>
              <item xml:id="A2.I18.i2">
                <tag>
                  <text font="typewriter">RawTeX('... tex code ...');</text>
                </tag>
                <p><text/></p>
                <p>RawTeX is a convenience function for including chunks of raw TeX (or LaTeX) code
in a Package implementation.  It is useful for copying portions of the normal
implementation that can be handled simply using macros and primitives.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx6.SSx2.SSSx6" labels="LABEL:LaTeXML::Package_Counters_and_IDs">
          <title>Counters and IDs<indexmark><indexphrase key="latexmlpackage">LaTeXML::Package</indexphrase><indexphrase key="countersandids">Counters and IDs</indexphrase></indexmark></title>
          <para xml:id="A2.Sx6.SSx2.SSSx6.p1">
            <description xml:id="A2.I19">
              <item xml:id="A2.I19.i1">
                <tag>
                  <text font="typewriter">NewCounter($ctr,$within,%options);</text>
                </tag>
                <p><text/></p>
                <p>Defines a new counter, like LaTeX's <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math>newcounter, but extended.
It defines a counter that can be used to generate reference numbers,
and defines <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math>the$ctr, etc. It also defines an "uncounter" which
can be used to generate ID's (xml:id) for unnumbered objects.
$<text font="typewriter">ctr</text> is the name of the counter.  If defined, $<text font="typewriter">within</text> is the name
of another counter which, when incremented, will cause this counter
to be reset.
The options are</p>
                <verbatim font="typewriter">
   idprefix  Specifies a prefix to be used when using this counter
             to generate ID's.
   nested    Not sure that this is even sane.
</verbatim>
              </item>
              <item xml:id="A2.I19.i2">
                <tag>$<text font="typewriter">num = CounterValue($ctr);</text></tag>
                <p><text/></p>
                <p>Fetches the value associated with the counter $<text font="typewriter">ctr</text>.</p>
              </item>
              <item xml:id="A2.I19.i3">
                <tag>$<text font="typewriter">tokens = StepCounter($ctr);</text></tag>
                <p><text/></p>
                <p>Like <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">stepcounter</text>, steps the counter and returns the expansion of
<Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">the$ctr</text>.  Usually you should use <text font="typewriter">RefStepCounter($ctr)</text> instead.</p>
              </item>
              <item xml:id="A2.I19.i4">
                <tag>$<text font="typewriter">keys = RefStepCounter($ctr);</text></tag>
                <p><text/></p>
                <p>Like <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">refstepcounter</text>, it steps the counter and returns the keys
<text font="typewriter">refnum=$</text>refnum, id=&gt;$id&gt;, making it suitable for use in
a <text font="typewriter">properties</text> option to constructors.  The <text font="typewriter">id</text> is generated
in parallel with the reference number to assist debugging.</p>
              </item>
              <item xml:id="A2.I19.i5">
                <tag>$<text font="typewriter">keys = RefStepID($ctr);</text></tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML_Package.tex Line 825 **** -->
                <p>Analogous to <text font="typewriter">RefStepCounter</text>, but only steps the "uncounter",
and returns only the id;  This is useful for unnumbered cases
of objects that normally get both a refnum and id.</p>
              </item>
              <item xml:id="A2.I19.i6">
                <tag>
                  <text font="typewriter">ResetCounter($ctr);</text>
                </tag>
                <p><text/></p>
                <p>Resets the counter $<text font="typewriter">ctr</text> to zero.</p>
              </item>
              <item xml:id="A2.I19.i7">
                <tag>
                  <text font="typewriter">GenerateID($document,$node,$whatsit,$prefix);</text>
                </tag>
                <p><text/></p>
                <p>Generates an ID for nodes during the construction phase, useful
for cases where the counter based scheme is inappropriate.
The calling pattern makes it appropriate for use in Tag, as in
Tag('ltx:para',sub { GenerateID(@_,'p'); })</p>
                <p>If $<text font="typewriter">node</text> doesn't already have an xml:id set, it computes an
appropriate id by concatenating the xml:id of the closest
ancestor with an id (if any), the prefix and a unique counter.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx6.SSx2.SSSx7" labels="LABEL:LaTeXML::Package_Convenience_Functions">
          <title>Convenience Functions<indexmark><indexphrase key="latexmlpackage">LaTeXML::Package</indexphrase><indexphrase key="conveniencefunctions">Convenience Functions</indexphrase></indexmark></title>
          <!-- %**** generated/LaTeXML_Package.tex Line 850 **** -->
          <para xml:id="A2.Sx6.SSx2.SSSx7.p1">
            <p>The following are exported as a convenience when writing definitions.</p>
          </para>
          <para xml:id="A2.Sx6.SSx2.SSSx7.p2">
            <description xml:id="A2.I20">
              <item xml:id="A2.I20.i1">
                <tag>$<text font="typewriter">value = LookupValue($name);</text></tag>
                <p><text/></p>
                <p>Lookup the current value associated with the the string $<text font="typewriter">name</text>.</p>
              </item>
              <item xml:id="A2.I20.i2">
                <tag>
                  <text font="typewriter">AssignValue($name,$value,$scope);</text>
                </tag>
                <p><text/></p>
                <p>Assign $value to be associated with the the string $<text font="typewriter">name</text>, according
to the given scoping rule.</p>
                <p>Values are also used to specify most configuration parameters (which can
therefor also be scoped).  The recognized configuration parameters are:</p>
                <verbatim font="typewriter">
 VERBOSITY         : the level of verbosity for debugging
                     output, with 0 being default.
 STRICT            : whether errors (eg. undefined macros)
                     are fatal.
 INCLUDE_COMMENTS  : whether to preserve comments in the
                     source, and to add occasional line
                     number comments. (Default true).
 PRESERVE_NEWLINES : whether newlines in the source should
                     be preserved (not 100% TeX-like).
                     By default this is true.
 SEARCHPATHS       : a list of directories to search for
                     sources, implementations, etc.
</verbatim>
              </item>
              <item xml:id="A2.I20.i3">
                <tag>
                  <text font="typewriter">PushValue($type,$name,@values);</text>
                </tag>
                <p><text/></p>
                <p>This is like <text font="typewriter">AssignValue</text>, but pushes values onto
the end of the value, which should be a LIST reference.
Scoping is not handled here (yet?), it simply pushes the value
onto the last binding of $<text font="typewriter">name</text>.</p>
              </item>
              <item xml:id="A2.I20.i4">
                <tag>
                  <text font="typewriter">UnshiftValue($type,$name,@values);</text>
                </tag>
                <p><text/></p>
                <p>Similar to  <text font="typewriter">PushValue</text>, but pushes a value onto
the front of the values, which should be a LIST reference.</p>
                <!-- %**** generated/LaTeXML_Package.tex Line 900 **** -->
              </item>
              <item xml:id="A2.I20.i5">
                <tag>$<text font="typewriter">value = LookupCatcode($char);</text></tag>
                <p><text/></p>
                <p>Lookup the current catcode associated with the the character $<text font="typewriter">char</text>.</p>
              </item>
              <item xml:id="A2.I20.i6">
                <tag>
                  <text font="typewriter">AssignCatcode($char,$catcode,$scope);</text>
                </tag>
                <p><text/></p>
                <p>Set $<text font="typewriter">char</text> to have the given $<text font="typewriter">catcode</text>, with the assignment made
according to the given scoping rule.</p>
                <p>This method is also used to specify whether a given character is
active in math mode, by using <text font="typewriter">math:$char</text> for the character,
and using a value of 1 to specify that it is active.</p>
              </item>
              <item xml:id="A2.I20.i7">
                <tag>$<text font="typewriter">meaning = LookupMeaning($token);</text></tag>
                <p><text/></p>
                <p>Looks up the current meaning of the given $<text font="typewriter">token</text> which may be a
Definition, another token, or the token itself if it has not
otherwise been defined.</p>
              </item>
              <item xml:id="A2.I20.i8">
                <tag>$<text font="typewriter">defn = LookupDefinition($token);</text></tag>
                <p><text/>
<!-- %**** generated/LaTeXML_Package.tex Line 925 **** --></p>
                <p>Looks up the current definition, if any, of the $<text font="typewriter">token</text>.</p>
              </item>
              <item xml:id="A2.I20.i9">
                <tag>
                  <text font="typewriter">InstallDefinition($defn);</text>
                </tag>
                <p><text/></p>
                <p>Install the Definition $<text font="typewriter">defn</text> into $<text font="typewriter">STATE</text> under its
control sequence.</p>
              </item>
              <item xml:id="A2.I20.i10">
                <tag>$<text font="typewriter">boxes = Digest($tokens);</text></tag>
                <p><text/></p>
                <p>Processes and digestes the $<text font="typewriter">tokens</text>.  Any arguments needed by
control sequences in $<text font="typewriter">tokens</text> must be contained within the $<text font="typewriter">tokens</text> itself.</p>
              </item>
              <item xml:id="A2.I20.i11">
                <tag>
                  <text font="typewriter">MergeFont(%style);</text>
                </tag>
                <p><text/></p>
                <p>Set the current font by merging the font style attributes with the current font.
The attributes and likely values (the values aren't required to be in this set):</p>
                <verbatim font="typewriter">
 family : serif, sansserif, typewriter, caligraphic,
          fraktur, script
 series : medium, bold
 shape  : upright, italic, slanted, smallcaps
 size   : tiny, footnote, small, normal, large,
          Large, LARGE, huge, Huge
 color  : any named color, default is black
</verbatim>
                <p>Some families will only be used in math.
This function returns nothing so it can be easily used in beforeDigest, afterDigest.</p>
              </item>
              <item xml:id="A2.I20.i12">
                <tag>
                  <text font="typewriter">@tokens = roman($number);</text>
                </tag>
                <p><text/></p>
                <p>Formats the $<text font="typewriter">number</text> in (lowercase) roman numerals, returning a list of the tokens.</p>
              </item>
              <item xml:id="A2.I20.i13">
                <tag>
                  <text font="typewriter">@tokens = Roman($number);</text>
                </tag>
                <p><text/></p>
                <p>Formats the $<text font="typewriter">number</text> in (uppercase) roman numerals, returning a list of the tokens.</p>
              </item>
              <item xml:id="A2.I20.i14">
                <tag>$<text font="typewriter">tokens = Expand($tokens);</text></tag>
                <p><text/></p>
                <p>Expands the given $<text font="typewriter">tokens</text> according to current definitions.</p>
                <!-- %**** generated/LaTeXML_Package.tex Line 975 **** -->
              </item>
              <item xml:id="A2.I20.i15">
                <tag>
                  <text font="typewriter">@tokens = Invocation($cs,@args);</text>
                </tag>
                <p><text/></p>
                <p>Constructs a sequence of tokens that would invoke the token $<text font="typewriter">cs</text>
on the arguments.</p>
              </item>
              <item xml:id="A2.I20.i16">
                <tag>
                  <text font="typewriter">StartSemiVerbatim(); ... ; EndSemiVerbatim();</text>
                </tag>
                <p><text/></p>
                <p>Reads an argument delimted by braces, while disabling most TeX catcodes.</p>
              </item>
              <item xml:id="A2.I20.i17">
                <tag>
                  <text font="typewriter">DefParameterType($type,CODE($gullet,@values),%options);</text>
                </tag>
                <p><text/></p>
                <p>Defines a new Parameter type, $<text font="typewriter">type</text>, with CODE for its reader.</p>
                <p>Options are:</p>
                <description xml:id="A2.I20.I1">
                  <item xml:id="A2.I20.I1.i1">
                    <tag>reversion=&gt;CODE($arg,@values);</tag>
                    <p><text/></p>
                    <p>This CODE is responsible for converting a previously parsed argument back
<!-- %**** generated/LaTeXML_Package.tex Line 1000 **** -->into a sequence of Token's.</p>
                  </item>
                  <item xml:id="A2.I20.I1.i2">
                    <tag>optional=&gt;boolean</tag>
                    <p><text/></p>
                    <p>whether it is an error if no matching input is found.</p>
                  </item>
                  <item xml:id="A2.I20.I1.i3">
                    <tag>novalue=&gt;boolean</tag>
                    <p><text/></p>
                    <p>whether the value returned should contribute to argument lists, or
simply be passed over.</p>
                  </item>
                  <item xml:id="A2.I20.I1.i4">
                    <tag>semiverbatim=&gt;boolean</tag>
                    <p><text/></p>
                    <p>whether the catcode table should be modified before reading tokens.</p>
                  </item>
                </description>
              </item>
              <item xml:id="A2.I20.i18">
                <tag>
                  <text font="typewriter">DefColumnType($proto,$expansion);</text>
                </tag>
                <p><text/></p>
                <p>Defines a new column type for tabular and arrays.
$<text font="typewriter">proto</text> is the prototype for the pattern, analogous to the pattern
used for other definitions, except that macro being defined is a single character.
<!-- %**** generated/LaTeXML_Package.tex Line 1025 **** -->The $<text font="typewriter">expansion</text> is a string specifying what it should expand into,
typically more verbose column specification.</p>
              </item>
            </description>
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx7" labels="LABEL:LaTeXML::Parameters">
      <title>
        <text font="typewriter">LaTeXML::Parameters<indexmark><indexphrase key="latexmlparameters">LaTeXML::Parameters</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx7.p1">
        <p>Formal parameters,
including <text font="typewriter">LaTeXML::Parameter</text>.</p>
      </para>
      <subsection xml:id="A2.Sx7.SSx1" labels="LABEL:LaTeXML::Parameters_Description">
        <title>Description<indexmark><indexphrase key="latexmlparameters">LaTeXML::Parameters</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx7.SSx1.p1">
          <p>Provides a representation for the formal parameters of <ref labelref="LABEL:LaTeXML::Definition">LaTeXML::Definition</ref>s:</p>
        </para>
        <para xml:id="A2.Sx7.SSx1.p2">
          <description xml:id="A2.I21">
            <item xml:id="A2.I21.i1" labels="LABEL:LaTeXML::Parameter">
              <tag>
                <text font="typewriter">LaTeXML::Parameter</text>
              </tag>
              <p><text/></p>
              <p>represents an individual parameter.</p>
            </item>
          </description>
        </para>
        <subsubsection xml:id="A2.Sx7.SSx1.SSSx1" labels="LABEL:LaTeXML::Parameters_Parameters_Methods">
          <title>Parameters Methods<indexmark><indexphrase key="latexmlparameters">LaTeXML::Parameters</indexphrase><indexphrase key="parametersmethods">Parameters Methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx7.SSx1.SSSx1.p1">
            <description xml:id="A2.I22">
              <item xml:id="A2.I22.i1">
                <tag>$<text font="typewriter">parameters = parseParameters($prototype,$for);</text></tag>
                <p><text/>
<!-- %**** generated/LaTeXML_Parameters.tex Line 25 **** --></p>
                <p>Parses a string for a sequence of parameter specifications.
Each specification should be of the form</p>
                <verbatim font="typewriter">
 {}     reads a regular TeX argument, a sequence of
        tokens delimited by braces, or a single token.
 {spec} reads a regular TeX argument, then reparses it
        to match the given spec. The spec is parsed
        recursively, but usually should correspond to
        a single argument.
 [spec] reads an LaTeX-style optional argument. If the
        spec is of the form Default:stuff, then stuff
        would be the default value.
 Type   Reads an argument of the given type, where either
        Type has been declared, or there exists a ReadType
        function accessible from LaTeXML::Package::Pool.
 Type:value, or Type:value1:value2...    These forms
        pass additional Tokens to the reader function.
 OptionalType  Similar to Type, but it is not considered
        an error if the reader returns undef.
 SkipType  Similar to OptionalType, but the value returned
        from the reader is ignored, and does not occupy a
        position in the arguments list.
</verbatim>
                <!-- %**** generated/LaTeXML_Parameters.tex Line 50 **** -->
              </item>
              <item xml:id="A2.I22.i2">
                <tag>
                  <text font="typewriter">@parameters = $parameters-&gt;getParameters;</text>
                </tag>
                <p><text/></p>
                <p>Return the list of <text font="typewriter">LaTeXML::Parameter</text> contained in $<text font="typewriter">parameters</text>.</p>
              </item>
              <item xml:id="A2.I22.i3">
                <tag>
                  <text font="typewriter">@tokens = $parameters-&gt;revertArguments(@args);</text>
                </tag>
                <p><text/></p>
                <p>Return a list of <ref labelref="LABEL:LaTeXML::Token">LaTeXML::Token</ref> that would represent the arguments
such that they can be parsed by the Gullet.</p>
              </item>
              <item xml:id="A2.I22.i4">
                <tag>
                  <text font="typewriter">@args = $parameters-&gt;readArguments($gullet,$fordefn);</text>
                </tag>
                <p><text/></p>
                <p>Read the arguments according to this $<text font="typewriter">parameters</text> from the $<text font="typewriter">gullet</text>.
This takes into account any special forms of arguments, such as optional,
delimited, etc.</p>
              </item>
              <item xml:id="A2.I22.i5">
                <tag>
                  <text font="typewriter">@args = $parameters-&gt;readArgumentsAndDigest($stomach,$fordefn);</text>
                </tag>
                <p><text/></p>
                <p>Reads and digests the arguments according to this $<text font="typewriter">parameters</text>, in sequence.
this method is used by Constructors.</p>
              </item>
            </description>
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx8" labels="LABEL:LaTeXML::State">
      <title>
        <text font="typewriter">LaTeXML::State<indexmark><indexphrase key="latexmlstate">LaTeXML::State</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx8.p1">
        <p>Stores the current state of processing.</p>
      </para>
      <subsection xml:id="A2.Sx8.SSx1" labels="LABEL:LaTeXML::State_Description">
        <title>Description<indexmark><indexphrase key="latexmlstate">LaTeXML::State</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx8.SSx1.p1">
          <p>A <text font="typewriter">LaTeXML::State</text> object stores the current state of processing.
It recording catcodes, variables values, definitions and so forth,
as well as mimicing TeX's scoping rules.</p>
        </para>
        <subsubsection xml:id="A2.Sx8.SSx1.SSSx1" labels="LABEL:LaTeXML::State_Access_to_State_and_Processing">
          <title>Access to State and Processing<indexmark><indexphrase key="latexmlstate">LaTeXML::State</indexphrase><indexphrase key="accesstostateandprocessing">Access to State and Processing</indexphrase></indexmark></title>
          <para xml:id="A2.Sx8.SSx1.SSSx1.p1">
            <description xml:id="A2.I23">
              <item xml:id="A2.I23.i1">
                <tag>$<text font="typewriter">STATE-&gt;getStomach;</text></tag>
                <p><text/></p>
                <p>Returns the current Stomach used for digestion.</p>
              </item>
              <item xml:id="A2.I23.i2">
                <tag>$<text font="typewriter">STATE-&gt;getModel;</text></tag>
                <p><text/></p>
                <p>Returns the current Model representing the document model.</p>
                <!-- %**** generated/LaTeXML_State.tex Line 25 **** -->
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx8.SSx1.SSSx2" labels="LABEL:LaTeXML::State_Scoping">
          <title>Scoping<indexmark><indexphrase key="latexmlstate">LaTeXML::State</indexphrase><indexphrase key="scoping">Scoping</indexphrase></indexmark></title>
          <para xml:id="A2.Sx8.SSx1.SSSx2.p1">
            <p>The assignment methods, described below, generally take a $<text font="typewriter">scope</text> argument, which
determines how the assignment is made.  The allowed values and thier implications are:</p>
          </para>
          <para xml:id="A2.Sx8.SSx1.SSSx2.p2">
            <verbatim font="typewriter">
 global   : global assignment.
 local    : local assignment, within the current grouping.
 undef    : global if \global preceded, else local (default)
 &lt;name&gt;   : stores the assignment in a `scope' which
            can be loaded later.
</verbatim>
          </para>
          <para xml:id="A2.Sx8.SSx1.SSSx2.p3">
            <p>If no scoping is specified, then the assignment will be global
if a preceding <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">global</text> has set the global flag, otherwise
the value will be assigned within the current grouping.</p>
          </para>
          <para xml:id="A2.Sx8.SSx1.SSSx2.p4">
            <description xml:id="A2.I24">
              <item xml:id="A2.I24.i1">
                <tag>$<text font="typewriter">STATE-&gt;pushFrame;</text></tag>
                <p><text/></p>
                <p>Starts a new level of grouping.
<!-- %**** generated/LaTeXML_State.tex Line 50 **** -->Note that this is lower level than <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">bgroup</text>; See <ref labelref="LABEL:LaTeXML::Stomach">LaTeXML::Stomach</ref>.</p>
              </item>
              <item xml:id="A2.I24.i2">
                <tag>$<text font="typewriter">STATE-&gt;popFrame;</text></tag>
                <p><text/></p>
                <p>Ends the current level of grouping.
Note that this is lower level than <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">egroup</text>; See <ref labelref="LABEL:LaTeXML::Stomach">LaTeXML::Stomach</ref>.</p>
              </item>
              <item xml:id="A2.I24.i3">
                <tag>$<text font="typewriter">STATE-&gt;setPrefix($prefix);</text></tag>
                <p><text/></p>
                <p>Sets a prefix (eg. <text font="typewriter">global</text> for <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">global</text>, etc) for the next operation, if applicable.</p>
              </item>
              <item xml:id="A2.I24.i4">
                <tag>$<text font="typewriter">STATE-&gt;clearPrefixes;</text></tag>
                <p><text/></p>
                <p>Clears any prefixes.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx8.SSx1.SSSx3" labels="LABEL:LaTeXML::State_Values">
          <title>Values<indexmark><indexphrase key="latexmlstate">LaTeXML::State</indexphrase><indexphrase key="values">Values</indexphrase></indexmark></title>
          <para xml:id="A2.Sx8.SSx1.SSSx3.p1">
            <description xml:id="A2.I25">
              <item xml:id="A2.I25.i1">
                <tag>$<text font="typewriter">value = $STATE-&gt;lookupValue($name);</text></tag>
                <p><text/></p>
                <p>Lookup the current value associated with the the string $<text font="typewriter">name</text>.
<!-- %**** generated/LaTeXML_State.tex Line 75 **** --></p>
              </item>
              <item xml:id="A2.I25.i2">
                <tag>$<text font="typewriter">STATE-&gt;assignValue($name,$value,$scope);</text></tag>
                <p><text/></p>
                <p>Assign $value to be associated with the the string $<text font="typewriter">name</text>, according
to the given scoping rule.</p>
                <p>Values are also used to specify most configuration parameters (which can
therefor also be scoped).  The recognized configuration parameters are:</p>
                <verbatim font="typewriter">
 VERBOSITY         : the level of verbosity for debugging
                     output, with 0 being default.
 STRICT            : whether errors (eg. undefined macros)
                     are fatal.
 INCLUDE_COMMENTS  : whether to preserve comments in the
                     source, and to add occasional line
                     number comments. (Default true).
 PRESERVE_NEWLINES : whether newlines in the source should
                     be preserved (not 100% TeX-like).
                     By default this is true.
 SEARCHPATHS       : a list of directories to search for
                     sources, implementations, etc.
</verbatim>
              </item>
              <item xml:id="A2.I25.i3">
                <tag>$<text font="typewriter">STATE-&gt;pushValue($name,$value);</text></tag>
                <p><text/></p>
                <p>This is like <text font="typewriter">-&gt;assign</text>, but pushes a value onto the end of the stored value,
which should be a LIST reference.
Scoping is not handled here (yet?), it simply pushes the value
onto the last binding of $<text font="typewriter">name</text>.</p>
              </item>
              <item xml:id="A2.I25.i4">
                <tag>$<text font="typewriter">boole = $STATE-&gt;isValuebound($type,$name,$frame);</text></tag>
                <p><text/></p>
                <p>Returns whether the value $<text font="typewriter">name</text> is bound. If  $<text font="typewriter">frame</text> is given, check
whether it is bound in the $<text font="typewriter">frame</text>-th frame, with 0 being the top frame.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx8.SSx1.SSSx4" labels="LABEL:LaTeXML::State_Category_Codes">
          <title>Category Codes<indexmark><indexphrase key="latexmlstate">LaTeXML::State</indexphrase><indexphrase key="categorycodes">Category Codes</indexphrase></indexmark></title>
          <para xml:id="A2.Sx8.SSx1.SSSx4.p1">
            <description xml:id="A2.I26">
              <item xml:id="A2.I26.i1">
                <tag>$<text font="typewriter">value = $STATE-&gt;lookupCatcode($char);</text></tag>
                <p><text/></p>
                <p>Lookup the current catcode associated with the the character $<text font="typewriter">char</text>.</p>
              </item>
              <item xml:id="A2.I26.i2">
                <tag>$<text font="typewriter">STATE-&gt;assignCatcode($char,$catcode,$scope);</text></tag>
                <p><text/>
<!-- %**** generated/LaTeXML_State.tex Line 125 **** --></p>
                <p>Set $<text font="typewriter">char</text> to have the given $<text font="typewriter">catcode</text>, with the assignment made
according to the given scoping rule.</p>
                <p>This method is also used to specify whether a given character is
active in math mode, by using <text font="typewriter">math:$char</text> for the character,
and using a value of 1 to specify that it is active.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx8.SSx1.SSSx5" labels="LABEL:LaTeXML::State_Definitions">
          <title>Definitions<indexmark><indexphrase key="latexmlstate">LaTeXML::State</indexphrase><indexphrase key="definitions">Definitions</indexphrase></indexmark></title>
          <para xml:id="A2.Sx8.SSx1.SSSx5.p1">
            <description xml:id="A2.I27">
              <item xml:id="A2.I27.i1">
                <tag>$<text font="typewriter">defn = $STATE-&gt;lookupMeaning($token);</text></tag>
                <p><text/></p>
                <p>Get the "meaning" currently associated with $<text font="typewriter">token</text>,
either the definition (if it is a control sequence or active character)
or the token itself if it shouldn't be executable.
(See <ref labelref="LABEL:LaTeXML::Definition">LaTeXML::Definition</ref>)</p>
              </item>
              <item xml:id="A2.I27.i2">
                <tag>$<text font="typewriter">STATE-&gt;assignMeaning($token,$defn,$scope);</text></tag>
                <p><text/></p>
                <p>Set the definition associated with $<text font="typewriter">token</text> to $<text font="typewriter">defn</text>.
<!-- %**** generated/LaTeXML_State.tex Line 150 **** -->If $<text font="typewriter">globally</text> is true, it makes this the global definition
rather than bound within the current group.
(See <ref labelref="LABEL:LaTeXML::Definition">LaTeXML::Definition</ref>, and <ref labelref="LABEL:LaTeXML::Package">LaTeXML::Package</ref>)</p>
              </item>
              <item xml:id="A2.I27.i3">
                <tag>$<text font="typewriter">STATE-&gt;installDefinition($definition, $scope);</text></tag>
                <p><text/></p>
                <p>Install the definition into the current stack frame under its normal control sequence.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx8.SSx1.SSSx6" labels="LABEL:LaTeXML::State_Named_Scopes">
          <title>Named Scopes<indexmark><indexphrase key="latexmlstate">LaTeXML::State</indexphrase><indexphrase key="namedscopes">Named Scopes</indexphrase></indexmark></title>
          <para xml:id="A2.Sx8.SSx1.SSSx6.p1">
            <p>Named scopes can be used to set variables or redefine control sequences within
a scope other than the standard TeX grouping. For example, the LaTeX implementation
will automatically activate any definitions that were defined with a named
scope of, say "section:4", during the portion of the document that has
the section counter equal to 4.  Similarly, a scope named "label:foo" will
be activated in portions of the document where <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">label{foo}</text> is in effect.</p>
          </para>
          <para xml:id="A2.Sx8.SSx1.SSSx6.p2">
            <description xml:id="A2.I28">
              <item xml:id="A2.I28.i1">
                <tag>$<text font="typewriter">STATE-&gt;activateScope($scope);</text></tag>
                <p><text/></p>
                <p>Installs any definitions that were associated with the named $<text font="typewriter">scope</text>.
<!-- %**** generated/LaTeXML_State.tex Line 175 **** -->Note that these are placed in the current grouping frame and will disappear when that
grouping ends.</p>
              </item>
              <item xml:id="A2.I28.i2">
                <tag>$<text font="typewriter">STATE-&gt;deactivateScope($scope);</text></tag>
                <p><text/></p>
                <p>Removes any definitions that were associated with the named $<text font="typewriter">scope</text>.
Normally not needed, since a scopes definitions are locally bound anyway.</p>
              </item>
              <item xml:id="A2.I28.i3">
                <tag>$<text font="typewriter">sp = $STATE-&gt;convertUnit($unit);</text></tag>
                <p><text/></p>
                <p>Converts a TeX unit of the form <text font="typewriter">'10em'</text> (or whatever TeX unit) into
scaled points.  (Defined here since in principle it could track the
size of ems and so forth (but currently doesn't))</p>
              </item>
            </description>
          </para>
          <!-- %\section{Digestion-related Modules} -->
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx9" labels="LABEL:LaTeXML::Token">
      <title>
        <text font="typewriter">LaTeXML::Token<indexmark><indexphrase key="latexmltoken">LaTeXML::Token</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx9.p1">
        <p>Representation of a token,
and <text font="typewriter">LaTeXML::Tokens</text>, representing lists of tokens.</p>
      </para>
      <subsection xml:id="A2.Sx9.SSx1" labels="LABEL:LaTeXML::Token_Description">
        <title>Description<indexmark><indexphrase key="latexmltoken">LaTeXML::Token</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx9.SSx1.p1">
          <p>This module defines Tokens (<text font="typewriter">LaTeXML::Token</text>, <text font="typewriter">LaTeXML::Tokens</text>)
that get created during tokenization and  expansion.</p>
        </para>
        <para xml:id="A2.Sx9.SSx1.p2">
          <p>A <text font="typewriter">LaTeXML::Token</text> represents a TeX token which is a pair of a character or string and
a category code.  A <text font="typewriter">LaTeXML::Tokens</text> is a list of tokens (and also implements the API
of a <ref labelref="LABEL:LaTeXML::Mouth">LaTeXML::Mouth</ref> so that tokens can be read from a list).</p>
        </para>
        <subsubsection xml:id="A2.Sx9.SSx1.SSSx1" labels="LABEL:LaTeXML::Token_Common_methods">
          <title>Common methods<indexmark><indexphrase key="latexmltoken">LaTeXML::Token</indexphrase><indexphrase key="commonmethods">Common methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx9.SSx1.SSSx1.p1">
            <p>The following methods apply to all objects.</p>
          </para>
          <para xml:id="A2.Sx9.SSx1.SSSx1.p2">
            <description xml:id="A2.I29">
              <!-- %**** generated/LaTeXML_Token.tex Line 25 **** -->
              <item xml:id="A2.I29.i1">
                <tag>
                  <text font="typewriter">@tokens = $object-&gt;unlist;</text>
                </tag>
                <p><text/></p>
                <p>Return a list of the tokens making up this $<text font="typewriter">object</text>.</p>
              </item>
              <item xml:id="A2.I29.i2">
                <tag>$<text font="typewriter">string = $object-&gt;toString;</text></tag>
                <p><text/></p>
                <p>Return a string representing $<text font="typewriter">object</text>.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx9.SSx1.SSSx2" labels="LABEL:LaTeXML::Token_Token_methods">
          <title>Token methods<indexmark><indexphrase key="latexmltoken">LaTeXML::Token</indexphrase><indexphrase key="tokenmethods">Token methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx9.SSx1.SSSx2.p1">
            <p>The following methods are specific to <text font="typewriter">LaTeXML::Token</text>.</p>
          </para>
          <para xml:id="A2.Sx9.SSx1.SSSx2.p2">
            <description xml:id="A2.I30">
              <item xml:id="A2.I30.i1">
                <tag>$<text font="typewriter">string = $token-&gt;getCSName;</text></tag>
                <p><text/></p>
                <p>Return the string or character part of the $<text font="typewriter">token</text>; for the special category
codes, returns the standard string (eg. <text font="typewriter">T_BEGIN-</text>getCSName&gt;returns "{").</p>
              </item>
              <item xml:id="A2.I30.i2">
                <tag>$<text font="typewriter">string = $token-&gt;getString;</text></tag>
                <p><text/>
<!-- %**** generated/LaTeXML_Token.tex Line 50 **** --></p>
                <p>Return the string or character part of the $<text font="typewriter">token</text>.</p>
              </item>
              <item xml:id="A2.I30.i3">
                <tag>$<text font="typewriter">code = $token-&gt;getCharcode;</text></tag>
                <p><text/></p>
                <p>Return the character code of the character part of the $<text font="typewriter">token</text>,
or 256 if it is a control sequence.</p>
              </item>
              <item xml:id="A2.I30.i4">
                <tag>$<text font="typewriter">code = $token-&gt;getCatcode;</text></tag>
                <p><text/></p>
                <p>Return the catcode of the $<text font="typewriter">token</text>.</p>
              </item>
              <item xml:id="A2.I30.i5">
                <tag>$<text font="typewriter">defn = $token-&gt;getDefinition;</text></tag>
                <p><text/></p>
                <p>Return the current definition associated with $<text font="typewriter">token</text> in $<text font="typewriter">STATE</text>, or
undef if none.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx9.SSx1.SSSx3" labels="LABEL:LaTeXML::Token_Tokens_methods LABEL:LaTeXML::Tokens">
          <title>Tokens methods<indexmark><indexphrase key="latexmltoken">LaTeXML::Token</indexphrase><indexphrase key="tokensmethods">Tokens methods</indexphrase></indexmark></title>
          <!-- %**** generated/LaTeXML_Token.tex Line 75 **** -->
          <para xml:id="A2.Sx9.SSx1.SSSx3.p1">
            <p>The following methods are specific to <text font="typewriter">LaTeXML::Tokens</text>.</p>
          </para>
          <para xml:id="A2.Sx9.SSx1.SSSx3.p2">
            <description xml:id="A2.I31">
              <item xml:id="A2.I31.i1">
                <tag>$<text font="typewriter">tokenscopy = $tokens-&gt;clone;</text></tag>
                <p><text/></p>
                <p>Return a shallow copy of the $tokens.  This is useful before reading from a <text font="typewriter">LaTeXML::Tokens</text>.</p>
              </item>
              <item xml:id="A2.I31.i2">
                <tag>$<text font="typewriter">token = $tokens-&gt;readToken;</text></tag>
                <p><text/></p>
                <p>Returns (and remove) the next token from $tokens.  This is part of the public API of <ref labelref="LABEL:LaTeXML::Mouth">LaTeXML::Mouth</ref>
so that a <text font="typewriter">LaTeXML::Tokens</text> can serve as a <ref labelref="LABEL:LaTeXML::Mouth">LaTeXML::Mouth</ref>.</p>
              </item>
            </description>
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx10" labels="LABEL:LaTeXML::Box">
      <title>
        <text font="typewriter">LaTeXML::Box<indexmark><indexphrase key="latexmlbox">LaTeXML::Box</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx10.p1">
        <p>Representations of digested objects.</p>
      </para>
      <subsection xml:id="A2.Sx10.SSx1" labels="LABEL:LaTeXML::Box_Description">
        <title>Description<indexmark><indexphrase key="latexmlbox">LaTeXML::Box</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx10.SSx1.p1">
          <p>These represent various kinds of digested objects</p>
        </para>
        <para xml:id="A2.Sx10.SSx1.p2">
          <description xml:id="A2.I32">
            <item xml:id="A2.I32.i1">
              <tag>
                <text font="typewriter">LaTeXML::Box</text>
              </tag>
              <p><text/></p>
              <p>represents text in a particular font;</p>
            </item>
            <item xml:id="A2.I32.i2" labels="LABEL:LaTeXML::MathBox">
              <tag>
                <text font="typewriter">LaTeXML::MathBox</text>
              </tag>
              <p><text/></p>
              <p>represents a math token in a particular font;</p>
              <!-- %**** generated/LaTeXML_Box.tex Line 25 **** -->
            </item>
            <item xml:id="A2.I32.i3" labels="LABEL:LaTeXML::List">
              <tag>
                <text font="typewriter">LaTeXML::List</text>
              </tag>
              <p><text/></p>
              <p>represents a sequence of digested things in text;</p>
            </item>
            <item xml:id="A2.I32.i4" labels="LABEL:LaTeXML::MathList">
              <tag>
                <text font="typewriter">LaTeXML::MathList</text>
              </tag>
              <p><text/></p>
              <p>represents a sequence of digested things in math;</p>
            </item>
            <item xml:id="A2.I32.i5" labels="LABEL:LaTeXML::Whatsit">
              <tag>
                <text font="typewriter">LaTeXML::Whatsit</text>
              </tag>
              <p><text/></p>
              <p>represents a digested object that can generate arbitrary elements in the XML Document.</p>
            </item>
          </description>
        </para>
        <subsubsection xml:id="A2.Sx10.SSx1.SSSx1" labels="LABEL:LaTeXML::Box_Common_Methods">
          <title>Common Methods<indexmark><indexphrase key="latexmlbox">LaTeXML::Box</indexphrase><indexphrase key="commonmethods">Common Methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx10.SSx1.SSSx1.p1">
            <p>All these classes extend <ref labelref="LABEL:LaTeXML::Object">LaTeXML::Object</ref> and so implement
<!-- %**** generated/LaTeXML_Box.tex Line 50 **** -->the <text font="typewriter">stringify</text> and <text font="typewriter">equals</text> operations.</p>
          </para>
          <para xml:id="A2.Sx10.SSx1.SSSx1.p2">
            <description xml:id="A2.I33">
              <item xml:id="A2.I33.i1">
                <tag>$<text font="typewriter">font = $digested-&gt;getFont;</text></tag>
                <p><text/></p>
                <p>Returns the font used by $<text font="typewriter">digested</text>.</p>
              </item>
              <item xml:id="A2.I33.i2">
                <tag>$<text font="typewriter">boole = $digested-&gt;isMath;</text></tag>
                <p><text/></p>
                <p>Returns whether $<text font="typewriter">digested</text> was created in math mode.</p>
              </item>
              <item xml:id="A2.I33.i3">
                <tag>
                  <text font="typewriter">@boxes = $digested-&gt;unlist;</text>
                </tag>
                <p><text/></p>
                <p>Returns a list of the boxes contained in $<text font="typewriter">digested</text>.
It is also defined for the Boxes and Whatsit (which just
return themselves) so they can stand-in for a List.</p>
              </item>
              <item xml:id="A2.I33.i4">
                <tag>$<text font="typewriter">string = $digested-&gt;toString;</text></tag>
                <p><text/></p>
                <p>Returns a string representing this $<text font="typewriter">digested</text>.</p>
                <!-- %**** generated/LaTeXML_Box.tex Line 75 **** -->
              </item>
              <item xml:id="A2.I33.i5">
                <tag>$<text font="typewriter">string = $digested-&gt;revert;</text></tag>
                <p><text/></p>
                <p>Reverts the box to the list of <text font="typewriter">Token</text>s that created (or could have
created) it.</p>
              </item>
              <item xml:id="A2.I33.i6">
                <tag>$<text font="typewriter">string = $digested-&gt;getLocator;</text></tag>
                <p><text/></p>
                <p>Get a string describing the location in the original source that gave rise
to $<text font="typewriter">digested</text>.</p>
              </item>
              <item xml:id="A2.I33.i7">
                <tag>$<text font="typewriter">digested-&gt;beAbsorbed($document);</text></tag>
                <p><text/></p>
                <p>$<text font="typewriter">digested</text> should get itself absorbed into the $<text font="typewriter">document</text> in whatever way
is apppropriate.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx10.SSx1.SSSx2" labels="LABEL:LaTeXML::Box_Box_Methods">
          <title>Box Methods<indexmark><indexphrase key="latexmlbox">LaTeXML::Box</indexphrase><indexphrase key="boxmethods">Box Methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx10.SSx1.SSSx2.p1">
            <p>The following methods are specific to <text font="typewriter">LaTeXML::Box</text> and <text font="typewriter">LaTeXML::MathBox</text>.</p>
          </para>
          <para xml:id="A2.Sx10.SSx1.SSSx2.p2">
            <description xml:id="A2.I34">
              <!-- %**** generated/LaTeXML_Box.tex Line 100 **** -->
              <item xml:id="A2.I34.i1">
                <tag>$<text font="typewriter">string = $box-&gt;getString;</text></tag>
                <p><text/></p>
                <p>Returns the string part of the $<text font="typewriter">box</text>.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx10.SSx1.SSSx3" labels="LABEL:LaTeXML::Box_Whatsit_Methods">
          <title>Whatsit Methods<indexmark><indexphrase key="latexmlbox">LaTeXML::Box</indexphrase><indexphrase key="whatsitmethods">Whatsit Methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx10.SSx1.SSSx3.p1">
            <p>Note that the font is stored in the data properties under 'font'.</p>
          </para>
          <para xml:id="A2.Sx10.SSx1.SSSx3.p2">
            <description xml:id="A2.I35">
              <item xml:id="A2.I35.i1">
                <tag>$<text font="typewriter">defn = $whatsit-&gt;getDefinition;</text></tag>
                <p><text/></p>
                <p>Returns the <ref labelref="LABEL:LaTeXML::Definition">LaTeXML::Definition</ref> responsible for creating the $<text font="typewriter">whatsit</text>.</p>
              </item>
              <item xml:id="A2.I35.i2">
                <tag>$<text font="typewriter">value = $whatsit-&gt;getProperty($key);</text></tag>
                <p><text/></p>
                <p>Returns the value associated with $<text font="typewriter">key</text> in the $<text font="typewriter">whatsit</text>'s property list.</p>
              </item>
              <item xml:id="A2.I35.i3">
                <tag>$<text font="typewriter">whatsit-&gt;setProperty($key,$value);</text></tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML_Box.tex Line 125 **** -->
                <p>Sets the $<text font="typewriter">value</text> associated with the $<text font="typewriter">key</text> in the $<text font="typewriter">whatsit</text>'s property list.</p>
              </item>
              <item xml:id="A2.I35.i4">
                <tag>$<text font="typewriter">props = $whatsit-&gt;getProperties();</text></tag>
                <p><text/></p>
                <p>Returns the hash of properties stored on this Whatsit.
(Note that this hash is modifiable).</p>
              </item>
              <item xml:id="A2.I35.i5">
                <tag>$<text font="typewriter">props = $whatsit-&gt;setProperties(%keysvalues);</text></tag>
                <p><text/></p>
                <p>Sets several properties, like setProperty.</p>
              </item>
              <item xml:id="A2.I35.i6">
                <tag>$<text font="typewriter">list = $whatsit-&gt;getArg($n);</text></tag>
                <p><text/></p>
                <p>Returns the $<text font="typewriter">n</text>-th argument (starting from 1) for this $<text font="typewriter">whatsit</text>.</p>
              </item>
              <item xml:id="A2.I35.i7">
                <tag>
                  <text font="typewriter">@args = $whatsit-&gt;getArgs;</text>
                </tag>
                <p><text/></p>
                <p>Returns the list of arguments for this $<text font="typewriter">whatsit</text>.</p>
              </item>
              <item xml:id="A2.I35.i8">
                <tag>$<text font="typewriter">whatsit-&gt;setArgs(@args);</text></tag>
                <p><text/>
<!-- %**** generated/LaTeXML_Box.tex Line 150 **** --></p>
                <p>Sets the list of arguments for this $<text font="typewriter">whatsit</text> to <text font="typewriter">@args</text> (each arg should be
a <text font="typewriter">LaTeXML::List</text> or <text font="typewriter">LaTeXML::MathList</text>).</p>
              </item>
              <item xml:id="A2.I35.i9">
                <tag>$<text font="typewriter">list = $whatsit-&gt;getBody;</text></tag>
                <p><text/></p>
                <p>Return the body for this $<text font="typewriter">whatsit</text>. This is only defined for environments or
top-level math formula.  The body is stored in the properties under 'body'.</p>
              </item>
              <item xml:id="A2.I35.i10">
                <tag>$<text font="typewriter">whatsit-&gt;setBody(@body);</text></tag>
                <p><text/></p>
                <p>Sets the body of the $<text font="typewriter">whatsit</text> to the boxes in <text font="typewriter">@body</text>.  The last $<text font="typewriter">box</text> in <text font="typewriter">@body</text>
is assumed to represent the `trailer', that is the result of the invocation
that closed the environment or math.  It is stored separately in the properties
under 'trailer'.</p>
              </item>
              <item xml:id="A2.I35.i11">
                <tag>$<text font="typewriter">list = $whatsit-&gt;getTrailer;</text></tag>
                <p><text/></p>
                <p>Return the trailer for this $<text font="typewriter">whatsit</text>. See <text font="typewriter">setBody</text>.</p>
              </item>
            </description>
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx11" labels="LABEL:LaTeXML::Number">
      <title>
        <text font="typewriter">LaTeXML::Number<indexmark><indexphrase key="latexmlnumber">LaTeXML::Number</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx11.p1">
        <p>Representation of numbers, dimensions, skips and glue.</p>
      </para>
      <subsection xml:id="A2.Sx11.SSx1" labels="LABEL:LaTeXML::Number_Description">
        <title>Description<indexmark><indexphrase key="latexmlnumber">LaTeXML::Number</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx11.SSx1.p1">
          <p>This module defines various dimension and number-like data objects</p>
        </para>
        <para xml:id="A2.Sx11.SSx1.p2">
          <description xml:id="A2.I36">
            <item xml:id="A2.I36.i1">
              <tag>
                <text font="typewriter">LaTeXML::Number</text>
              </tag>
              <p><text/></p>
              <p>represents numbers,</p>
            </item>
            <item xml:id="A2.I36.i2" labels="LABEL:LaTeXML::Float">
              <tag>
                <text font="typewriter">LaTeXML::Float</text>
              </tag>
              <p><text/></p>
              <p>represents floating-point numbers,</p>
              <!-- %**** generated/LaTeXML_Number.tex Line 25 **** -->
            </item>
            <item xml:id="A2.I36.i3" labels="LABEL:LaTeXML::Dimension">
              <tag>
                <text font="typewriter">LaTeXML::Dimension</text>
              </tag>
              <p><text/></p>
              <p>represents dimensions,</p>
            </item>
            <item xml:id="A2.I36.i4" labels="LABEL:LaTeXML::MuDimension">
              <tag>
                <text font="typewriter">LaTeXML::MuDimension</text>
              </tag>
              <p><text/></p>
              <p>represents math dimensions,</p>
            </item>
            <item xml:id="A2.I36.i5" labels="LABEL:LaTeXML::Glue">
              <tag>
                <text font="typewriter">LaTeXML::Glue</text>
              </tag>
              <p><text/></p>
              <p>represents glue (skips),</p>
            </item>
            <item xml:id="A2.I36.i6" labels="LABEL:LaTeXML::MuGlue">
              <tag>
                <text font="typewriter">LaTeXML::MuGlue</text>
              </tag>
              <p><text/></p>
              <!-- %**** generated/LaTeXML_Number.tex Line 50 **** -->
              <p>represents math glue,</p>
            </item>
            <item xml:id="A2.I36.i7" labels="LABEL:LaTeXML::Pair">
              <tag>
                <text font="typewriter">LaTeXML::Pair</text>
              </tag>
              <p><text/></p>
              <p>represents pairs of numbers</p>
            </item>
            <item xml:id="A2.I36.i8" labels="LABEL:LaTeXML::PairList">
              <tag>
                <text font="typewriter">LaTeXML::Pairlist</text>
              </tag>
              <p><text/></p>
              <p>represents list of pairs.</p>
            </item>
          </description>
        </para>
        <subsubsection xml:id="A2.Sx11.SSx1.SSSx1" labels="LABEL:LaTeXML::Number_Common_methods">
          <title>Common methods<indexmark><indexphrase key="latexmlnumber">LaTeXML::Number</indexphrase><indexphrase key="commonmethods">Common methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx11.SSx1.SSSx1.p1">
            <p>The following methods apply to all objects.</p>
          </para>
          <para xml:id="A2.Sx11.SSx1.SSSx1.p2">
            <description xml:id="A2.I37">
              <item xml:id="A2.I37.i1">
                <tag>
                  <text font="typewriter">@tokens = $object-&gt;unlist;</text>
                </tag>
                <p><text/>
<!-- %**** generated/LaTeXML_Number.tex Line 75 **** --></p>
                <p>Return a list of the tokens making up this $<text font="typewriter">object</text>.</p>
              </item>
              <item xml:id="A2.I37.i2">
                <tag>$<text font="typewriter">string = $object-&gt;toString;</text></tag>
                <p><text/></p>
                <p>Return a string representing $<text font="typewriter">object</text>.</p>
              </item>
              <item xml:id="A2.I37.i3">
                <tag>$<text font="typewriter">string = $object-&gt;ptValue;</text></tag>
                <p><text/></p>
                <p>Return a value representing $<text font="typewriter">object</text> without the measurement unit (pt)
with limited decimal places.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx11.SSx1.SSSx2" labels="LABEL:LaTeXML::Number_Numerics_methods">
          <title>Numerics methods<indexmark><indexphrase key="latexmlnumber">LaTeXML::Number</indexphrase><indexphrase key="numericsmethods">Numerics methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx11.SSx1.SSSx2.p1">
            <p>These methods apply to the various numeric objects</p>
          </para>
          <para xml:id="A2.Sx11.SSx1.SSSx2.p2">
            <description xml:id="A2.I38">
              <item xml:id="A2.I38.i1">
                <tag>$<text font="typewriter">n = $object-&gt;valueOf;</text></tag>
                <p><text/></p>
                <p>Return the value in scaled points (ignoring shrink and stretch, if any).
<!-- %**** generated/LaTeXML_Number.tex Line 100 **** --></p>
              </item>
              <item xml:id="A2.I38.i2">
                <tag>$<text font="typewriter">n = $object-&gt;smaller($other);</text></tag>
                <p><text/></p>
                <p>Return $<text font="typewriter">object</text> or $<text font="typewriter">other</text>, whichever is smaller</p>
              </item>
              <item xml:id="A2.I38.i3">
                <tag>$<text font="typewriter">n = $object-&gt;larger($other);</text></tag>
                <p><text/></p>
                <p>Return $<text font="typewriter">object</text> or $<text font="typewriter">other</text>, whichever is larger</p>
              </item>
              <item xml:id="A2.I38.i4">
                <tag>$<text font="typewriter">n = $object-&gt;absolute;</text></tag>
                <p><text/></p>
                <p>Return an object representing the absolute value of the $<text font="typewriter">object</text>.</p>
              </item>
              <item xml:id="A2.I38.i5">
                <tag>$<text font="typewriter">n = $object-&gt;sign;</text></tag>
                <p><text/></p>
                <p>Return an integer: -1 for negatives, 0 for 0 and 1 for positives</p>
              </item>
              <item xml:id="A2.I38.i6">
                <tag>$<text font="typewriter">n = $object-&gt;negate;</text></tag>
                <p><text/></p>
                <p>Return an object representing the negative of the $<text font="typewriter">object</text>.
<!-- %**** generated/LaTeXML_Number.tex Line 125 **** --></p>
              </item>
              <item xml:id="A2.I38.i7">
                <tag>$<text font="typewriter">n = $object-&gt;add($other);</text></tag>
                <p><text/></p>
                <p>Return an object representing the sum of $<text font="typewriter">object</text> and $<text font="typewriter">other</text></p>
              </item>
              <item xml:id="A2.I38.i8">
                <tag>$<text font="typewriter">n = $object-&gt;subtract($other);</text></tag>
                <p><text/></p>
                <p>Return an object representing the difference between $<text font="typewriter">object</text> and $<text font="typewriter">other</text></p>
              </item>
              <item xml:id="A2.I38.i9">
                <tag>$<text font="typewriter">n = $object-&gt;multiply($n);</text></tag>
                <p><text/></p>
                <p>Return an object representing the product of $<text font="typewriter">object</text> and $<text font="typewriter">n</text> (a regular number).</p>
              </item>
            </description>
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx12" labels="LABEL:LaTeXML::Font">
      <title>
        <text font="typewriter">LaTeXML::Font<indexmark><indexphrase key="latexmlfont">LaTeXML::Font</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx12.p1">
        <p>Representation of fonts,
along with the specialization <text font="typewriter">LaTeXML::MathFont</text>.</p>
      </para>
      <subsection xml:id="A2.Sx12.SSx1" labels="LABEL:LaTeXML::Font_Description">
        <title>Description<indexmark><indexphrase key="latexmlfont">LaTeXML::Font</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx12.SSx1.p1">
          <p>This module defines Font objects.
I'm not completely happy with the arrangement, or
maybe just the use of it, so I'm not going to document extensively at this point.</p>
        </para>
        <para xml:id="A2.Sx12.SSx1.p2">
          <p><text font="typewriter">LaTeXML::Font</text> and <text font="typewriter">LaTeXML::MathFont</text> represent fonts
(the latter, fonts in math-mode, obviously) in LaTeXML.</p>
        </para>
        <para xml:id="A2.Sx12.SSx1.p3">
          <p>The attributes are</p>
        </para>
        <para xml:id="A2.Sx12.SSx1.p4">
          <verbatim font="typewriter">
 family : serif, sansserif, typewriter, caligraphic,
          fraktur, script
 series : medium, bold
 shape  : upright, italic, slanted, smallcaps
 size   : tiny, footnote, small, normal, large,
          Large, LARGE, huge, Huge
 color  : any named color, default is black
</verbatim>
        </para>
        <para xml:id="A2.Sx12.SSx1.p5">
          <p>They are usually merged against the current font, attempting to mimic the,
sometimes counter-intuitive, way that TeX does it,  particularly for math</p>
        </para>
        <subsubsection xml:id="A2.Sx12.SSx1.SSSx1" labels="LABEL:LaTeXML::Font_LaTeXML::MathFont LABEL:LaTeXML::MathFont">
          <title>
            <text font="typewriter">LaTeXML::MathFont<indexmark><indexphrase key="latexmlfont">LaTeXML::Font</indexphrase><indexphrase key="latexmlmathfont">LaTeXML::MathFont</indexphrase></indexmark></text>
          </title>
          <para xml:id="A2.Sx12.SSx1.SSSx1.p1">
            <p><text font="typewriter">LaTeXML::MathFont</text> supports $<text font="typewriter">font-</text>specialize($string);&gt;for
computing a font reflecting how the specific $<text font="typewriter">string</text> would be printed when
$<text font="typewriter">font</text> is active; This (attempts to) handle the curious ways that lower case
greek often doesn't get a different font.  In particular, it recognizes the
following classes of strings: single latin letter, single uppercase greek character,
single lowercase greek character, digits, and others.</p>
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx13" labels="LABEL:LaTeXML::Mouth">
      <title>
        <text font="typewriter">LaTeXML::Mouth<indexmark><indexphrase key="latexmlmouth">LaTeXML::Mouth</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx13.p1">
        <p>Tokenize the input.</p>
      </para>
      <subsection xml:id="A2.Sx13.SSx1" labels="LABEL:LaTeXML::Mouth_Description">
        <title>Description<indexmark><indexphrase key="latexmlmouth">LaTeXML::Mouth</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx13.SSx1.p1">
          <p>A <text font="typewriter">LaTeXML::Mouth</text> (and subclasses) is responsible for <text font="italic">tokenizing</text>, ie.
converting plain text and strings into <ref labelref="LABEL:LaTeXML::Token">LaTeXML::Token</ref>s according to the
current category codes (catcodes) stored in the <text font="typewriter">LaTeXML::State</text>.</p>
        </para>
        <para xml:id="A2.Sx13.SSx1.p2">
          <description xml:id="A2.I39">
            <item xml:id="A2.I39.i1" labels="LABEL:LaTeXML::FileMouth">
              <tag>
                <text font="typewriter">LaTeXML::FileMouth</text>
              </tag>
              <p><text/></p>
              <p>specializes <text font="typewriter">LaTeXML::Mouth</text> to tokenize from a file.</p>
            </item>
            <item xml:id="A2.I39.i2" labels="LABEL:LaTeXML::StyleMouth">
              <tag>
                <text font="typewriter">LaTeXML::StyleMouth</text>
              </tag>
              <p><text/></p>
              <!-- %**** generated/LaTeXML_Mouth.tex Line 25 **** -->
              <p>further specializes <text font="typewriter">LaTeXML::FileMouth</text> for processing
style files, setting the catcode for <text font="typewriter">@</text> and ignoring comments.</p>
            </item>
            <item xml:id="A2.I39.i3" labels="LABEL:LaTeXML::PerlMouth">
              <tag>
                <text font="typewriter">LaTeXML::PerlMouth</text>
              </tag>
              <p><text/></p>
              <p>is not really a Mouth in the above sense, but is used
to definitions from perl modules with exensions <text font="typewriter">.ltxml</text> and <text font="typewriter">.latexml</text>.</p>
            </item>
          </description>
        </para>
        <subsubsection xml:id="A2.Sx13.SSx1.SSSx1" labels="LABEL:LaTeXML::Mouth_Creating_Mouths">
          <title>Creating Mouths<indexmark><indexphrase key="latexmlmouth">LaTeXML::Mouth</indexphrase><indexphrase key="creatingmouths">Creating Mouths</indexphrase></indexmark></title>
          <para xml:id="A2.Sx13.SSx1.SSSx1.p1">
            <description xml:id="A2.I40">
              <item xml:id="A2.I40.i1">
                <tag>$<text font="typewriter">mouth = LaTeXML::Mouth-&gt;new($string);</text></tag>
                <p><text/></p>
                <p>Creates a new Mouth reading from $<text font="typewriter">string</text>.</p>
              </item>
              <item xml:id="A2.I40.i2">
                <tag>$<text font="typewriter">mouth = LaTeXML::FileMouth-&gt;new($pathname);</text></tag>
                <p><text/></p>
                <p>Creates a new FileMouth to read from the given file.</p>
                <!-- %**** generated/LaTeXML_Mouth.tex Line 50 **** -->
              </item>
              <item xml:id="A2.I40.i3">
                <tag>$<text font="typewriter">mouth = LaTeXML::StyleMouth-&gt;new($pathname);</text></tag>
                <p><text/></p>
                <p>Creates a new StyleMouth to read from the given style file.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx13.SSx1.SSSx2" labels="LABEL:LaTeXML::Mouth_Methods">
          <title>Methods<indexmark><indexphrase key="latexmlmouth">LaTeXML::Mouth</indexphrase><indexphrase key="methods">Methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx13.SSx1.SSSx2.p1">
            <description xml:id="A2.I41">
              <item xml:id="A2.I41.i1">
                <tag>$<text font="typewriter">token = $mouth-&gt;readToken;</text></tag>
                <p><text/></p>
                <p>Returns the next <ref labelref="LABEL:LaTeXML::Token">LaTeXML::Token</ref> from the source.</p>
              </item>
              <item xml:id="A2.I41.i2">
                <tag>$<text font="typewriter">boole = $mouth-&gt;hasMoreInput;</text></tag>
                <p><text/></p>
                <p>Returns whether there is more data to read.</p>
              </item>
              <item xml:id="A2.I41.i3">
                <tag>$<text font="typewriter">string = $mouth-&gt;getLocator($long);</text></tag>
                <p><text/></p>
                <p>Return a description of current position in the source, for reporting errors.</p>
              </item>
              <item xml:id="A2.I41.i4">
                <tag>$<text font="typewriter">tokens = $mouth-&gt;readTokens($until);</text></tag>
                <p><text/>
<!-- %**** generated/LaTeXML_Mouth.tex Line 75 **** --></p>
                <p>Reads tokens until one matches $<text font="typewriter">until</text> (comparing the character, but not catcode).
This is useful for the <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math><text font="typewriter">verb</text> command.</p>
              </item>
              <item xml:id="A2.I41.i5">
                <tag>$<text font="typewriter">lines = $mouth-&gt;readRawLines($endline,$exact);</text></tag>
                <p><text/></p>
                <p>Reads raw (untokenized) lines from $<text font="typewriter">mouth</text> until a line matching $<text font="typewriter">endline</text>
is found.
If $<text font="typewriter">exact</text> is true, $<text font="typewriter">endline</text> is matched exactly, with no leading or trailing
data (like in the c&lt;comment&gt;package).
Otherwise, the match is done like with the c&lt;verbatim&gt;environment;
any text preceding $<text font="typewriter">endline</text> is returned as the last line, and any characters
after $<text font="typewriter">endline</text> remains in the mouth to be tokenized.</p>
              </item>
            </description>
            <!-- %**** manual.tex Line 750 **** -->
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx14" labels="LABEL:LaTeXML::Gullet">
      <title>
        <text font="typewriter">LaTeXML::Gullet<indexmark><indexphrase key="latexmlgullet">LaTeXML::Gullet</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx14.p1">
        <p>Expands expandable tokens and parses common token sequences.</p>
      </para>
      <subsection xml:id="A2.Sx14.SSx1" labels="LABEL:LaTeXML::Gullet_Description">
        <title>Description<indexmark><indexphrase key="latexmlgullet">LaTeXML::Gullet</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx14.SSx1.p1">
          <p>A <text font="typewriter">LaTeXML::Gullet</text> reads tokens (<ref labelref="LABEL:LaTeXML::Token">LaTeXML::Token</ref>) from a <ref labelref="LABEL:LaTeXML::Mouth">LaTeXML::Mouth</ref>.
It is responsible for expanding macros and expandable control sequences,
if the current definition associated with the token in the <ref labelref="LABEL:LaTeXML::State">LaTeXML::State</ref>
is an <ref labelref="LABEL:LaTeXML::Expandable">LaTeXML::Expandable</ref> definition. The <text font="typewriter">LaTeXML::Gullet</text> also provides a
variety of methods for reading  various types of input such as arguments, optional arguments,
as well as for parsing <ref labelref="LABEL:LaTeXML::Number">LaTeXML::Number</ref>, <ref labelref="LABEL:LaTeXML::Dimension">LaTeXML::Dimension</ref>, etc, according
to TeX's rules.</p>
        </para>
        <subsubsection xml:id="A2.Sx14.SSx1.SSSx1" labels="LABEL:LaTeXML::Gullet_Managing_Input">
          <title>Managing Input<indexmark><indexphrase key="latexmlgullet">LaTeXML::Gullet</indexphrase><indexphrase key="managinginput">Managing Input</indexphrase></indexmark></title>
          <para xml:id="A2.Sx14.SSx1.SSSx1.p1">
            <description xml:id="A2.I42">
              <item xml:id="A2.I42.i1">
                <tag>$<text font="typewriter">gullet-&gt;input($name,$types,%options);</text></tag>
                <p><text/></p>
                <p>Input the file named $<text font="typewriter">name</text>; Searches for matching files in the
current <text font="typewriter">searchpath</text> with an extension being one of  $<text font="typewriter">types</text> (an array
of strings). If the found file has a perl extension (pm, ltxml, or latexml),
<!-- %**** generated/LaTeXML_Gullet.tex Line 25 **** -->it will be executed (loaded).  If the found file has a TeX extension
(tex, sty, cls) it will be opened and latexml will prepare to read
from it.</p>
              </item>
              <item xml:id="A2.I42.i2">
                <tag>$<text font="typewriter">gullet-&gt;openMouth($mouth, $noautoclose);</text></tag>
                <p><text/></p>
                <p>Is this public? Prepares to read tokens from $<text font="typewriter">mouth</text>.
If $noautoclose is true, the Mouth will not be automatically closed
when it is exhausted.</p>
              </item>
              <item xml:id="A2.I42.i3">
                <tag>$<text font="typewriter">gullet-&gt;closeMouth;</text></tag>
                <p><text/></p>
                <p>Is this public? Finishes reading from the current mouth, and
reverts to the one in effect before the last openMouth.</p>
              </item>
              <item xml:id="A2.I42.i4">
                <tag>$<text font="typewriter">gullet-&gt;flush;</text></tag>
                <p><text/></p>
                <p>Is this public? Clears all inputs.</p>
              </item>
              <item xml:id="A2.I42.i5">
                <tag>$<text font="typewriter">gullet-&gt;getLocator;</text></tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML_Gullet.tex Line 50 **** -->
                <p>Returns a string describing the current location in the input stream.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx14.SSx1.SSSx2" labels="LABEL:LaTeXML::Gullet_Low-level_methods">
          <title>Low-level methods<indexmark><indexphrase key="latexmlgullet">LaTeXML::Gullet</indexphrase><indexphrase key="lowlevelmethods">Low-level methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx14.SSx1.SSSx2.p1">
            <description xml:id="A2.I43">
              <item xml:id="A2.I43.i1">
                <tag>$<text font="typewriter">tokens = $gullet-&gt;expandTokens($tokens);</text></tag>
                <p><text/></p>
                <p>Return the <ref labelref="LABEL:LaTeXML::Tokens">LaTeXML::Tokens</ref> resulting from expanding all the tokens in $<text font="typewriter">tokens</text>.
This is actually only used in a few circumstances where the arguments to
an expandable need explicit expansion; usually expansion happens at the right time.</p>
              </item>
              <item xml:id="A2.I43.i2">
                <tag>
                  <text font="typewriter">@tokens = $gullet-&gt;neutralizeTokens(@tokens);</text>
                </tag>
                <p><text/></p>
                <p>Another unusual method: Used for things like <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math>edef and token registers, to
inhibit further expansion of control sequences and proper spawning of register tokens.</p>
              </item>
              <item xml:id="A2.I43.i3">
                <tag>$<text font="typewriter">token = $gullet-&gt;readToken;</text></tag>
                <p><text/></p>
                <p>Return the next token from the input source, or undef if there is no more input.</p>
              </item>
              <item xml:id="A2.I43.i4">
                <tag>$<text font="typewriter">token = $gullet-&gt;readXToken($toplevel);</text></tag>
                <p><text/>
<!-- %**** generated/LaTeXML_Gullet.tex Line 75 **** --></p>
                <p>Return the next unexpandable token from the input source, or undef if there is no more input.
If the next token is expandable, it is expanded, and its expansion is reinserted into the input.</p>
              </item>
              <item xml:id="A2.I43.i5">
                <tag>$<text font="typewriter">gullet-&gt;unread(@tokens);</text></tag>
                <p><text/></p>
                <p>Push the <text font="typewriter">@tokens</text> back into the input stream to be re-read.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx14.SSx1.SSSx3" labels="LABEL:LaTeXML::Gullet_Mid-level_methods">
          <title>Mid-level methods<indexmark><indexphrase key="latexmlgullet">LaTeXML::Gullet</indexphrase><indexphrase key="midlevelmethods">Mid-level methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx14.SSx1.SSSx3.p1">
            <description xml:id="A2.I44">
              <item xml:id="A2.I44.i1">
                <tag>$<text font="typewriter">token = $gullet-&gt;readNonSpace;</text></tag>
                <p><text/></p>
                <p>Read and return the next non-space token from the input after discarding any spaces.</p>
              </item>
              <item xml:id="A2.I44.i2">
                <tag>$<text font="typewriter">gullet-&gt;skipSpaces;</text></tag>
                <p><text/></p>
                <p>Skip the next spaces from the input.</p>
              </item>
              <item xml:id="A2.I44.i3">
                <tag>$<text font="typewriter">gullet-&gt;skip1Space;</text></tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML_Gullet.tex Line 100 **** -->
                <p>Skip the next token from the input if it is a space.</p>
              </item>
              <item xml:id="A2.I44.i4">
                <tag>$<text font="typewriter">tokens = $gullet-&gt;readBalanced;</text></tag>
                <p><text/></p>
                <p>Read a sequence of tokens from the input until the balancing '}' (assuming the '{' has
already been read). Returns a <ref labelref="LABEL:LaTeXML::Tokens">LaTeXML::Tokens</ref>.</p>
              </item>
              <item xml:id="A2.I44.i5">
                <tag>$<text font="typewriter">boole = $gullet-&gt;ifNext($token);</text></tag>
                <p><text/></p>
                <p>Returns true if the next token in the input matches $<text font="typewriter">token</text>;
the possibly matching token remains in the input.</p>
              </item>
              <item xml:id="A2.I44.i6">
                <tag>$<text font="typewriter">tokens = $gullet-&gt;readMatch(@choices);</text></tag>
                <p><text/></p>
                <p>Read and return whichever of <text font="typewriter">@choices</text> (each are <ref labelref="LABEL:LaTeXML::Tokens">LaTeXML::Tokens</ref>)
matches the input, or undef if none do.</p>
              </item>
              <item xml:id="A2.I44.i7">
                <tag>$<text font="typewriter">keyword = $gullet-&gt;readKeyword(@keywords);</text></tag>
                <p><text/></p>
                <p>Read and return whichever of <text font="typewriter">@keywords</text> (each a string) matches the input, or undef
if none do.  This is similar to readMatch, but case and catcodes are ignored.
<!-- %**** generated/LaTeXML_Gullet.tex Line 125 **** -->Also, leading spaces are skipped.</p>
              </item>
              <item xml:id="A2.I44.i8">
                <tag>$<text font="typewriter">tokens = $gullet-&gt;readUntil(@delims);</text></tag>
                <p><text/></p>
                <p>Read and return a (balanced) sequence of <ref labelref="LABEL:LaTeXML::Tokens">LaTeXML::Tokens</ref> until  matching one of the tokens
in <text font="typewriter">@delims</text>.  In a list context, it also returns which of the delimiters ended the sequence.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx14.SSx1.SSSx4" labels="LABEL:LaTeXML::Gullet_High-level_methods">
          <title>High-level methods<indexmark><indexphrase key="latexmlgullet">LaTeXML::Gullet</indexphrase><indexphrase key="highlevelmethods">High-level methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx14.SSx1.SSSx4.p1">
            <description xml:id="A2.I45">
              <item xml:id="A2.I45.i1">
                <tag>$<text font="typewriter">tokens = $gullet-&gt;readArg;</text></tag>
                <p><text/></p>
                <p>Read and return a TeX argument; the next Token or Tokens (if surrounded by braces).</p>
              </item>
              <item xml:id="A2.I45.i2">
                <tag>$<text font="typewriter">tokens = $gullet-&gt;readOptional($default);</text></tag>
                <p><text/></p>
                <p>Read and return a LaTeX optional argument; returns $<text font="typewriter">default</text> if there is no '[',
otherwise the contents of the [].</p>
              </item>
              <item xml:id="A2.I45.i3">
                <tag>$<text font="typewriter">thing = $gullet-&gt;readValue($type);</text></tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML_Gullet.tex Line 150 **** -->
                <p>Reads an argument of a given type: one of 'Number', 'Dimension', 'Glue', 'MuGlue' or 'any'.</p>
              </item>
              <item xml:id="A2.I45.i4">
                <tag>$<text font="typewriter">value = $gullet-&gt;readRegisterValue($type);</text></tag>
                <p><text/></p>
                <p>Read a control sequence token (and possibly it's arguments) that names a register,
and return the value.  Returns undef if the next token isn't such a register.</p>
              </item>
              <item xml:id="A2.I45.i5">
                <tag>$<text font="typewriter">number = $gullet-&gt;readNumber;</text></tag>
                <p><text/></p>
                <p>Read a <ref labelref="LABEL:LaTeXML::Number">LaTeXML::Number</ref> according to TeX's rules of the various things that
can be used as a numerical value.</p>
              </item>
              <item xml:id="A2.I45.i6">
                <tag>$<text font="typewriter">dimension = $gullet-&gt;readDimension;</text></tag>
                <p><text/></p>
                <p>Read a <ref labelref="LABEL:LaTeXML::Dimension">LaTeXML::Dimension</ref> according to TeX's rules of the various things that
can be used as a dimension value.</p>
              </item>
              <item xml:id="A2.I45.i7">
                <tag>$<text font="typewriter">mudimension = $gullet-&gt;readMuDimension;</text></tag>
                <p><text/></p>
                <p>Read a <ref labelref="LABEL:LaTeXML::MuDimension">LaTeXML::MuDimension</ref> according to TeX's rules of the various things that
can be used as a mudimension value.
<!-- %**** generated/LaTeXML_Gullet.tex Line 175 **** --></p>
              </item>
              <item xml:id="A2.I45.i8">
                <tag>$<text font="typewriter">glue = $gullet-&gt;readGlue;</text></tag>
                <p><text/></p>
                <p>Read a  <ref labelref="LABEL:LaTeXML::Glue">LaTeXML::Glue</ref> according to TeX's rules of the various things that
can be used as a glue value.</p>
              </item>
              <item xml:id="A2.I45.i9">
                <tag>$<text font="typewriter">muglue = $gullet-&gt;readMuGlue;</text></tag>
                <p><text/></p>
                <p>Read a <ref labelref="LABEL:LaTeXML::MuGlue">LaTeXML::MuGlue</ref> according to TeX's rules of the various things that
can be used as a muglue value.</p>
              </item>
            </description>
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx15" labels="LABEL:LaTeXML::Stomach">
      <title>
        <text font="typewriter">LaTeXML::Stomach<indexmark><indexphrase key="latexmlstomach">LaTeXML::Stomach</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx15.p1">
        <p>Digests tokens into boxes, lists, etc.</p>
      </para>
      <subsection xml:id="A2.Sx15.SSx1" labels="LABEL:LaTeXML::Stomach_Description">
        <title>Description<indexmark><indexphrase key="latexmlstomach">LaTeXML::Stomach</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx15.SSx1.p1">
          <p><text font="typewriter">LaTeXML::Stomach</text> digests tokens read from a <ref labelref="LABEL:LaTeXML::Gullet">LaTeXML::Gullet</ref>
(they will have already been expanded).</p>
        </para>
        <para xml:id="A2.Sx15.SSx1.p2">
          <p>There are basically four cases when digesting a <ref labelref="LABEL:LaTeXML::Token">LaTeXML::Token</ref>:</p>
        </para>
        <para xml:id="A2.Sx15.SSx1.p3">
          <description xml:id="A2.I46">
            <item xml:id="A2.I46.i1">
              <tag>A plain character</tag>
              <p><text/></p>
              <p>is simply converted to a <ref labelref="LABEL:LaTeXML::Box">LaTeXML::Box</ref> (or <ref labelref="LABEL:LaTeXML::MathBox">LaTeXML::MathBox</ref> in math mode),
recording the current <ref labelref="LABEL:LaTeXML::Font">LaTeXML::Font</ref>.</p>
            </item>
            <item xml:id="A2.I46.i2">
              <tag>A primitive</tag>
              <p><text/>
<!-- %**** generated/LaTeXML_Stomach.tex Line 25 **** --></p>
              <p>If a control sequence represents <ref labelref="LABEL:LaTeXML::Primitive">LaTeXML::Primitive</ref>, the primitive is invoked, executing its
stored subroutine.  This is typically done for side effect (changing the state in the <ref labelref="LABEL:LaTeXML::State">LaTeXML::State</ref>),
although they may also contribute digested material.
As with macros, any arguments to the primitive are read from the <ref labelref="LABEL:LaTeXML::Gullet">LaTeXML::Gullet</ref>.</p>
            </item>
            <item xml:id="A2.I46.i3">
              <tag>Grouping (or environment bodies)</tag>
              <p><text/></p>
              <p>are collected into a <ref labelref="LABEL:LaTeXML::List">LaTeXML::List</ref>.</p>
            </item>
            <item xml:id="A2.I46.i4">
              <tag>Constructors</tag>
              <p><text/></p>
              <p>A special class of control sequence, called a <ref labelref="LABEL:LaTeXML::Constructor">LaTeXML::Constructor</ref> produces a
<ref labelref="LABEL:LaTeXML::Whatsit">LaTeXML::Whatsit</ref> which remembers the control sequence and arguments that
created it, and defines its own translation into <text font="typewriter">XML</text> elements, attributes and data.
Arguments to a constructor are read from the gullet and also digested.</p>
            </item>
          </description>
        </para>
        <subsubsection xml:id="A2.Sx15.SSx1.SSSx1" labels="LABEL:LaTeXML::Stomach_Digestion">
          <title>Digestion<indexmark><indexphrase key="latexmlstomach">LaTeXML::Stomach</indexphrase><indexphrase key="digestion">Digestion</indexphrase></indexmark></title>
          <para xml:id="A2.Sx15.SSx1.SSSx1.p1">
            <description xml:id="A2.I47">
              <item xml:id="A2.I47.i1">
                <tag>$<text font="typewriter">list = $stomach-&gt;digestNextBody;</text></tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML_Stomach.tex Line 50 **** -->
                <p>Return the digested <ref labelref="LABEL:LaTeXML::List">LaTeXML::List</ref> after reading and digesting a `body'
from the its Gullet.  The body extends until the current
level of boxing or environment is closed.</p>
              </item>
              <item xml:id="A2.I47.i2">
                <tag>$<text font="typewriter">list = $stomach-&gt;digest($tokens);</text></tag>
                <p><text/></p>
                <p>Return the <ref labelref="LABEL:LaTeXML::List">LaTeXML::List</ref> resuting from digesting the given tokens.
This is typically used to digest arguments to primitives or
constructors.</p>
              </item>
              <item xml:id="A2.I47.i3">
                <tag>
                  <text font="typewriter">@boxes = $stomach-&gt;invokeToken($token);</text>
                </tag>
                <p><text/></p>
                <p>Invoke the given (expanded) token.  If it corresponds to a
Primitive or Constructor, the definition will be invoked,
reading any needed arguments fromt he current input source.
Otherwise, the token will be digested.
A List of Box's, Lists, Whatsit's is returned.</p>
              </item>
              <item xml:id="A2.I47.i4">
                <tag>
                  <text font="typewriter">@boxes = $stomach-&gt;regurgitate;</text>
                </tag>
                <p><text/></p>
                <p>Removes and returns a list of the boxes already digested
at the current level.  This peculiar beast is used
<!-- %**** generated/LaTeXML_Stomach.tex Line 75 **** -->by things like <Math mode="inline" tex="\backslash" text="backslash"><XMath><XMTok name="backslash" role="MULOP">\</XMTok></XMath></Math>choose (which is a Primitive in TeX, but
a Constructor in LaTeXML).</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx15.SSx1.SSSx2" labels="LABEL:LaTeXML::Stomach_Grouping">
          <title>Grouping<indexmark><indexphrase key="latexmlstomach">LaTeXML::Stomach</indexphrase><indexphrase key="grouping">Grouping</indexphrase></indexmark></title>
          <para xml:id="A2.Sx15.SSx1.SSSx2.p1">
            <description xml:id="A2.I48">
              <item xml:id="A2.I48.i1">
                <tag>$<text font="typewriter">stomach-&gt;bgroup;</text></tag>
                <p><text/></p>
                <p>Begin a new level of binding by pushing a new stack frame,
and a new level of boxing the digested output.</p>
              </item>
              <item xml:id="A2.I48.i2">
                <tag>$<text font="typewriter">stomach-&gt;egroup;</text></tag>
                <p><text/></p>
                <p>End a level of binding by popping the last stack frame,
undoing whatever bindings appeared there, and also
decrementing the level of boxing.</p>
              </item>
              <item xml:id="A2.I48.i3">
                <tag>$<text font="typewriter">stomach-&gt;begingroup;</text></tag>
                <p><text/></p>
                <p>Begin a new level of binding by pushing a new stack frame.</p>
                <!-- %**** generated/LaTeXML_Stomach.tex Line 100 **** -->
              </item>
              <item xml:id="A2.I48.i4">
                <tag>$<text font="typewriter">stomach-&gt;endgroup;</text></tag>
                <p><text/></p>
                <p>End a level of binding by popping the last stack frame,
undoing whatever bindings appeared there.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx15.SSx1.SSSx3" labels="LABEL:LaTeXML::Stomach_Modes">
          <title>Modes<indexmark><indexphrase key="latexmlstomach">LaTeXML::Stomach</indexphrase><indexphrase key="modes">Modes</indexphrase></indexmark></title>
          <para xml:id="A2.Sx15.SSx1.SSSx3.p1">
            <description xml:id="A2.I49">
              <item xml:id="A2.I49.i1">
                <tag>$<text font="typewriter">stomach-&gt;beginMode($mode);</text></tag>
                <p><text/></p>
                <p>Begin processing in $<text font="typewriter">mode</text>; one of 'text', 'display-math' or 'inline-math'.
This also begins a new level of grouping and switches to a font
appropriate for the mode.</p>
              </item>
              <item xml:id="A2.I49.i2">
                <tag>$<text font="typewriter">stomach-&gt;endMode($mode);</text></tag>
                <p><text/></p>
                <p>End processing in $<text font="typewriter">mode</text>; an error is signalled if $<text font="typewriter">stomach</text> is not
currently in $<text font="typewriter">mode</text>.  This also ends a level of grouping.</p>
              </item>
            </description>
          </para>
          <!-- %\section{Construction-related Modules} -->
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx16" labels="LABEL:LaTeXML::Document">
      <title>
        <text font="typewriter">LaTeXML::Document<indexmark><indexphrase key="latexmldocument">LaTeXML::Document</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx16.p1">
        <p>Represents an XML document under construction.</p>
      </para>
      <subsection xml:id="A2.Sx16.SSx1" labels="LABEL:LaTeXML::Document_Description">
        <title>Description<indexmark><indexphrase key="latexmldocument">LaTeXML::Document</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx16.SSx1.p1">
          <p>A <text font="typewriter">LaTeXML::Document</text> constructs an XML document by
absorbing the digested <ref labelref="LABEL:LaTeXML::List">LaTeXML::List</ref> (from a <ref labelref="LABEL:LaTeXML::Stomach">LaTeXML::Stomach</ref>),
Generally, the <ref labelref="LABEL:LaTeXML::Box">LaTeXML::Box</ref>s and <ref labelref="LABEL:LaTeXML::List">LaTeXML::List</ref>s create text nodes,
whereas the <ref labelref="LABEL:LaTeXML::Whatsit">LaTeXML::Whatsit</ref>s create <text font="typewriter">XML</text> document fragments, elements
and attributes according to the defining <ref labelref="LABEL:LaTeXML::Constructor">LaTeXML::Constructor</ref>.</p>
        </para>
        <para xml:id="A2.Sx16.SSx1.p2">
          <p>The <text font="typewriter">LaTeXML::Document</text> maintains a current insertion point for where material will
be added. The <ref labelref="LABEL:LaTeXML::Model">LaTeXML::Model</ref>, derived from various declarations and document type,
is consulted to determine whether an insertion is allowed and when elements may need
to be automatically opened or closed in order to carry out a given insertion.
For example, a <text font="typewriter">subsection</text> element will typically be closed automatically when it
is attempted to open a <text font="typewriter">section</text> element.</p>
        </para>
        <!-- %**** generated/LaTeXML_Document.tex Line 25 **** -->
        <para xml:id="A2.Sx16.SSx1.p3">
          <p>In the methods described here, the term $<text font="typewriter">qname</text> is used for XML qualified names.
These are tag names with a namespace prefix.  The prefix should be one
registered with the current Model, for use within the code.  This prefix is
not necessarily the same as the one used in any DTD, but should be mapped
to the a Namespace URI that was registered for the DTD.</p>
        </para>
        <para xml:id="A2.Sx16.SSx1.p4">
          <p>The arguments named $<text font="typewriter">node</text> are an XML::LibXML node.</p>
        </para>
        <subsubsection xml:id="A2.Sx16.SSx1.SSSx1" labels="LABEL:LaTeXML::Document_Accessors">
          <title>Accessors<indexmark><indexphrase key="latexmldocument">LaTeXML::Document</indexphrase><indexphrase key="accessors">Accessors</indexphrase></indexmark></title>
          <para xml:id="A2.Sx16.SSx1.SSSx1.p1">
            <description xml:id="A2.I50">
              <item xml:id="A2.I50.i1">
                <tag>$<text font="typewriter">doc = $document-&gt;getDocument;</text></tag>
                <p><text/></p>
                <p>Returns the <text font="typewriter">XML::LibXML::Document</text> currently being constructed.</p>
              </item>
              <item xml:id="A2.I50.i2">
                <tag>$<text font="typewriter">node = $document-&gt;getNode;</text></tag>
                <p><text/></p>
                <p>Returns the node at the current insertion point during construction.  This node
is considered still to be `open'; any insertions will go into it (if possible).
The node will be an <text font="typewriter">XML::LibXML::Element</text>, <text font="typewriter">XML::LibXML::Text</text>
or, initially, <text font="typewriter">XML::LibXML::Document</text>.
<!-- %**** generated/LaTeXML_Document.tex Line 50 **** --></p>
              </item>
              <item xml:id="A2.I50.i3">
                <tag>$<text font="typewriter">node = $document-&gt;getElement;</text></tag>
                <p><text/></p>
                <p>Returns the closest ancestor to the current insertion point that is an Element.</p>
              </item>
              <item xml:id="A2.I50.i4">
                <tag>$<text font="typewriter">document-&gt;setNode($node);</text></tag>
                <p><text/></p>
                <p>Sets the current insertion point to be  $<text font="typewriter">node</text>.
This should be rarely used, if at all; The construction methods of document
generally maintain the notion of insertion point automatically.
This may be useful to allow insertion into a different part of the document,
but you probably want to set the insertion point back to the previous
node, afterwards.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx16.SSx1.SSSx2" labels="LABEL:LaTeXML::Document_Construction_Methods">
          <title>Construction Methods<indexmark><indexphrase key="latexmldocument">LaTeXML::Document</indexphrase><indexphrase key="constructionmethods">Construction Methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx16.SSx1.SSSx2.p1">
            <description xml:id="A2.I51">
              <item xml:id="A2.I51.i1">
                <tag>$<text font="typewriter">document-&gt;absorb($digested);</text></tag>
                <p><text/></p>
                <p>Absorb the $<text font="typewriter">digested</text> object into the document at the current insertion point
according to its type.  Various of the the other methods are invoked as needed,
and document nodes may be automatically opened or closed according to the document
<!-- %**** generated/LaTeXML_Document.tex Line 75 **** -->model.</p>
              </item>
              <item xml:id="A2.I51.i2">
                <tag>$<text font="typewriter">xmldoc = $document-&gt;finalize;</text></tag>
                <p><text/></p>
                <p>This method finalizes the document by cleaning up various temporary
attributes, and returns the <ref href="http://search.cpan.org/search?query=XML%3A%3ALibXML%3A%3ADocument&amp;mode=module">XML::LibXML::Document</ref> that was constructed.</p>
              </item>
              <item xml:id="A2.I51.i3">
                <tag>$<text font="typewriter">document-&gt;openText($text,$font);</text></tag>
                <p><text/></p>
                <p>Open a text node in font $<text font="typewriter">font</text>, performing any required automatic opening
and closing of intermedate nodes (including those needed for font changes)
and inserting the string $<text font="typewriter">text</text> into it.</p>
              </item>
              <item xml:id="A2.I51.i4">
                <tag>$<text font="typewriter">document-&gt;insertMathToken($string,%attributes);</text></tag>
                <p><text/></p>
                <p>Insert a math token (XMTok) containing the string $<text font="typewriter">string</text> with the given attributes.
Useful attributes would be name, role, font.
Returns the newly inserted node.</p>
              </item>
              <item xml:id="A2.I51.i5">
                <tag>$<text font="typewriter">document-&gt;openElement($qname,%attributes);</text></tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML_Document.tex Line 100 **** -->
                <p>Open an element, named $<text font="typewriter">qname</text> and with the given attributes.
This will be inserted into the current node while  performing
any required automatic opening and closing of intermedate nodes.
The new element is returned, and also becomes the current insertion point.
An error (fatal if in <text font="typewriter">Strict</text> mode) is signalled if there is no allowed way
to insert such an element into the current node.</p>
              </item>
              <item xml:id="A2.I51.i6">
                <tag>$<text font="typewriter">document-&gt;closeElement($qname);</text></tag>
                <p><text/></p>
                <p>Close the closest open element named $<text font="typewriter">qname</text> including any intermedate nodes that
may be automatically closed.  If that is not possible, signal an error.
The closed node's parent becomes the current node.
This method returns the closed node.</p>
              </item>
              <item xml:id="A2.I51.i7">
                <tag>$<text font="typewriter">node = $document-&gt;isOpenable($qname);</text></tag>
                <p><text/></p>
                <p>Check whether it is possible to open a $<text font="typewriter">qname</text> element
at the current insertion point.</p>
              </item>
              <item xml:id="A2.I51.i8">
                <tag>$<text font="typewriter">node = $document-&gt;isCloseable($qname);</text></tag>
                <p><text/></p>
                <p>Check whether it is possible to close a $<text font="typewriter">qname</text> element,
<!-- %**** generated/LaTeXML_Document.tex Line 125 **** -->returning the node that would be closed if possible,
otherwise undef.</p>
              </item>
              <item xml:id="A2.I51.i9">
                <tag>$<text font="typewriter">document-&gt;maybeCloseElement($qname);</text></tag>
                <p><text/></p>
                <p>Close a $<text font="typewriter">qname</text> element, if it is possible to do so,
returns the closed node if it was found, else undef.</p>
              </item>
              <item xml:id="A2.I51.i10">
                <tag>$<text font="typewriter">document-&gt;insertElement($qname,$content,%attributes);</text></tag>
                <p><text/></p>
                <p>This is a shorthand for creating an element $<text font="typewriter">qname</text> (with given attributes),
absorbing $<text font="typewriter">content</text> from within that new node, and then closing it.
The $<text font="typewriter">content</text> must be digested material, either a single box, or
an array of boxes.  This method returns the newly created node,
although it will no longer be the current insertion point.</p>
              </item>
              <item xml:id="A2.I51.i11">
                <tag>$<text font="typewriter">document-&gt;insertComment($text);</text></tag>
                <p><text/></p>
                <p>Insert, and return, a comment with the given $<text font="typewriter">text</text> into the current node.</p>
              </item>
              <item xml:id="A2.I51.i12">
                <tag>$<text font="typewriter">document-&gt;insertPI($op,%attributes);</text></tag>
                <p><text/>
<!-- %**** generated/LaTeXML_Document.tex Line 150 **** --></p>
                <p>Insert, and return,  a ProcessingInstruction into the current node.</p>
              </item>
              <item xml:id="A2.I51.i13">
                <tag>$<text font="typewriter">document-&gt;addAttribute($key=&gt;$value);</text></tag>
                <p><text/></p>
                <p>Add the given attribute to the nearest node that is allowed to have it.</p>
              </item>
            </description>
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx17" labels="LABEL:LaTeXML::Model">
      <title>
        <text font="typewriter">LaTeXML::Model<indexmark><indexphrase key="latexmlmodel">LaTeXML::Model</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx17.p1">
        <p>Represents the Document Model</p>
      </para>
      <subsection xml:id="A2.Sx17.SSx1" labels="LABEL:LaTeXML::Model_Description">
        <title>Description<indexmark><indexphrase key="latexmlmodel">LaTeXML::Model</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx17.SSx1.p1">
          <p><text font="typewriter">LaTeXML::Model</text> encapsulates information about the document model to be used
in converting a digested document into XML by the <ref labelref="LABEL:LaTeXML::Document">LaTeXML::Document</ref>.
This information is based on the document schema (eg, DTD, RelaxNG),
but is also modified by package modules; thus the model may not be
complete until digestion is completed.</p>
        </para>
        <para xml:id="A2.Sx17.SSx1.p2">
          <p>The kinds of information that is relevant is not only the content model
(what each element can contain contain), but also SGML-like information
such as whether an element can be implicitly opened or closed, if needed
to insert a new element into the document.</p>
        </para>
        <para xml:id="A2.Sx17.SSx1.p3">
          <p>Currently, only an approximation to the schema is understood and used.
<!-- %**** generated/LaTeXML_Model.tex Line 25 **** -->For example, we only record that certain elements can appear within another;
we don't preserve any information about required order or number of instances.</p>
        </para>
        <subsubsection xml:id="A2.Sx17.SSx1.SSSx1" labels="LABEL:LaTeXML::Model_Model_Creation">
          <title>Model Creation<indexmark><indexphrase key="latexmlmodel">LaTeXML::Model</indexphrase><indexphrase key="modelcreation">Model Creation</indexphrase></indexmark></title>
          <para xml:id="A2.Sx17.SSx1.SSSx1.p1">
            <description xml:id="A2.I52">
              <item xml:id="A2.I52.i1">
                <tag>$<text font="typewriter">model = LaTeXML::Model-&gt;new(%options);</text></tag>
                <p><text/></p>
                <p>Creates a new model.  The only useful option is
<text font="typewriter">permissive=&gt;1</text> which ignores any DTD and allows the
document to be built without following any particular content model.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx17.SSx1.SSSx2" labels="LABEL:LaTeXML::Model_Document_Type">
          <title>Document Type<indexmark><indexphrase key="latexmlmodel">LaTeXML::Model</indexphrase><indexphrase key="documenttype">Document Type</indexphrase></indexmark></title>
          <para xml:id="A2.Sx17.SSx1.SSSx2.p1">
            <description xml:id="A2.I53">
              <item xml:id="A2.I53.i1">
                <tag>$<text font="typewriter">model-&gt;setDocType($rootname,$publicid,$systemid,%namespaces);</text></tag>
                <p><text/></p>
                <p>Declares the expected rootelement, the public and system ID's of the document type
to be used in the final document.  The hash <text font="typewriter">%namespaces</text> specifies
the namespace prefixes that are expected to be found in the DTD, along with
the associated namespace URI.  These prefixes may be different from
the prefixes used in implementation code (eg. in ltxml files; see RegisterNamespace).
The generated document will use the namespaces and prefixes defined here.</p>
                <!-- %**** generated/LaTeXML_Model.tex Line 50 **** -->
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx17.SSx1.SSSx3" labels="LABEL:LaTeXML::Model_Namespaces">
          <title>Namespaces<indexmark><indexphrase key="latexmlmodel">LaTeXML::Model</indexphrase><indexphrase key="namespaces">Namespaces</indexphrase></indexmark></title>
          <para xml:id="A2.Sx17.SSx1.SSSx3.p1">
            <p>Note that there are <text font="italic">two</text> namespace mappings between namespace URIs and prefixes
that are relevant to <ref labelref="LABEL:LaTeXML">LaTeXML</ref>.
The `code' mapping is the one used in code implementing packages, and in
particular, constructors defined within those packages.  The prefix <text font="typewriter">ltx</text>
is used consistently to refer to <ref labelref="LABEL:LaTeXML">LaTeXML</ref>'s own namespace
(<text font="typewriter">http://dlmf.nist.gov/LaTeXML)</text>.</p>
          </para>
          <para xml:id="A2.Sx17.SSx1.SSSx3.p2">
            <p>The other mapping, the `document' mapping, is used in the created document;
this may be different from the `code' mapping in order to accommodate
DTDs, for example, or for use by other applications that expect
a rigid namespace mapping.</p>
          </para>
          <para xml:id="A2.Sx17.SSx1.SSSx3.p3">
            <description xml:id="A2.I54">
              <item xml:id="A2.I54.i1">
                <tag>$<text font="typewriter">model-&gt;registerNamespace($prefix,$namespace_url);</text></tag>
                <p><text/></p>
                <p>Register $<text font="typewriter">prefix</text> to stand for the namespace $<text font="typewriter">namespace_url</text>.
This prefix can then be used to create nodes in constructors and Document methods.
It will also be recognized in XPath expressions.
<!-- %**** generated/LaTeXML_Model.tex Line 75 **** --></p>
              </item>
              <item xml:id="A2.I54.i2">
                <tag>$<text font="typewriter">model-&gt;getNamespacePrefix($namespace);</text></tag>
                <p><text/></p>
                <p>Return the prefix to use for the given $<text font="typewriter">namespace</text>.</p>
              </item>
              <item xml:id="A2.I54.i3">
                <tag>$<text font="typewriter">model-&gt;getNamespace($prefix);</text></tag>
                <p><text/></p>
                <p>Return the namespace url for the given $<text font="typewriter">prefix</text>.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx17.SSx1.SSSx4" labels="LABEL:LaTeXML::Model_Model_queries">
          <title>Model queries<indexmark><indexphrase key="latexmlmodel">LaTeXML::Model</indexphrase><indexphrase key="modelqueries">Model queries</indexphrase></indexmark></title>
          <para xml:id="A2.Sx17.SSx1.SSSx4.p1">
            <description xml:id="A2.I55">
              <item xml:id="A2.I55.i1">
                <tag>$<text font="typewriter">boole = $model-&gt;canContain($tag,$childtag);</text></tag>
                <p><text/></p>
                <p>Returns whether an element with qualified name $<text font="typewriter">tag</text> can contain an element
with qualified name $<text font="typewriter">childtag</text>.
The tag names #PCDATA, #Document, #Comment and #ProcessingInstruction
are specially recognized.</p>
              </item>
              <item xml:id="A2.I55.i2">
                <tag>$<text font="typewriter">auto = $model-&gt;canContainIndirect($tag,$childtag);</text></tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML_Model.tex Line 100 **** -->
                <p>Checks whether an element with qualified name $<text font="typewriter">tag</text> could contain an element
with qualified name $<text font="typewriter">childtag</text>, provided an `autoOpen'able element $<text font="typewriter">auto</text>
were inserted in $<text font="typewriter">tag</text>.</p>
              </item>
              <item xml:id="A2.I55.i3">
                <tag>$<text font="typewriter">boole = $model-&gt;canContainSomehow($tag,$childtag);</text></tag>
                <p><text/></p>
                <p>Returns whether an element with qualified name $<text font="typewriter">tag</text> could contain an element
with qualified name $<text font="typewriter">childtag</text>, either directly or indirectly.</p>
              </item>
              <item xml:id="A2.I55.i4">
                <tag>$<text font="typewriter">boole = $model-&gt;canAutoClose($tag);</text></tag>
                <p><text/></p>
                <p>Returns whether an element with qualified name $<text font="typewriter">tag</text> is allowed to be closed automatically,
if needed.</p>
              </item>
              <item xml:id="A2.I55.i5">
                <tag>$<text font="typewriter">boole = $model-&gt;canHaveAttribute($tag,$attribute);</text></tag>
                <p><text/></p>
                <p>Returns whether an element with qualified name $<text font="typewriter">tag</text> is allowed to have an attribute
with the given name.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx17.SSx1.SSSx5" labels="LABEL:LaTeXML::Model_Tag_Properties">
          <title>Tag Properties<indexmark><indexphrase key="latexmlmodel">LaTeXML::Model</indexphrase><indexphrase key="tagproperties">Tag Properties</indexphrase></indexmark></title>
          <para xml:id="A2.Sx17.SSx1.SSSx5.p1">
            <description xml:id="A2.I56">
              <!-- %**** generated/LaTeXML_Model.tex Line 125 **** -->
              <item xml:id="A2.I56.i1">
                <tag>$<text font="typewriter">value = $model-&gt;getTagProperty($tag,$property);</text></tag>
                <p><text/></p>
                <p>Gets the value of the $property associated with the qualified name $<text font="typewriter">tag</text>
Known properties are:</p>
                <verbatim font="typewriter">
 autoOpen   : This asserts that the tag is allowed to
              be opened automatically if needed to
              insert some other element.  If not set,
              the tag can only be opened explicitly.
 autoClose  : This asserts that the $tag is allowed to
              be closed automatically if needed to
              insert some other element.  If not set,
              the tag can only be closed explicitly.
 afterOpen  : supplies code to be executed whenever
              an element of this type is opened. It
              is called with the created node and the
              responsible digested object as arguments.
 afterClose : supplies code to be executed whenever
              an element of this type is closed.  It
              is called with the created node and the
              responsible digested object as arguments.
</verbatim>
                <!-- %**** generated/LaTeXML_Model.tex Line 150 **** -->
              </item>
              <item xml:id="A2.I56.i2">
                <tag>$<text font="typewriter">model-&gt;setTagProperty($tag,$property,$value);</text></tag>
                <p><text/></p>
                <p>sets the value of the $<text font="typewriter">property</text> associated with the qualified name $<text font="typewriter">tag</text> to $<text font="typewriter">value</text>.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx17.SSx1.SSSx6" labels="LABEL:LaTeXML::Model_Rewrite_Rules">
          <title>Rewrite Rules<indexmark><indexphrase key="latexmlmodel">LaTeXML::Model</indexphrase><indexphrase key="rewriterules">Rewrite Rules</indexphrase></indexmark></title>
          <para xml:id="A2.Sx17.SSx1.SSSx6.p1">
            <description xml:id="A2.I57">
              <item xml:id="A2.I57.i1">
                <tag>$<text font="typewriter">model-&gt;addRewriteRule($mode,@specs);</text></tag>
                <p><text/></p>
                <p>Install a new rewrite rule with the given <text font="typewriter">@specs</text> to be used
in $<text font="typewriter">mode</text> (being either <text font="typewriter">math</text> or <text font="typewriter">text</text>).
See <ref labelref="LABEL:LaTeXML::Rewrite">LaTeXML::Rewrite</ref> for a description of the specifications.</p>
              </item>
              <item xml:id="A2.I57.i2">
                <tag>$<text font="typewriter">model-&gt;applyRewrites($document,$node,$until_rule);</text></tag>
                <p><text/></p>
                <p>Apply all matching rewrite rules to $<text font="typewriter">node</text> in the given document.
If $<text font="typewriter">until_rule</text> is define, apply all those rules that were defined
before it, otherwise, all rules</p>
              </item>
            </description>
          </para>
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx18" labels="LABEL:LaTeXML::Rewrite">
      <title>
        <text font="typewriter">LaTeXML::Rewrite<indexmark><indexphrase key="latexmlrewrite">LaTeXML::Rewrite</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx18.p1">
        <p>Rewrite rules for modifying the XML document.</p>
      </para>
      <subsection xml:id="A2.Sx18.SSx1" labels="LABEL:LaTeXML::Rewrite_Description">
        <title>Description<indexmark><indexphrase key="latexmlrewrite">LaTeXML::Rewrite</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx18.SSx1.p1">
          <p><text font="typewriter">LaTeXML::Rewrite</text> implements rewrite rules for modifying the XML document.</p>
        </para>
        <subsubsection xml:id="A2.Sx18.SSx1.SSSx1" labels="LABEL:LaTeXML::Rewrite_Methods">
          <title>Methods<indexmark><indexphrase key="latexmlrewrite">LaTeXML::Rewrite</indexphrase><indexphrase key="methods">Methods</indexphrase></indexmark></title>
          <para xml:id="A2.Sx18.SSx1.SSSx1.p1">
            <description xml:id="A2.I58">
              <item xml:id="A2.I58.i1">
                <tag>$<text font="typewriter">rule-&gt;rewrite($document,$node);</text></tag>
                <p>
                  <text/>
                </p>
              </item>
            </description>
          </para>
          <!-- %\section{Math-related Modules} -->
        </subsubsection>
      </subsection>
    </section>
    <section xml:id="A2.Sx19" labels="LABEL:LaTeXML::MathParser">
      <title>
        <text font="typewriter">LaTeXML::MathParser<indexmark><indexphrase key="latexmlmathparser">LaTeXML::MathParser</indexphrase></indexmark></text>
      </title>
      <para xml:id="A2.Sx19.p1">
        <p>Parses mathematics content</p>
      </para>
      <subsection xml:id="A2.Sx19.SSx1" labels="LABEL:LaTeXML::MathParser_Description">
        <title>Description<indexmark><indexphrase key="latexmlmathparser">LaTeXML::MathParser</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A2.Sx19.SSx1.p1">
          <p><text font="typewriter">LaTeXML::MathParser</text> parses the mathematical content of a document.
It uses <ref href="http://search.cpan.org/search?query=Parse%3A%3ARecDescent&amp;mode=module">Parse::RecDescent</ref> and a grammar <text font="typewriter">MathGrammar</text>.</p>
        </para>
        <subsubsection xml:id="A2.Sx19.SSx1.SSSx1" labels="LABEL:LaTeXML::MathParser_Math_Representation">
          <title>Math Representation<indexmark><indexphrase key="latexmlmathparser">LaTeXML::MathParser</indexphrase><indexphrase key="mathrepresentation">Math Representation</indexphrase></indexmark></title>
          <para xml:id="A2.Sx19.SSx1.SSSx1.p1">
            <p>Needs description.</p>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx19.SSx1.SSSx2" labels="LABEL:LaTeXML::MathParser_Possibile_Customizations">
          <title>Possibile Customizations<indexmark><indexphrase key="latexmlmathparser">LaTeXML::MathParser</indexphrase><indexphrase key="possibilecustomizations">Possibile Customizations</indexphrase></indexmark></title>
          <para xml:id="A2.Sx19.SSx1.SSSx2.p1">
            <p>Needs description.</p>
          </para>
        </subsubsection>
        <subsubsection xml:id="A2.Sx19.SSx1.SSSx3" labels="LABEL:LaTeXML::MathParser_Convenience_functions">
          <title>Convenience functions<indexmark><indexphrase key="latexmlmathparser">LaTeXML::MathParser</indexphrase><indexphrase key="conveniencefunctions">Convenience functions</indexphrase></indexmark></title>
          <!-- %**** generated/LaTeXML_MathParser.tex Line 25 **** -->
          <para xml:id="A2.Sx19.SSx1.SSSx3.p1">
            <p>The following functions are exported for convenience in writing the
grammar productions.</p>
          </para>
          <para xml:id="A2.Sx19.SSx1.SSSx3.p2">
            <description xml:id="A2.I59">
              <item xml:id="A2.I59.i1">
                <tag>$<text font="typewriter">node = New($name,$content,%attributes);</text></tag>
                <p><text/></p>
                <p>Creates a new <text font="typewriter">XMTok</text> node with given $<text font="typewriter">name</text> (a string or undef),
and $<text font="typewriter">content</text> (a string or undef) (but at least one of name or content should be provided),
and attributes.</p>
              </item>
              <item xml:id="A2.I59.i2">
                <tag>$<text font="typewriter">node = Arg($node,$n);</text></tag>
                <p><text/></p>
                <p>Returns the $<text font="typewriter">n</text>-th argument of an <text font="typewriter">XMApp</text> node;
0 is the operator node.</p>
              </item>
              <item xml:id="A2.I59.i3">
                <tag>
                  <text font="typewriter">Annotate($node,%attributes);</text>
                </tag>
                <p><text/></p>
                <p>Add attributes to $<text font="typewriter">node</text>.</p>
              </item>
              <item xml:id="A2.I59.i4">
                <tag>$<text font="typewriter">node = Apply($op,@args);</text></tag>
                <p><text/></p>
                <!-- %**** generated/LaTeXML_MathParser.tex Line 50 **** -->
                <p>Create a new <text font="typewriter">XMApp</text> node representing the application of the node
$<text font="typewriter">op</text> to the nodes <text font="typewriter">@args</text>.</p>
              </item>
              <item xml:id="A2.I59.i5">
                <tag>$<text font="typewriter">node = ApplyDelimited($op,@stuff);</text></tag>
                <p><text/></p>
                <p>Create a new <text font="typewriter">XMApp</text> node representing the application of the node
$<text font="typewriter">op</text> to the arguments found in <text font="typewriter">@stuff</text>.  <text font="typewriter">@stuff</text> are
delimited arguments in the sense that the leading and trailing nodes
should represent open and close delimiters and the arguments are
seperated by punctuation nodes.  The text of these delimiters and
punctuation are used to annotate the operator node with
<text font="typewriter">argopen</text>, <text font="typewriter">argclose</text> and <text font="typewriter">separator</text> attributes.</p>
              </item>
              <item xml:id="A2.I59.i6">
                <tag>$<text font="typewriter">node = recApply(@ops,$arg);</text></tag>
                <p><text/></p>
                <p>Given a sequence of operators and an argument, forms the nested
application <text font="typewriter">op(op(...(arg)))&gt;</text>.</p>
              </item>
              <item xml:id="A2.I59.i7">
                <tag>$<text font="typewriter">node = InvisibleTimes;</text></tag>
                <p><text/></p>
                <p>Creates an invisible times operator.</p>
                <!-- %**** generated/LaTeXML_MathParser.tex Line 75 **** -->
              </item>
              <item xml:id="A2.I59.i8">
                <tag>$<text font="typewriter">boole = isMatchingClose($open,$close);</text></tag>
                <p><text/></p>
                <p>Checks whether $<text font="typewriter">open</text> and $<text font="typewriter">close</text> form a `normal' pair of
delimiters, or if either is ".".</p>
              </item>
              <item xml:id="A2.I59.i9">
                <tag>$<text font="typewriter">node=&gt;Fence(@stuff);</text></tag>
                <p><text/></p>
                <p>Given a delimited sequence of nodes, starting and ending with open/close delimiters,
and with intermediate nodes separated by punctuation or such, attempt to guess what
type of thing is represented such as a set, absolute value, interval, and so on.
If nothing specific is recognized, creates the application of <text font="typewriter">FENCED</text> to the arguments.</p>
                <p>This would be a good candidate for customization!</p>
              </item>
              <item xml:id="A2.I59.i10">
                <tag>$<text font="typewriter">node = NewFormulae(@stuff);</text></tag>
                <p><text/></p>
                <p>Given a set of formulas, construct a <text font="typewriter">Formulae</text> application, if there are more than one,
else just return the first.</p>
                <!-- %**** generated/LaTeXML_MathParser.tex Line 100 **** -->
              </item>
              <item xml:id="A2.I59.i11">
                <tag>$<text font="typewriter">node = NewCollection(@stuff);</text></tag>
                <p><text/></p>
                <p>Given a set of expressions, construct a <text font="typewriter">Collection</text> application, if there are more than one,
else just return the first.</p>
              </item>
              <item xml:id="A2.I59.i12">
                <tag>$<text font="typewriter">node = LeftRec($arg1,@more);</text></tag>
                <p><text/></p>
                <p>Given an expr followed by repeated (op expr), compose the left recursive tree.
For example <text font="typewriter">a + b + c - d</text> would give <text font="typewriter">(- (+ a b c) d)&gt;</text></p>
              </item>
              <item xml:id="A2.I59.i13">
                <tag>
                  <text font="typewriter">Problem($text);</text>
                </tag>
                <p><text/></p>
                <p>Warn of a potential math parsing problem.</p>
              </item>
              <item xml:id="A2.I59.i14">
                <tag>
                  <text font="typewriter">MaybeFunction($token);</text>
                </tag>
                <p><text/></p>
                <p>Note the possible use of $<text font="typewriter">token</text> as a function, which may cause incorrect parsing.
This is used to generate warning messages.</p>
              </item>
            </description>
          </para>
          <!-- %%%====================================================================== -->
        </subsubsection>
      </subsection>
    </section>
  </appendix>
  <appendix refnum="C" xml:id="A3" labels="LABEL:utilitymodules">
    <title>Utility Module Documentation</title>
    <toctitle>Utility Modules</toctitle>
    <section xml:id="A3.Sx1" labels="LABEL:LaTeXML::Util::Pathname">
      <title>
        <text font="typewriter">LaTeXML::Util::Pathname<indexmark><indexphrase key="latexmlutilpathname">LaTeXML::Util::Pathname</indexphrase></indexmark></text>
      </title>
      <para xml:id="A3.Sx1.p1">
        <p>Portable pathname and file-system utilities</p>
      </para>
      <subsection xml:id="A3.Sx1.SSx1" labels="LABEL:LaTeXML::Util::Pathname_Description">
        <title>Description<indexmark><indexphrase key="latexmlutilpathname">LaTeXML::Util::Pathname</indexphrase><indexphrase key="description">Description</indexphrase></indexmark></title>
        <para xml:id="A3.Sx1.SSx1.p1">
          <p>This module combines the functionality <ref href="http://search.cpan.org/search?query=File%3A%3ASpec&amp;mode=module">File::Spec</ref> and <ref href="http://search.cpan.org/search?query=File%3A%3ABasename&amp;mode=module">File::Basename</ref> to
give a consistent set of filename utilties for LaTeXML.
A pathname is represented by a simple string.</p>
        </para>
        <subsubsection xml:id="A3.Sx1.SSx1.SSSx1" labels="LABEL:LaTeXML::Util::Pathname_Pathname_Manipulations">
          <title>Pathname Manipulations<indexmark><indexphrase key="latexmlutilpathname">LaTeXML::Util::Pathname</indexphrase><indexphrase key="pathnamemanipulations">Pathname Manipulations</indexphrase></indexmark></title>
          <para xml:id="A3.Sx1.SSx1.SSSx1.p1">
            <description xml:id="A3.I1">
              <item xml:id="A3.I1.i1">
                <tag>$<text font="typewriter">path = pathname_make(%peices);</text></tag>
                <p><text/></p>
                <p>Constructs a pathname from the keywords in pieces
dir   : directory
name  : the filename (possibly with extension)
type  : the filename extension</p>
              </item>
              <item xml:id="A3.I1.i2">
                <tag>
                  <text font="typewriter">($dir,$name,$type) = pathname_split($path);</text>
                </tag>
                <p><text/>
<!-- %**** generated/LaTeXML_Util_Pathname.tex Line 25 **** --></p>
                <p>Splits the pathname $<text font="typewriter">path</text> into the components: directory, name and type.</p>
              </item>
              <item xml:id="A3.I1.i3">
                <tag>$<text font="typewriter">path = pathname_canonical($path);</text></tag>
                <p><text/></p>
                <p>Canonicallizes the pathname $<text font="typewriter">path</text> by simplifying repeated slashes,
dots representing the current or parent directory, etc.</p>
              </item>
              <item xml:id="A3.I1.i4">
                <tag>$<text font="typewriter">dir = pathname_directory($path);</text></tag>
                <p><text/></p>
                <p>Returns the directory component of the pathname $<text font="typewriter">path</text>.</p>
              </item>
              <item xml:id="A3.I1.i5">
                <tag>$<text font="typewriter">name = pathname_name($path);</text></tag>
                <p><text/></p>
                <p>Returns the name component of the pathname $<text font="typewriter">path</text>.</p>
              </item>
              <item xml:id="A3.I1.i6">
                <tag>$<text font="typewriter">type = pathname_type($path);</text></tag>
                <p><text/></p>
                <p>Returns the type component of the pathname $<text font="typewriter">path</text>.</p>
                <!-- %**** generated/LaTeXML_Util_Pathname.tex Line 50 **** -->
              </item>
              <item xml:id="A3.I1.i7">
                <tag>$<text font="typewriter">path = pathname_concat($dir,$file);</text></tag>
                <p><text/></p>
                <p>Returns the pathname resulting from concatenating
the directory $<text font="typewriter">dir</text> and filename $<text font="typewriter">file</text>.</p>
              </item>
              <item xml:id="A3.I1.i8">
                <tag>$<text font="typewriter">boole = pathname_is_absolute($path);</text></tag>
                <p><text/></p>
                <p>Returns whether the pathname $<text font="typewriter">path</text> appears to be an absolute pathname.</p>
              </item>
              <item xml:id="A3.I1.i9">
                <tag>$<text font="typewriter">path = pathname_relative($path,$base);</text></tag>
                <p><text/></p>
                <p>Returns the path to file $<text font="typewriter">path</text> relative to the directory $<text font="typewriter">base</text>.</p>
              </item>
              <item xml:id="A3.I1.i10">
                <tag>$<text font="typewriter">path = pathname_absolute($path,$base);</text></tag>
                <p><text/></p>
                <p>Returns the absolute pathname resulting from interpretting
$<text font="typewriter">path</text> relative to the directory $<text font="typewriter">base</text>.  If $<text font="typewriter">path</text>
is already absolute, it is returned unchanged.</p>
              </item>
            </description>
          </para>
        </subsubsection>
        <subsubsection xml:id="A3.Sx1.SSx1.SSSx2" labels="LABEL:LaTeXML::Util::Pathname_File_System_Operations">
          <title>File System Operations<indexmark><indexphrase key="latexmlutilpathname">LaTeXML::Util::Pathname</indexphrase><indexphrase key="filesystemoperations">File System Operations</indexphrase></indexmark></title>
          <para xml:id="A3.Sx1.SSx1.SSSx2.p1">
            <description xml:id="A3.I2">
              <!-- %**** generated/LaTeXML_Util_Pathname.tex Line 75 **** -->
              <item xml:id="A3.I2.i1">
                <tag>$<text font="typewriter">modtime = pathname_timestamp($path);</text></tag>
                <p><text/></p>
                <p>Returns the modification time of the file named by $<text font="typewriter">path</text>,
or undef if the file does not exist.</p>
              </item>
              <item xml:id="A3.I2.i2">
                <tag>$<text font="typewriter">path = pathname_cwd();</text></tag>
                <p><text/></p>
                <p>Returns the current working directory.</p>
              </item>
              <item xml:id="A3.I2.i3">
                <tag>$<text font="typewriter">dir = pathname_mkdir($dir);</text></tag>
                <p><text/></p>
                <p>Creates the directory $<text font="typewriter">dir</text> and all missing ancestors.
It returns $<text font="typewriter">dir</text> if successful, else undef.</p>
              </item>
              <item xml:id="A3.I2.i4">
                <tag>$<text font="typewriter">dest = pathname_copy($source,$dest);</text></tag>
                <p><text/></p>
                <p>Copies the file $<text font="typewriter">source</text> to $<text font="typewriter">dest</text> if needed;
ie. if $<text font="typewriter">dest</text> is missing or older than $<text font="typewriter">source</text>.
It preserves the timestamp of $<text font="typewriter">source</text>.</p>
                <!-- %**** generated/LaTeXML_Util_Pathname.tex Line 100 **** -->
              </item>
              <item xml:id="A3.I2.i5">
                <tag>$<text font="typewriter">path = pathname_find($name,%options);</text></tag>
                <p><text/></p>
                <p>Finds the first file named $<text font="typewriter">name</text> that exists
and that matches the specification
in the keywords <text font="typewriter">%options</text>.
An absolute pathname is returned.</p>
                <p>If $<text font="typewriter">name</text> is not already an absolute pathname, then
the option <text font="typewriter">paths</text> determines directories to recursively search.
It should be a list of pathnames, any relative paths
are interpreted relative to the current directory.
If <text font="typewriter">paths</text> is omitted, then the current directory is searched.</p>
                <p>If the option <text font="typewriter">installation_subdir</text> is given, it
indicates, in addition to the above, a directory relative
to the LaTeXML installation directory to search.
This allows files included with the distribution to be found.</p>
                <p>The <text font="typewriter">types</text> option specifies a list of filetypes to search for.
<!-- %**** generated/LaTeXML_Util_Pathname.tex Line 125 **** -->If not supplied, then the filename must match exactly.</p>
              </item>
              <item xml:id="A3.I2.i6">
                <tag>
                  <text font="typewriter">@paths = pathname_findall($name,%options);</text>
                </tag>
                <p><text/></p>
                <p>This performs the same operation as <text font="typewriter">pathname_find</text>,
but returns all matching paths that exist.</p>
              </item>
            </description>
          </para>
          <!-- %%%====================================================================== -->
        </subsubsection>
      </subsection>
    </section>
  </appendix>
  <appendix refnum="D" xml:id="A4" labels="LABEL:postmodules">
    <title>Postprocessing Module Documentation</title>
    <toctitle>Postprocessing Modules</toctitle>
    <section xml:id="A4.Sx1" labels="LABEL:LaTeXML::Post">
      <title>LaTeXML::Post<indexmark><indexphrase key="latexmlpost">LaTeXML::Post</indexphrase></indexmark></title>
      <para xml:id="A4.Sx1.p1">
        <p>LaTeXML::Post is the driver for various postprocessing operations.
It has a complicated set of options that I'll document shortly.</p>
      </para>
      <!-- %%%====================================================================== -->
    </section>
  </appendix>
  <appendix refnum="E" xml:id="A5" labels="LABEL:schema">
    <title><ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> Schema</title>
    <toctitle>Schema</toctitle>
    <para xml:id="A5.p1">
      <p>The document type used by <ref href="http://dlmf.nist.gov/LaTeXML/"><text font="typewriter">LaTeXML</text></ref> is modular in the sense
that it is composed of several modules that define different
sets of elements related to, eg., inline content, block content,
math and high-level document structure.  This allows the possibility
<!-- %**** manual.tex Line 775 **** -->of mixing models or extension by predefining certain parameter entities.</p>
    </para>
    <section xml:id="A5.Sx1" labels="LABEL:dtd.module.LaTeXML">
      <title>Module <text font="typewriter">LaTeXML</text></title>
      <para xml:id="A5.Sx1.p1">
        <description xml:id="A5.I1">
          <item xml:id="A5.I1.i1">
            <tag>
              <ref labelref="LABEL:dtd.module.LaTeXML-common">
                <text font="typewriter">LaTeXML-common</text>
              </ref>
            </tag>
            <p>included.</p>
          </item>
          <item xml:id="A5.I1.i2">
            <tag>
              <ref labelref="LABEL:dtd.module.LaTeXML-inline">
                <text font="typewriter">LaTeXML-inline</text>
              </ref>
            </tag>
            <p>included.</p>
          </item>
          <item xml:id="A5.I1.i3">
            <tag>
              <ref labelref="LABEL:dtd.module.LaTeXML-block">
                <text font="typewriter">LaTeXML-block</text>
              </ref>
            </tag>
            <p>included.</p>
          </item>
          <item xml:id="A5.I1.i4">
            <tag>
              <ref labelref="LABEL:dtd.module.LaTeXML-para">
                <text font="typewriter">LaTeXML-para</text>
              </ref>
            </tag>
            <p>included.</p>
          </item>
          <item xml:id="A5.I1.i5">
            <tag>
              <ref labelref="LABEL:dtd.module.LaTeXML-math">
                <text font="typewriter">LaTeXML-math</text>
              </ref>
            </tag>
            <p>included.</p>
          </item>
          <item xml:id="A5.I1.i6">
            <tag>
              <ref labelref="LABEL:dtd.module.LaTeXML-tabular">
                <text font="typewriter">LaTeXML-tabular</text>
              </ref>
            </tag>
            <p>included.</p>
          </item>
          <item xml:id="A5.I1.i7">
            <tag>
              <ref labelref="LABEL:dtd.module.LaTeXML-picture">
                <text font="typewriter">LaTeXML-picture</text>
              </ref>
            </tag>
            <p>included.</p>
          </item>
          <item xml:id="A5.I1.i8">
            <tag>
              <ref labelref="LABEL:dtd.module.LaTeXML-structure">
                <text font="typewriter">LaTeXML-structure</text>
              </ref>
            </tag>
            <p>included.</p>
          </item>
          <item xml:id="A5.I1.i9">
            <tag>
              <ref labelref="LABEL:dtd.module.LaTeXML-bib">
                <text font="typewriter">LaTeXML-bib</text>
              </ref>
            </tag>
            <p>included.</p>
          </item>
          <item xml:id="A5.I1.i10">
            <tag>
              <anchor xml:id="dtd.entity.Inline.model">
                <text font="typewriter">Inline.model</text>
              </anchor>
            </tag>
            <p>Combined model for inline content.</p>
            <p><text font="bold">==</text> (#PCDATA  |  <ref idref="dtd.entity.Inline.class"><text font="typewriter">Inline.class</text></ref>  |  <ref idref="dtd.entity.Misc.class"><text font="typewriter">Misc.class</text></ref>  |  <ref idref="dtd.entity.Meta.class"><text font="typewriter">Meta.class</text></ref>)*</p>
          </item>
          <item xml:id="A5.I1.i11">
            <tag>
              <anchor xml:id="dtd.entity.Block.model">
                <text font="typewriter">Block.model</text>
              </anchor>
            </tag>
            <p>Combined model for physical block-level content.</p>
            <p><text font="bold">==</text> (<ref idref="dtd.entity.Block.class"><text font="typewriter">Block.class</text></ref>  |  <ref idref="dtd.entity.Misc.class"><text font="typewriter">Misc.class</text></ref>  |  <ref idref="dtd.entity.Meta.class"><text font="typewriter">Meta.class</text></ref>)*</p>
          </item>
          <item xml:id="A5.I1.i12">
            <tag>
              <anchor xml:id="dtd.entity.Flow.model">
                <text font="typewriter">Flow.model</text>
              </anchor>
            </tag>
            <p>Combined model for general flow containing both inline and block level content.</p>
            <p><text font="bold">==</text> (#PCDATA  |  <ref idref="dtd.entity.Inline.class"><text font="typewriter">Inline.class</text></ref>  |  <ref idref="dtd.entity.Block.class"><text font="typewriter">Block.class</text></ref>  |  <ref idref="dtd.entity.Misc.class"><text font="typewriter">Misc.class</text></ref>  |  <ref idref="dtd.entity.Meta.class"><text font="typewriter">Meta.class</text></ref>)*</p>
          </item>
          <item xml:id="A5.I1.i13">
            <tag>
              <anchor xml:id="dtd.entity.Para.model">
                <text font="typewriter">Para.model</text>
              </anchor>
            </tag>
            <p>Combined model for logical block-level context.</p>
            <p><text font="bold">==</text> (<ref idref="dtd.entity.Para.class"><text font="typewriter">Para.class</text></ref>  |  <ref idref="dtd.entity.Meta.class"><text font="typewriter">Meta.class</text></ref>)*</p>
          </item>
          <item xml:id="A5.I1.i14">
            <tag>
              <text font="italic">Start</text>
            </tag>
            <p><text font="bold">==</text>  <ref idref="dtd.element.document"><text font="typewriter">document</text></ref>
<!-- %**** generated/schema.tex Line 25 **** --></p>
          </item>
        </description>
      </para>
    </section>
    <section xml:id="A5.Sx2" labels="LABEL:dtd.module.LaTeXML-common">
      <title>Module <text font="typewriter">LaTeXML-common</text></title>
      <para xml:id="A5.Sx2.p1">
        <description xml:id="A5.I2">
          <item xml:id="A5.I2.i1">
            <tag>
              <anchor xml:id="dtd.entity.Inline.class">
                <text font="typewriter">Inline.class</text>
              </anchor>
            </tag>
            <p>All strictly inline elements.</p>
            <p><text font="bold">==</text>()</p>
          </item>
          <item xml:id="A5.I2.i2">
            <tag>
              <anchor xml:id="dtd.entity.Block.class">
                <text font="typewriter">Block.class</text>
              </anchor>
            </tag>
            <p>All `physical' block elements.
A physical block is typically displayed as a block, but
may not constitute a complete logical unit.</p>
            <p><text font="bold">==</text>()</p>
          </item>
          <item xml:id="A5.I2.i3">
            <tag>
              <anchor xml:id="dtd.entity.Misc.class">
                <text font="typewriter">Misc.class</text>
              </anchor>
            </tag>
            <p>Additional miscellaneous elements that can appear in
both inline and block contexts.</p>
            <p><text font="bold">==</text>()</p>
          </item>
          <item xml:id="A5.I2.i4">
            <tag>
              <anchor xml:id="dtd.entity.Para.class">
                <text font="typewriter">Para.class</text>
              </anchor>
            </tag>
            <p>All logical block level elements.
A logical block typically contains one or more physical block elements.
For example, a common situation might be <ref idref="dtd.element.p"><text font="typewriter">p</text></ref>,<ref idref="dtd.element.equation"><text font="typewriter">equation</text></ref>,<ref idref="dtd.element.p"><text font="typewriter">p</text></ref>,
where the entire sequence comprises a single sentence.</p>
            <p><text font="bold">==</text>()</p>
          </item>
          <item xml:id="A5.I2.i5">
            <tag>
              <anchor xml:id="dtd.entity.Meta.class">
                <text font="typewriter">Meta.class</text>
              </anchor>
            </tag>
            <p>All metadata elements, typically representing hidden data.</p>
            <p><text font="bold">==</text>()</p>
            <!-- %**** generated/schema.tex Line 50 **** -->
          </item>
          <item xml:id="A5.I2.i6">
            <tag>
              <anchor xml:id="dtd.entity.Length.type">
                <text font="typewriter">Length.type</text>
              </anchor>
            </tag>
            <p>The type for attributes specifying a length.
Should be a number followed by a length, typically px.
NOTE: To be narrowed later.</p>
            <p><text font="bold">==</text>()</p>
          </item>
          <item xml:id="A5.I2.i7">
            <tag>
              <anchor xml:id="dtd.entity.Color.type">
                <text font="typewriter">Color.type</text>
              </anchor>
            </tag>
            <p>The type for attributes specifying a color.
NOTE: To be narrowed later.</p>
            <p><text font="bold">==</text>()</p>
          </item>
          <item xml:id="A5.I2.i8">
            <tag>
              <anchor xml:id="dtd.entity.Common.attributes">
                <text font="typewriter">Common.attributes</text>
              </anchor>
            </tag>
            <p>Attributes shared by ALL elements.</p>
            <p><text font="bold">==</text> Attributes:</p>
            <description xml:id="A5.I2.I1">
              <item xml:id="A5.I2.I1.i1">
                <tag>
                  <text font="typewriter">class</text>
                </tag>
                <p>a space separated list of tokens, as in CSS.
The <text font="typewriter">class</text> can be used to add differentiate different instances of elements
without introducing new element declarations;
it generally shouldn't be used for deep semantic distinctions, however.
This attribute is carried over to HTML and can be used for CSS selection.</p>
                <p><text font="bold">=</text>  <text font="italic">NMTOKENS</text></p>
              </item>
            </description>
          </item>
          <item xml:id="A5.I2.i9">
            <tag>
              <anchor xml:id="dtd.entity.ID.attributes">
                <text font="typewriter">ID.attributes</text>
              </anchor>
            </tag>
            <p>Attributes for elements that can be cross-referenced
from inside or outside the document.</p>
            <p><text font="bold">==</text> Attributes:</p>
            <description xml:id="A5.I2.I2">
              <item xml:id="A5.I2.I2.i1">
                <tag>
                  <text font="typewriter">xml:id</text>
                </tag>
                <p>the unique identifier of the element,
usually generated automatically by the latexml.</p>
                <p><text font="bold">=</text>  <text font="italic">ID</text></p>
              </item>
            </description>
          </item>
          <item xml:id="A5.I2.i10">
            <tag>
              <anchor xml:id="dtd.entity.IDREF.attributes">
                <text font="typewriter">IDREF.attributes</text>
              </anchor>
            </tag>
            <p>Attributes for elements that can cross-reference other elements.</p>
            <p><text font="bold">==</text> Attributes:</p>
            <description xml:id="A5.I2.I3">
              <item xml:id="A5.I2.I3.i1">
                <tag>
                  <text font="typewriter">idref</text>
                </tag>
                <p>the identifier of the referred-to element.</p>
                <p><text font="bold">=</text>  <text font="italic">IDREF</text></p>
              </item>
            </description>
            <!-- %**** generated/schema.tex Line 75 **** -->
          </item>
          <item xml:id="A5.I2.i11">
            <tag>
              <anchor xml:id="dtd.entity.Labelled.attributes">
                <text font="typewriter">Labelled.attributes</text>
              </anchor>
            </tag>
            <p>Attributes for elements that can be labelled from within LaTeX.</p>
            <p><text font="bold">==</text> Attributes:</p>
            <description xml:id="A5.I2.I4">
              <item xml:id="A5.I2.I4.i1">
                <tag>
                  <ref idref="dtd.entity.ID.attributes">
                    <text font="typewriter">ID.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I2.I4.i2">
                <tag>
                  <text font="typewriter">labels</text>
                </tag>
                <p>Records the various labels that LaTeX uses for crossreferencing.
It consists of space separated labels for the element.
The \<text font="typewriter">label macro provides the label prefixed by LABEL:;
(note that \label can put more than one label on an object!)
Spaces in a label are replaced by underscore.
other mechanisms may use other prefix (ID: is reserved!)</text></p>
                <p>
                  <text font="typewriter bold">=<text font="medium"> <text font="italic">text</text></text></text>
                </p>
              </item>
              <item xml:id="A5.I2.I4.i3">
                <tag>refnum</tag>
                <p>the reference number (ie. section number, equation number, etc) of the object.</p>
                <p><text font="typewriter bold">=</text> <text font="typewriter italic">text</text></p>
              </item>
            </description>
          </item>
          <item xml:id="A5.I2.i12">
            <tag>
              <anchor xml:id="dtd.entity.Positionable.attributes">
                <text font="typewriter">Positionable.attributes</text>
              </anchor>
            </tag>
            <p>Attributes shared by low-level, generic inline and block elements
that can be sized or shifted.</p>
            <p><text font="bold">==</text> Attributes:</p>
            <description xml:id="A5.I2.I5">
              <item xml:id="A5.I2.I5.i1">
                <tag>
                  <text font="typewriter">width</text>
                </tag>
                <p>the desired width of the box</p>
                <p><text font="bold">=</text>  <ref idref="dtd.entity.Length.type"><text font="typewriter">Length.type</text></ref></p>
              </item>
              <item xml:id="A5.I2.I5.i2">
                <tag>
                  <text font="typewriter">height</text>
                </tag>
                <p>the desired height of the box</p>
                <p><text font="bold">=</text>  <ref idref="dtd.entity.Length.type"><text font="typewriter">Length.type</text></ref></p>
              </item>
              <item xml:id="A5.I2.I5.i3">
                <tag>
                  <text font="typewriter">depth</text>
                </tag>
                <p>the desired depth of the box</p>
                <p><text font="bold">=</text>  <ref idref="dtd.entity.Length.type"><text font="typewriter">Length.type</text></ref></p>
              </item>
              <item xml:id="A5.I2.I5.i4">
                <tag>
                  <text font="typewriter">pad-width</text>
                </tag>
                <p>extra width beyond the boxes natural size.</p>
                <p><text font="bold">=</text>  <ref idref="dtd.entity.Length.type"><text font="typewriter">Length.type</text></ref></p>
              </item>
              <item xml:id="A5.I2.I5.i5">
                <tag>
                  <text font="typewriter">pad-height</text>
                </tag>
                <p>extra height beyond the boxes natural size.</p>
                <p><text font="bold">=</text>  <ref idref="dtd.entity.Length.type"><text font="typewriter">Length.type</text></ref></p>
              </item>
              <item xml:id="A5.I2.I5.i6">
                <tag>
                  <text font="typewriter">xoffset</text>
                </tag>
                <p>horizontal shift the position of the box.</p>
                <p><text font="bold">=</text>  <ref idref="dtd.entity.Length.type"><text font="typewriter">Length.type</text></ref></p>
              </item>
              <item xml:id="A5.I2.I5.i7">
                <tag>
                  <text font="typewriter">yoffset</text>
                </tag>
                <p>vertical shift the position of the box.</p>
                <p><text font="bold">=</text>  <ref idref="dtd.entity.Length.type"><text font="typewriter">Length.type</text></ref></p>
              </item>
              <item xml:id="A5.I2.I5.i8">
                <tag>
                  <text font="typewriter">align</text>
                </tag>
                <p>alignment of material within the box.</p>
                <p><text font="bold">=</text>  (`left'  |  `center'  |  `right'  |  `justified')</p>
              </item>
              <item xml:id="A5.I2.I5.i9">
                <tag>
                  <text font="typewriter">vattach</text>
                </tag>
                <p>specifies which line of the box is aligned to the baseline of the containing object.</p>
                <p><text font="bold">=</text>  (`top'  |  `middle'  |  `bottom')</p>
              </item>
            </description>
            <!-- %**** generated/schema.tex Line 100 **** -->
          </item>
          <item xml:id="A5.I2.i13">
            <tag>
              <anchor xml:id="dtd.entity.Imageable.attributes">
                <text font="typewriter">Imageable.attributes</text>
              </anchor>
            </tag>
            <p>Attributes for elements that may be converted to image form
during postprocessing, such as math, graphics, pictures, etc.</p>
            <p><text font="bold">==</text> Attributes:</p>
            <description xml:id="A5.I2.I6">
              <item xml:id="A5.I2.I6.i1">
                <tag>
                  <text font="typewriter">imagesrc</text>
                </tag>
                <p>the file, possibly generated from other data.</p>
                <p><text font="bold">=</text>  <text font="italic">anyURI</text></p>
              </item>
              <item xml:id="A5.I2.I6.i2">
                <tag>
                  <text font="typewriter">imagewidth</text>
                </tag>
                <p>the width in pixels of <text font="typewriter">imagesrc</text>.</p>
                <p><text font="bold">=</text>  <text font="italic">nonNegativeInteger</text></p>
              </item>
              <item xml:id="A5.I2.I6.i3">
                <tag>
                  <text font="typewriter">imageheight</text>
                </tag>
                <p>the height in pixels of <text font="typewriter">imagesrc</text>.</p>
                <p><text font="bold">=</text>  <text font="italic">nonNegativeInteger</text></p>
              </item>
            </description>
          </item>
        </description>
      </para>
    </section>
    <section xml:id="A5.Sx3" labels="LABEL:dtd.module.LaTeXML-inline">
      <title>Module <text font="typewriter">LaTeXML-inline</text></title>
      <para xml:id="A5.Sx3.p1">
        <description xml:id="A5.I3">
          <item xml:id="A5.I3.i1">
            <tag>
              <text font="typewriter">Inline.class</text>
            </tag>
            <p>The inline module defines basic inline elements used throughout</p>
            <p>|<text font="bold">= </text>  (<ref idref="dtd.element.text"><text font="typewriter">text</text></ref>  |  <ref idref="dtd.element.emph"><text font="typewriter">emph</text></ref>  |  <ref idref="dtd.element.acronym"><text font="typewriter">acronym</text></ref>  |  <ref idref="dtd.element.rule"><text font="typewriter">rule</text></ref>  |  <ref idref="dtd.element.anchor"><text font="typewriter">anchor</text></ref>  |  <ref idref="dtd.element.ref"><text font="typewriter">ref</text></ref>  |  <ref idref="dtd.element.cite"><text font="typewriter">cite</text></ref>  |  <ref idref="dtd.element.bibref"><text font="typewriter">bibref</text></ref>)</p>
          </item>
          <item xml:id="A5.I3.i2">
            <tag>
              <text font="typewriter">Meta.class</text>
            </tag>
            <p>Additionally, it defines these meta elements. These are generally hidden,
and can appear in inline and block contexts.</p>
            <p>|<text font="bold">= </text>  (<ref idref="dtd.element.note"><text font="typewriter">note</text></ref>  |  <ref idref="dtd.element.indexmark"><text font="typewriter">indexmark</text></ref>  |  <ref idref="dtd.element.ERROR"><text font="typewriter">ERROR</text></ref>)</p>
          </item>
          <item xml:id="A5.I3.i3">
            <tag>
              <anchor xml:id="dtd.element.text">
                <text font="typewriter">text</text>
              </anchor>
            </tag>
            <p>General container for styled text.
Attributes cover a variety of styling and position shifting properties.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I3.I1">
              <item xml:id="A5.I3.I1.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Positionable.attributes"><text font="typewriter">Positionable.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I3.I1.i2">
                <tag>
                  <text font="typewriter">font</text>
                </tag>
                <p>the font to use (describe!)</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I3.I1.i3">
                <tag>
                  <text font="typewriter">size</text>
                </tag>
                <p>the text size to use (describe!)</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I3.I1.i4">
                <tag>
                  <text font="typewriter">color</text>
                </tag>
                <p>the color to use; any CSS compatible color specification.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I3.I1.i5">
                <tag>
                  <text font="typewriter">framed</text>
                </tag>
                <p>the kind of frame or outline for the text.</p>
                <p><text font="bold">=</text>  (`rectangle'  |  `underline')</p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref>
<!-- %**** generated/schema.tex Line 125 **** --></p>
          </item>
          <item xml:id="A5.I3.i4">
            <tag>
              <anchor xml:id="dtd.element.emph">
                <text font="typewriter">emph</text>
              </anchor>
            </tag>
            <p>Emphasized text.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I3.i5">
            <tag>
              <anchor xml:id="dtd.element.acronym">
                <text font="typewriter">acronym</text>
              </anchor>
            </tag>
            <p>Represents an acronym.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I3.I2">
              <item xml:id="A5.I3.I2.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I3.I2.i2">
                <tag>
                  <text font="typewriter">name</text>
                </tag>
                <p>should be used to indicate the expansion of the acronym.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I3.i6">
            <tag>
              <anchor xml:id="dtd.element.rule">
                <text font="typewriter">rule</text>
              </anchor>
            </tag>
            <p>A Rule.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Positionable.attributes"><text font="typewriter">Positionable.attributes</text></ref></p>
            <p><text font="bold">content: </text><text font="italic">empty</text></p>
            <!-- %**** generated/schema.tex Line 150 **** -->
          </item>
          <item xml:id="A5.I3.i7">
            <tag>
              <anchor xml:id="dtd.element.ref">
                <text font="typewriter">ref</text>
              </anchor>
            </tag>
            <p>A hyperlink reference to some other object.
When converted to HTML, the content would be the content of the anchor.
The destination can be specified by one of the
attributes <text font="typewriter">labelref</text>, <text font="typewriter">idref</text> or <text font="typewriter">href</text>;
Missing fields will usually be filled in during postprocessing,
based on data extracted from the document(s).</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I3.I3">
              <item xml:id="A5.I3.I3.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.IDREF.attributes"><text font="typewriter">IDREF.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I3.I3.i2">
                <tag>
                  <text font="typewriter">labelref</text>
                </tag>
                <p>reference to a LaTeX labelled object.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I3.I3.i3">
                <tag>
                  <text font="typewriter">href</text>
                </tag>
                <p>reference to an arbitrary url.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I3.I3.i4">
                <tag>
                  <text font="typewriter">show</text>
                </tag>
                <p>an encoding of how the text content should be filled in.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I3.I3.i5">
                <tag>
                  <text font="typewriter">title</text>
                </tag>
                <p>gives a longer form description of the target,
this would typically appear as a tooltip in HTML.
Typically filled in by postprocessor.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I3.i8">
            <tag>
              <anchor xml:id="dtd.element.anchor">
                <text font="typewriter">anchor</text>
              </anchor>
            </tag>
            <p>Inline anchor.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I3.i9">
            <tag>
              <anchor xml:id="dtd.element.cite">
                <text font="typewriter">cite</text>
              </anchor>
            </tag>
            <p>A container for a bibliographic citation. The model is inline to
allow arbitrary comments before and after the expected <ref idref="dtd.element.bibref"><text font="typewriter">bibref</text></ref>(s)
which are the specific citation.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I3.i10">
            <tag>
              <anchor xml:id="dtd.element.bibref">
                <text font="typewriter">bibref</text>
              </anchor>
            </tag>
            <p>A bibliographic citation refering to a specific bibliographic item.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I3.I4">
              <item xml:id="A5.I3.I4.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.IDREF.attributes"><text font="typewriter">IDREF.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I3.I4.i2">
                <tag>
                  <text font="typewriter">bibrefs</text>
                </tag>
                <p>a comma separated list of bibliographic keys.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I3.I4.i3">
                <tag>
                  <text font="typewriter">show</text>
                </tag>
                <p>encodes which of author(s), year, title, etc will
be displayed. NOTE: Describe this.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
            <!-- %**** generated/schema.tex Line 175 **** -->
          </item>
          <item xml:id="A5.I3.i11">
            <tag>
              <anchor xml:id="dtd.element.note">
                <text font="typewriter">note</text>
              </anchor>
            </tag>
            <p>Metadata that covers several `out of band' annotations.
It's content allows both inline and block-level content.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I3.I5">
              <item xml:id="A5.I3.I5.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I3.I5.i2">
                <tag>
                  <text font="typewriter">mark</text>
                </tag>
                <p>indicates the desired visible marker to be linked to the note.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Flow.model"><text font="typewriter">Flow.model</text></ref></p>
          </item>
          <item xml:id="A5.I3.i12">
            <tag>
              <anchor xml:id="dtd.element.ERROR">
                <text font="typewriter">ERROR</text>
              </anchor>
            </tag>
            <p>error object for undefined control sequences, or whatever</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> #PCDATA*</p>
          </item>
          <item xml:id="A5.I3.i13">
            <tag>
              <anchor xml:id="dtd.element.indexmark">
                <text font="typewriter">indexmark</text>
              </anchor>
            </tag>
            <p>Metadata to record an indexing position. The content is
a sequence of <ref idref="dtd.element.indexphrase"><text font="typewriter">indexphrase</text></ref>, each representing a level in
a multilevel indexing entry.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I3.I6">
              <item xml:id="A5.I3.I6.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I3.I6.i2">
                <tag>
                  <text font="typewriter">see_also</text>
                </tag>
                <p>a flattened form (like <text font="typewriter">key</text>) of another <ref idref="dtd.element.indexmark"><text font="typewriter">indexmark</text></ref>,
used to crossreference.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I3.I6.i3">
                <tag>
                  <text font="typewriter">style</text>
                </tag>
                <p>NOTE: describe this.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.element.indexphrase"><text font="typewriter">indexphrase</text></ref>*</p>
          </item>
          <item xml:id="A5.I3.i14">
            <tag>
              <anchor xml:id="dtd.element.indexphrase">
                <text font="typewriter">indexphrase</text>
              </anchor>
            </tag>
            <p>A phrase within an <ref idref="dtd.element.indexmark"><text font="typewriter">indexmark</text></ref></p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I3.I7">
              <item xml:id="A5.I3.I7.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I3.I7.i2">
                <tag>
                  <text font="typewriter">key</text>
                </tag>
                <p>a flattened form of the phrase for generating an <text font="typewriter">ID</text>.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
        </description>
      </para>
    </section>
    <section xml:id="A5.Sx4" labels="LABEL:dtd.module.LaTeXML-block">
      <title>Module <text font="typewriter">LaTeXML-block</text></title>
      <para xml:id="A5.Sx4.p1">
        <description xml:id="A5.I4">
          <item xml:id="A5.I4.i1">
            <tag>
              <text font="typewriter">Block.class</text>
            </tag>
            <p>The block module defines the following `physical' block elements.</p>
            <p>|<text font="bold">= </text>  (<ref idref="dtd.element.p"><text font="typewriter">p</text></ref>  |  <ref idref="dtd.element.equation"><text font="typewriter">equation</text></ref>  |  <ref idref="dtd.element.equationgroup"><text font="typewriter">equationgroup</text></ref>  |  <ref idref="dtd.element.quote"><text font="typewriter">quote</text></ref>  |  <ref idref="dtd.element.centering"><text font="typewriter">centering</text></ref>  |  <ref idref="dtd.element.block"><text font="typewriter">block</text></ref>  |  <ref idref="dtd.element.itemize"><text font="typewriter">itemize</text></ref>  |  <ref idref="dtd.element.enumerate"><text font="typewriter">enumerate</text></ref>  |  <ref idref="dtd.element.description"><text font="typewriter">description</text></ref>)
<!-- %**** generated/schema.tex Line 200 **** --></p>
          </item>
          <item xml:id="A5.I4.i2">
            <tag>
              <text font="typewriter">Misc.class</text>
            </tag>
            <p>Additionally, it defines these miscellaneous elements that can appear
in both inline and block contexts.</p>
            <p>|<text font="bold">= </text>  (<ref idref="dtd.element.inline-block"><text font="typewriter">inline-block</text></ref>  |  <ref idref="dtd.element.verbatim"><text font="typewriter">verbatim</text></ref>  |  <ref idref="dtd.element.break"><text font="typewriter">break</text></ref>  |  <ref idref="dtd.element.graphics"><text font="typewriter">graphics</text></ref>)</p>
          </item>
          <item xml:id="A5.I4.i3">
            <tag>
              <anchor xml:id="dtd.entity.EquationMeta.class">
                <text font="typewriter">EquationMeta.class</text>
              </anchor>
            </tag>
            <p>Additional Metadata that can be present in equations.</p>
            <p><text font="bold">==</text> <ref idref="dtd.element.constraint"><text font="typewriter">constraint</text></ref></p>
          </item>
          <item xml:id="A5.I4.i4">
            <tag>
              <anchor xml:id="dtd.element.p">
                <text font="typewriter">p</text>
              </anchor>
            </tag>
            <p>A physical paragraph.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I4.i5">
            <tag>
              <anchor xml:id="dtd.element.centering">
                <text font="typewriter">centering</text>
              </anchor>
            </tag>
            <p>A physical block that centers its content.
NOTE: Reconsider this; perhaps should be a property on other blocks?</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> (<ref idref="dtd.element.caption"><text font="typewriter">caption</text></ref>  |  <ref idref="dtd.element.toccaption"><text font="typewriter">toccaption</text></ref>  |  <ref idref="dtd.entity.Block.model"><text font="typewriter">Block.model</text></ref>)*</p>
          </item>
          <item xml:id="A5.I4.i6">
            <tag>
              <anchor xml:id="dtd.element.constraint">
                <text font="typewriter">constraint</text>
              </anchor>
            </tag>
            <p>A constraint upon an equation.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I4.I1">
              <item xml:id="A5.I4.I1.i1">
                <tag>
                  <text font="typewriter">hidden</text>
                </tag>
                <p><text font="bold">=</text>  <text font="italic">boolean</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I4.i7">
            <tag>
              <anchor xml:id="dtd.element.equation">
                <text font="typewriter">equation</text>
              </anchor>
            </tag>
            <p>An Equation.  The model is just Inline which includes <ref idref="dtd.element.Math"><text font="typewriter">Math</text></ref>,
the main expected ingredient.
However, other things can end up in display math, too, so we use Inline.
Note that tabular is here only because it's a common, if misguided, idiom;
the processor will lift such elements out of math, when possible</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> (<ref idref="dtd.element.Math"><text font="typewriter">Math</text></ref>  |  <ref idref="dtd.element.MathFork"><text font="typewriter">MathFork</text></ref>  |  <ref idref="dtd.element.text"><text font="typewriter">text</text></ref>  |  <ref idref="dtd.element.tabular"><text font="typewriter">tabular</text></ref>  |  <ref idref="dtd.entity.Meta.class"><text font="typewriter">Meta.class</text></ref>  |  <ref idref="dtd.entity.EquationMeta.class"><text font="typewriter">EquationMeta.class</text></ref>)*</p>
            <!-- %**** generated/schema.tex Line 225 **** -->
          </item>
          <item xml:id="A5.I4.i8">
            <tag>
              <anchor xml:id="dtd.element.equationgroup">
                <text font="typewriter">equationgroup</text>
              </anchor>
            </tag>
            <p>A group of equations, perhaps aligned (Though this is nowhere recorded).</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> (<ref idref="dtd.element.equationgroup"><text font="typewriter">equationgroup</text></ref>  |  <ref idref="dtd.element.equation"><text font="typewriter">equation</text></ref>  |  <ref idref="dtd.element.block"><text font="typewriter">block</text></ref>  |  <ref idref="dtd.entity.Meta.class"><text font="typewriter">Meta.class</text></ref>  |  <ref idref="dtd.entity.EquationMeta.class"><text font="typewriter">EquationMeta.class</text></ref>)*</p>
          </item>
          <item xml:id="A5.I4.i9">
            <tag>
              <anchor xml:id="dtd.element.MathFork">
                <text font="typewriter">MathFork</text>
              </anchor>
            </tag>
            <p>A wrapper for Math that provides alternative,
but typically less semantically meaningful,
formatted representations.
The first child is the meaningful form,
the extra children provide formatted forms,
for example being table rows or cells arising from an eqnarray.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.Math"><text font="typewriter">Math</text></ref> <ref idref="dtd.element.MathBranch"><text font="typewriter">MathBranch</text></ref>*</p>
          </item>
          <item xml:id="A5.I4.i10">
            <tag>
              <anchor xml:id="dtd.element.MathBranch">
                <text font="typewriter">MathBranch</text>
              </anchor>
            </tag>
            <p>A container for an alternatively formatted math representation.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I4.I2">
              <item xml:id="A5.I4.I2.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I4.I2.i2">
                <tag>
                  <text font="typewriter">format</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> (<ref idref="dtd.element.Math"><text font="typewriter">Math</text></ref>  |  <ref idref="dtd.element.tr"><text font="typewriter">tr</text></ref>  |  <ref idref="dtd.element.td"><text font="typewriter">td</text></ref>)*</p>
          </item>
          <item xml:id="A5.I4.i11">
            <tag>
              <anchor xml:id="dtd.element.quote">
                <text font="typewriter">quote</text>
              </anchor>
            </tag>
            <p>A quotation.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I4.i12">
            <tag>
              <anchor xml:id="dtd.element.block">
                <text font="typewriter">block</text>
              </anchor>
            </tag>
            <p>A generic block (fallback).</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Positionable.attributes"><text font="typewriter">Positionable.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I4.i13">
            <tag>
              <anchor xml:id="dtd.element.break">
                <text font="typewriter">break</text>
              </anchor>
            </tag>
            <p>A forced line break.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text><text font="italic">empty</text></p>
            <!-- %**** generated/schema.tex Line 250 **** -->
          </item>
          <item xml:id="A5.I4.i14">
            <tag>
              <anchor xml:id="dtd.element.inline-block">
                <text font="typewriter">inline-block</text>
              </anchor>
            </tag>
            <p>An inline block. Actually, can appear in inline or block mode, but
typesets its contents as a block.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Positionable.attributes"><text font="typewriter">Positionable.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I4.i15">
            <tag>
              <anchor xml:id="dtd.element.verbatim">
                <text font="typewriter">verbatim</text>
              </anchor>
            </tag>
            <p>Verbatim content</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I4.I3">
              <item xml:id="A5.I4.I3.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I4.I3.i2">
                <tag>
                  <text font="typewriter">font</text>
                </tag>
                <p>the font to use; generally typewriter.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I4.i16">
            <tag>
              <anchor xml:id="dtd.element.itemize">
                <text font="typewriter">itemize</text>
              </anchor>
            </tag>
            <p>An itemized list.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.item"><text font="typewriter">item</text></ref>*</p>
          </item>
          <item xml:id="A5.I4.i17">
            <tag>
              <anchor xml:id="dtd.element.enumerate">
                <text font="typewriter">enumerate</text>
              </anchor>
            </tag>
            <p>An enumerated list.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.item"><text font="typewriter">item</text></ref>*</p>
          </item>
          <item xml:id="A5.I4.i18">
            <tag>
              <anchor xml:id="dtd.element.description">
                <text font="typewriter">description</text>
              </anchor>
            </tag>
            <p>A description list. The <ref idref="dtd.element.item"><text font="typewriter">item</text></ref>s within are expected to have a <ref idref="dtd.element.tag"><text font="typewriter">tag</text></ref>
which represents the term being described in each <ref idref="dtd.element.item"><text font="typewriter">item</text></ref>.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.item"><text font="typewriter">item</text></ref>*</p>
          </item>
          <item xml:id="A5.I4.i19">
            <tag>
              <anchor xml:id="dtd.element.item">
                <text font="typewriter">item</text>
              </anchor>
            </tag>
            <p>An item within a list.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.tag"><text font="typewriter">tag</text></ref>? <ref idref="dtd.entity.Block.model"><text font="typewriter">Block.model</text></ref></p>
            <!-- %**** generated/schema.tex Line 275 **** -->
          </item>
          <item xml:id="A5.I4.i20">
            <tag>
              <anchor xml:id="dtd.element.tag">
                <text font="typewriter">tag</text>
              </anchor>
            </tag>
            <p>A tag within an item indicating the term or bullet for a given item.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I4.I4">
              <item xml:id="A5.I4.I4.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I4.I4.i2">
                <tag>
                  <text font="typewriter">open</text>
                </tag>
                <p>specifies an open delimiters used to display the tag.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I4.I4.i3">
                <tag>
                  <text font="typewriter">close</text>
                </tag>
                <p>specifies an close delimiters used to display the tag.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I4.i21">
            <tag>
              <anchor xml:id="dtd.element.graphics">
                <text font="typewriter">graphics</text>
              </anchor>
            </tag>
            <p>A graphical insertion of an external file.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I4.I5">
              <item xml:id="A5.I4.I5.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Imageable.attributes"><text font="typewriter">Imageable.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I4.I5.i2">
                <tag>
                  <text font="typewriter">graphic</text>
                </tag>
                <p>the path to the graphics file</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I4.I5.i3">
                <tag>
                  <text font="typewriter">options</text>
                </tag>
                <p>an encoding of the scaling and positioning options
to be used in processing the graphic.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text><text font="italic">empty</text></p>
          </item>
        </description>
      </para>
    </section>
    <section xml:id="A5.Sx5" labels="LABEL:dtd.module.LaTeXML-para">
      <title>Module <text font="typewriter">LaTeXML-para</text></title>
      <para xml:id="A5.Sx5.p1">
        <description xml:id="A5.I5">
          <item xml:id="A5.I5.i1">
            <tag>
              <text font="typewriter">Para.class</text>
            </tag>
            <p>This module `logical' block elements.</p>
            <p>|<text font="bold">= </text>  (<ref idref="dtd.element.para"><text font="typewriter">para</text></ref>  |  <ref idref="dtd.element.theorem"><text font="typewriter">theorem</text></ref>  |  <ref idref="dtd.element.proof"><text font="typewriter">proof</text></ref>  |  <ref idref="dtd.element.figure"><text font="typewriter">figure</text></ref>  |  <ref idref="dtd.element.table"><text font="typewriter">table</text></ref>)</p>
          </item>
          <item xml:id="A5.I5.i2">
            <tag>
              <anchor xml:id="dtd.element.para">
                <text font="typewriter">para</text>
              </anchor>
            </tag>
            <p>A Logical paragraph. It has an <text font="typewriter">id</text>, but not a <text font="typewriter">label</text>.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Block.model"><text font="typewriter">Block.model</text></ref></p>
          </item>
          <item xml:id="A5.I5.i3">
            <tag>
              <anchor xml:id="dtd.element.theorem">
                <text font="typewriter">theorem</text>
              </anchor>
            </tag>
            <p>A theorem or similar object. The <text font="typewriter">class</text> attribute can be used to distinguish
different kinds of theorem.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.title"><text font="typewriter">title</text></ref>? <ref idref="dtd.entity.Block.model"><text font="typewriter">Block.model</text></ref></p>
            <!-- %**** generated/schema.tex Line 300 **** -->
          </item>
          <item xml:id="A5.I5.i4">
            <tag>
              <anchor xml:id="dtd.element.proof">
                <text font="typewriter">proof</text>
              </anchor>
            </tag>
            <p>A proof or similar object. The <text font="typewriter">class</text> attribute can be used to distinguish
different kinds of proof.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.title"><text font="typewriter">title</text></ref>? <ref idref="dtd.entity.Block.model"><text font="typewriter">Block.model</text></ref></p>
          </item>
          <item xml:id="A5.I5.i5">
            <tag>
              <anchor xml:id="dtd.entity.Caption.class">
                <text font="typewriter">Caption.class</text>
              </anchor>
            </tag>
            <p>These are the additional elements representing figure and
table captions.
NOTE: Could title sensibly be reused here, instead?
Or, should caption be used for theorem and proof?</p>
            <p><text font="bold">==</text> (<ref idref="dtd.element.caption"><text font="typewriter">caption</text></ref>  |  <ref idref="dtd.element.toccaption"><text font="typewriter">toccaption</text></ref>)</p>
          </item>
          <item xml:id="A5.I5.i6">
            <tag>
              <anchor xml:id="dtd.element.figure">
                <text font="typewriter">figure</text>
              </anchor>
            </tag>
            <p>A  figure, possibly captioned.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I5.I1">
              <item xml:id="A5.I5.I1.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I5.I1.i2">
                <tag>
                  <text font="typewriter">placement</text>
                </tag>
                <p>the floating placement parameter that determines where the object is displayed.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> (<ref idref="dtd.entity.Block.model"><text font="typewriter">Block.model</text></ref>  |  <ref idref="dtd.entity.Caption.class"><text font="typewriter">Caption.class</text></ref>)*</p>
          </item>
          <item xml:id="A5.I5.i7">
            <tag>
              <anchor xml:id="dtd.element.table">
                <text font="typewriter">table</text>
              </anchor>
            </tag>
            <p>A  Table, possibly captioned. This is not necessarily a <ref idref="dtd.element.tabular"><text font="typewriter">tabular</text></ref>.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I5.I2">
              <item xml:id="A5.I5.I2.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I5.I2.i2">
                <tag>
                  <text font="typewriter">placement</text>
                </tag>
                <p>the floating placement parameter that determines where the object is displayed.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> (<ref idref="dtd.entity.Block.model"><text font="typewriter">Block.model</text></ref>  |  <ref idref="dtd.entity.Caption.class"><text font="typewriter">Caption.class</text></ref>)*</p>
          </item>
          <item xml:id="A5.I5.i8">
            <tag>
              <anchor xml:id="dtd.element.caption">
                <text font="typewriter">caption</text>
              </anchor>
            </tag>
            <p>A caption for a <ref idref="dtd.element.table"><text font="typewriter">table</text></ref> or <ref idref="dtd.element.figure"><text font="typewriter">figure</text></ref>.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
            <!-- %**** generated/schema.tex Line 325 **** -->
          </item>
          <item xml:id="A5.I5.i9">
            <tag>
              <anchor xml:id="dtd.element.toccaption">
                <text font="typewriter">toccaption</text>
              </anchor>
            </tag>
            <p>A short form of <ref idref="dtd.element.table"><text font="typewriter">table</text></ref> or <ref idref="dtd.element.figure"><text font="typewriter">figure</text></ref> caption,
used for lists of figures or similar.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
        </description>
      </para>
    </section>
    <section xml:id="A5.Sx6" labels="LABEL:dtd.module.LaTeXML-math">
      <title>Module <text font="typewriter">LaTeXML-math</text></title>
      <para xml:id="A5.Sx6.p1">
        <description xml:id="A5.I6">
          <item xml:id="A5.I6.i1">
            <tag>
              <text font="typewriter">Inline.class</text>
            </tag>
            <p>The math module defines LaTeXML's internal representation of mathematical
content, including the basic math container <ref idref="dtd.element.Math"><text font="typewriter">Math</text></ref>.  This element is
considered inline, as it will be contained within some other block-level
element, eg. <ref idref="dtd.element.equation"><text font="typewriter">equation</text></ref> for display-math.</p>
            <p>|<text font="bold">= </text>  <ref idref="dtd.element.Math"><text font="typewriter">Math</text></ref></p>
          </item>
          <item xml:id="A5.I6.i2">
            <tag>
              <anchor xml:id="dtd.entity.Math.class">
                <text font="typewriter">Math.class</text>
              </anchor>
            </tag>
            <p>This class defines the content of the <ref idref="dtd.element.Math"><text font="typewriter">Math</text></ref> element.
Additionally, it could contain MathML or OpenMath, after postprocessing.</p>
            <p><text font="bold">==</text> <ref idref="dtd.element.XMath"><text font="typewriter">XMath</text></ref></p>
          </item>
          <item xml:id="A5.I6.i3">
            <tag>
              <anchor xml:id="dtd.entity.XMath.class">
                <text font="typewriter">XMath.class</text>
              </anchor>
            </tag>
            <p>These elements comprise the internal math representation, being
the content of the <ref idref="dtd.element.XMath"><text font="typewriter">XMath</text></ref> element.</p>
            <p><text font="bold">==</text> (<ref idref="dtd.element.XMApp"><text font="typewriter">XMApp</text></ref>  |  <ref idref="dtd.element.XMTok"><text font="typewriter">XMTok</text></ref>  |  <ref idref="dtd.element.XMRef"><text font="typewriter">XMRef</text></ref>  |  <ref idref="dtd.element.XMHint"><text font="typewriter">XMHint</text></ref>  |  <ref idref="dtd.element.XMArg"><text font="typewriter">XMArg</text></ref>  |  <ref idref="dtd.element.XMWrap"><text font="typewriter">XMWrap</text></ref>  |  <ref idref="dtd.element.XMDual"><text font="typewriter">XMDual</text></ref>  |  <ref idref="dtd.element.XMText"><text font="typewriter">XMText</text></ref>  |  <ref idref="dtd.element.XMArray"><text font="typewriter">XMArray</text></ref>)</p>
            <!-- %**** generated/schema.tex Line 350 **** -->
          </item>
          <item xml:id="A5.I6.i4">
            <tag>
              <anchor xml:id="dtd.element.Math">
                <text font="typewriter">Math</text>
              </anchor>
            </tag>
            <p>Outer container for all math. This holds the internal
<ref idref="dtd.element.XMath"><text font="typewriter">XMath</text></ref> representation, as well as image data and other representations.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I6.I1">
              <item xml:id="A5.I6.I1.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Imageable.attributes"><text font="typewriter">Imageable.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I6.I1.i2">
                <tag>
                  <text font="typewriter">mode</text>
                </tag>
                <p>display or inline mode.</p>
                <p><text font="bold">=</text>  (`display'  |  `inline')</p>
              </item>
              <item xml:id="A5.I6.I1.i3">
                <tag>
                  <text font="typewriter">tex</text>
                </tag>
                <p>reconstruction of the TeX that generated the math.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I1.i4">
                <tag>
                  <text font="typewriter">content-tex</text>
                </tag>
                <p>more semantic version of <text font="typewriter">tex</text>.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I1.i5">
                <tag>
                  <text font="typewriter">text</text>
                </tag>
                <p>a textified representation of the math.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Math.class"><text font="typewriter">Math.class</text></ref>*</p>
          </item>
          <item xml:id="A5.I6.i5">
            <tag>
              <anchor xml:id="dtd.entity.XMath.attributes">
                <text font="typewriter">XMath.attributes</text>
              </anchor>
            </tag>
            <p><text font="bold">==</text> Attributes:</p>
            <description xml:id="A5.I6.I2">
              <item xml:id="A5.I6.I2.i1">
                <tag>
                  <text font="typewriter">role</text>
                </tag>
                <p>The role that this item plays in the Grammar.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I2.i2">
                <tag>
                  <text font="typewriter">open</text>
                </tag>
                <p>an open delimiter to enclose the object;</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I2.i3">
                <tag>
                  <text font="typewriter">close</text>
                </tag>
                <p>an close delimiter to enclose the object;</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I2.i4">
                <tag>
                  <text font="typewriter">argopen</text>
                </tag>
                <p>an open delimiter to enclose the argument list,
when this token is applied to arguments with <ref idref="dtd.element.XMApp"><text font="typewriter">XMApp</text></ref>.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I2.i5">
                <tag>
                  <text font="typewriter">argclose</text>
                </tag>
                <p>a close delimiter to enclose the argument list,
when this token is applied to arguments with <ref idref="dtd.element.XMApp"><text font="typewriter">XMApp</text></ref>.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I2.i6">
                <tag>
                  <text font="typewriter">separators</text>
                </tag>
                <p>characters to separate arguments,
when this token is applied to arguments with <ref idref="dtd.element.XMApp"><text font="typewriter">XMApp</text></ref>.
Can be multiple characters for different argument positions;
the last character is repeated if there aren't enough.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I2.i7">
                <tag>
                  <text font="typewriter">punctuation</text>
                </tag>
                <p>trailing (presumably non-semantic) punctuation.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I2.i8">
                <tag>
                  <text font="typewriter">possibleFunction</text>
                </tag>
                <p>an annotation placed by the parser when it suspects this token may be used as a function.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
          </item>
          <item xml:id="A5.I6.i6">
            <tag>
              <anchor xml:id="dtd.element.XMath">
                <text font="typewriter">XMath</text>
              </anchor>
            </tag>
            <p>Internal representation of mathematics.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.XMath.class"><text font="typewriter">XMath.class</text></ref>*</p>
            <!-- %**** generated/schema.tex Line 375 **** -->
          </item>
          <item xml:id="A5.I6.i7">
            <tag>
              <anchor xml:id="dtd.element.XMTok">
                <text font="typewriter">XMTok</text>
              </anchor>
            </tag>
            <p>General mathematical token.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I6.I3">
              <item xml:id="A5.I6.I3.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.XMath.attributes"><text font="typewriter">XMath.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I6.I3.i2">
                <tag>
                  <text font="typewriter">name</text>
                </tag>
                <p>The name of the token, typically the control sequence that created it.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I3.i3">
                <tag>
                  <text font="typewriter">meaning</text>
                </tag>
                <p>A more semantic name corresponding to the intended meaning,
such as the OpenMath name.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I3.i4">
                <tag>
                  <text font="typewriter">omcd</text>
                </tag>
                <p>The OpenMath CD for which <text font="typewriter">meaning</text> is a symbol.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I3.i5">
                <tag>
                  <text font="typewriter">style</text>
                </tag>
                <p>Various random styling information. NOTE This needs to be made consistent.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I3.i6">
                <tag>
                  <text font="typewriter">font</text>
                </tag>
                <p>The font, size a used for the symbol.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I3.i7">
                <tag>
                  <text font="typewriter">size</text>
                </tag>
                <p>The size for the symbol, not presumed to be meaningful(?)</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I3.i8">
                <tag>
                  <text font="typewriter">color</text>
                </tag>
                <p>The color (CSS format) for the symbol, not presumed to be meaningful(?)</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I3.i9">
                <tag>
                  <text font="typewriter">scriptpos</text>
                </tag>
                <p>An encoding of the position of this token as a sub/superscript, used
to handle aligned and nested scripts, both pre and post.
It is a concatenation of (pre|mid|post), which indicates the horizontal
positioning of the script with relation to it's base, and a counter
indicating the level. These are used to position the scripts,
and to pair up aligned sub- and superscripts.
NOTE: Clarify where this appears: token, base, script operator, apply?</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I3.i10">
                <tag>
                  <text font="typewriter">thickness</text>
                </tag>
                <p>NOTE: How is this used?</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> #PCDATA*</p>
            <!-- %**** generated/schema.tex Line 400 **** -->
          </item>
          <item xml:id="A5.I6.i8">
            <tag>
              <anchor xml:id="dtd.element.XMApp">
                <text font="typewriter">XMApp</text>
              </anchor>
            </tag>
            <p>Generalized application of a function, operator, whatever (the first child)
to arguments (the remaining children).
The attributes are a subset of those for <ref idref="dtd.element.XMTok"><text font="typewriter">XMTok</text></ref>.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I6.I4">
              <item xml:id="A5.I6.I4.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.XMath.attributes"><text font="typewriter">XMath.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I6.I4.i2">
                <tag>
                  <text font="typewriter">name</text>
                </tag>
                <p>The name of the token, typically the control sequence that created it.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I4.i3">
                <tag>
                  <text font="typewriter">meaning</text>
                </tag>
                <p>A more semantic name corresponding to the intended meaning,
such as the OpenMath name.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I4.i4">
                <tag>
                  <text font="typewriter">scriptpos</text>
                </tag>
                <p>An encoding of the position of this token as a sub/superscript, used
to handle aligned and nested scripts, both pre and post.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.XMath.class"><text font="typewriter">XMath.class</text></ref>*</p>
          </item>
          <item xml:id="A5.I6.i9">
            <tag>
              <anchor xml:id="dtd.element.XMDual">
                <text font="typewriter">XMDual</text>
              </anchor>
            </tag>
            <p>Parallel markup of content (first child) and presentation (second child)
of a mathematical object.
Typically, the arguments are shared between the two branches:
they appear in the content branch, with <text font="typewriter">id</text>'s,
and <ref idref="dtd.element.XMRef"><text font="typewriter">XMRef</text></ref> is used in the presentation branch</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.XMath.attributes"><text font="typewriter">XMath.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.XMath.class"><text font="typewriter">XMath.class</text></ref> <ref idref="dtd.entity.XMath.class"><text font="typewriter">XMath.class</text></ref></p>
          </item>
          <item xml:id="A5.I6.i10">
            <tag>
              <anchor xml:id="dtd.element.XMHint">
                <text font="typewriter">XMHint</text>
              </anchor>
            </tag>
            <p>Various spacing items, generally ignored in parsing.
The attributes are a subset of those for <ref idref="dtd.element.XMTok"><text font="typewriter">XMTok</text></ref>.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I6.I5">
              <item xml:id="A5.I6.I5.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.XMath.attributes"><text font="typewriter">XMath.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I6.I5.i2">
                <tag>
                  <text font="typewriter">name</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I5.i3">
                <tag>
                  <text font="typewriter">meaning</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I5.i4">
                <tag>
                  <text font="typewriter">style</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text><text font="italic">empty</text></p>
          </item>
          <item xml:id="A5.I6.i11">
            <tag>
              <anchor xml:id="dtd.element.XMText">
                <text font="typewriter">XMText</text>
              </anchor>
            </tag>
            <p>Text appearing within math.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.XMath.attributes"><text font="typewriter">XMath.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></p>
            <p><text font="bold">content: </text> (#PCDATA  |  <ref idref="dtd.entity.Inline.class"><text font="typewriter">Inline.class</text></ref>  |  <ref idref="dtd.entity.Misc.class"><text font="typewriter">Misc.class</text></ref>)*</p>
            <!-- %**** generated/schema.tex Line 425 **** -->
          </item>
          <item xml:id="A5.I6.i12">
            <tag>
              <anchor xml:id="dtd.element.XMWrap">
                <text font="typewriter">XMWrap</text>
              </anchor>
            </tag>
            <p>Wrapper for a sequence of tokens used to assert the role of the
contents in its parent. This element generally disappears after parsing.
The attributes are a subset of those for <ref idref="dtd.element.XMTok"><text font="typewriter">XMTok</text></ref>.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I6.I6">
              <item xml:id="A5.I6.I6.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.XMath.attributes"><text font="typewriter">XMath.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I6.I6.i2">
                <tag>
                  <text font="typewriter">name</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I6.i3">
                <tag>
                  <text font="typewriter">meaning</text>
                </tag>
                <p>A more semantic name corresponding to the intended meaning,
such as the OpenMath name.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I6.i4">
                <tag>
                  <text font="typewriter">style</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.XMath.class"><text font="typewriter">XMath.class</text></ref>*</p>
          </item>
          <item xml:id="A5.I6.i13">
            <tag>
              <anchor xml:id="dtd.element.XMArg">
                <text font="typewriter">XMArg</text>
              </anchor>
            </tag>
            <p>Wrapper for an argument to a structured macro.
It implies that its content can be parsed independently of its parent,
and thus generally disappears after parsing.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I6.I7">
              <item xml:id="A5.I6.I7.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.XMath.attributes"><text font="typewriter">XMath.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I6.I7.i2">
                <tag>
                  <text font="typewriter">rule</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.XMath.class"><text font="typewriter">XMath.class</text></ref>*</p>
          </item>
          <item xml:id="A5.I6.i14">
            <tag>
              <anchor xml:id="dtd.element.XMRef">
                <text font="typewriter">XMRef</text>
              </anchor>
            </tag>
            <p>Structure sharing element typically used in the presentation
branch of an <ref idref="dtd.element.XMDual"><text font="typewriter">XMDual</text></ref> to refer to the arguments present in the content branch.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.XMath.attributes"><text font="typewriter">XMath.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref>, <ref idref="dtd.entity.IDREF.attributes"><text font="typewriter">IDREF.attributes</text></ref></p>
            <p><text font="bold">content: </text><text font="italic">empty</text></p>
          </item>
          <item xml:id="A5.I6.i15">
            <tag>
              <anchor xml:id="dtd.element.XMArray">
                <text font="typewriter">XMArray</text>
              </anchor>
            </tag>
            <p>Math Array/Alignment structure.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I6.I8">
              <item xml:id="A5.I6.I8.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.XMath.attributes"><text font="typewriter">XMath.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I6.I8.i2">
                <tag>
                  <text font="typewriter">name</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I8.i3">
                <tag>
                  <text font="typewriter">meaning</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I8.i4">
                <tag>
                  <text font="typewriter">style</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I8.i5">
                <tag>
                  <text font="typewriter">vattach</text>
                </tag>
                <p><text font="bold">=</text>  (`top'  |  `bottom')</p>
              </item>
              <item xml:id="A5.I6.I8.i6">
                <tag>
                  <text font="typewriter">width</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.element.XMRow"><text font="typewriter">XMRow</text></ref>*</p>
          </item>
          <item xml:id="A5.I6.i16">
            <tag>
              <anchor xml:id="dtd.element.XMRow">
                <text font="typewriter">XMRow</text>
              </anchor>
            </tag>
            <p>A row in a math alignment.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.XMCell"><text font="typewriter">XMCell</text></ref>*</p>
            <!-- %**** generated/schema.tex Line 450 **** -->
          </item>
          <item xml:id="A5.I6.i17">
            <tag>
              <anchor xml:id="dtd.element.XMCell">
                <text font="typewriter">XMCell</text>
              </anchor>
            </tag>
            <p>A cell in a row of a math alignment.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I6.I9">
              <item xml:id="A5.I6.I9.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I6.I9.i2">
                <tag>
                  <text font="typewriter">colspan</text>
                </tag>
                <p>indicates how many columns this cell spans or covers.</p>
                <p><text font="bold">=</text>  <text font="italic">nonNegativeInteger</text></p>
              </item>
              <item xml:id="A5.I6.I9.i3">
                <tag>
                  <text font="typewriter">rowpan</text>
                </tag>
                <p>indicates how many rows this cell spans or covers.</p>
                <p><text font="bold">=</text>  <text font="italic">nonNegativeInteger</text></p>
              </item>
              <item xml:id="A5.I6.I9.i4">
                <tag>
                  <text font="typewriter">align</text>
                </tag>
                <p>specifies the alignment of the content.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I9.i5">
                <tag>
                  <text font="typewriter">width</text>
                </tag>
                <p>specifies the desired width for the column.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I9.i6">
                <tag>
                  <text font="typewriter">border</text>
                </tag>
                <p>records a sequence of t or tt, r or rr, b or bb and l or ll
for borders or doubled borders on any side of the cell.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I6.I9.i7">
                <tag>
                  <text font="typewriter">thead</text>
                </tag>
                <p>whether this cell corresponds to a table head or foot.</p>
                <p><text font="bold">=</text>  <text font="italic">boolean</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.XMath.class"><text font="typewriter">XMath.class</text></ref>*</p>
          </item>
        </description>
      </para>
    </section>
    <section xml:id="A5.Sx7" labels="LABEL:dtd.module.LaTeXML-tabular">
      <title>Module <text font="typewriter">LaTeXML-tabular</text></title>
      <para xml:id="A5.Sx7.p1">
        <description xml:id="A5.I7">
          <item xml:id="A5.I7.i1">
            <tag>
              <text font="typewriter">Misc.class</text>
            </tag>
            <p>This module defines the basic tabular, or alignment, structure.
It is roughly parallel to the HTML model.</p>
            <p>|<text font="bold">= </text>  <ref idref="dtd.element.tabular"><text font="typewriter">tabular</text></ref></p>
          </item>
          <item xml:id="A5.I7.i2">
            <tag>
              <anchor xml:id="dtd.element.tabular">
                <text font="typewriter">tabular</text>
              </anchor>
            </tag>
            <p>An alignment structure corresponding to tabular  or various similar forms.
The model is basically a copy of HTML4's table.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I7.I1">
              <item xml:id="A5.I7.I1.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I7.I1.i2">
                <tag>
                  <text font="typewriter">vattach</text>
                </tag>
                <p>which row's baseline aligns with the container's baseline.</p>
                <p><text font="bold">=</text>  (`top'  |  `middle'  |  `bottom')</p>
              </item>
              <item xml:id="A5.I7.I1.i3">
                <tag>
                  <text font="typewriter">width</text>
                </tag>
                <p>the desired width of the tabular.</p>
                <p><text font="bold">=</text>  <ref idref="dtd.entity.Length.type"><text font="typewriter">Length.type</text></ref></p>
              </item>
            </description>
            <p><text font="bold">content: </text> (<ref idref="dtd.element.thead"><text font="typewriter">thead</text></ref>  |  <ref idref="dtd.element.tfoot"><text font="typewriter">tfoot</text></ref>  |  <ref idref="dtd.element.tbody"><text font="typewriter">tbody</text></ref>  |  <ref idref="dtd.element.tr"><text font="typewriter">tr</text></ref>)*
<!-- %**** generated/schema.tex Line 475 **** --></p>
          </item>
          <item xml:id="A5.I7.i3">
            <tag>
              <anchor xml:id="dtd.element.thead">
                <text font="typewriter">thead</text>
              </anchor>
            </tag>
            <p>A container for a set of rows that correspond to the header of the tabular.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.tr"><text font="typewriter">tr</text></ref>*</p>
          </item>
          <item xml:id="A5.I7.i4">
            <tag>
              <anchor xml:id="dtd.element.tfoot">
                <text font="typewriter">tfoot</text>
              </anchor>
            </tag>
            <p>A container for a set of rows that correspond to the footer of the tabular.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.tr"><text font="typewriter">tr</text></ref>*</p>
          </item>
          <item xml:id="A5.I7.i5">
            <tag>
              <anchor xml:id="dtd.element.tbody">
                <text font="typewriter">tbody</text>
              </anchor>
            </tag>
            <p>A container for a set of rows corresponding to the body of the tabular.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.tr"><text font="typewriter">tr</text></ref>*</p>
          </item>
          <item xml:id="A5.I7.i6">
            <tag>
              <anchor xml:id="dtd.element.tr">
                <text font="typewriter">tr</text>
              </anchor>
            </tag>
            <p>A row of a tabular.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.td"><text font="typewriter">td</text></ref>*</p>
          </item>
          <item xml:id="A5.I7.i7">
            <tag>
              <anchor xml:id="dtd.element.td">
                <text font="typewriter">td</text>
              </anchor>
            </tag>
            <p>A cell in a row of a tabular.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I7.I2">
              <item xml:id="A5.I7.I2.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I7.I2.i2">
                <tag>
                  <text font="typewriter">colspan</text>
                </tag>
                <p>indicates how many columns this cell spans or covers.</p>
                <p><text font="bold">=</text>  <text font="italic">nonNegativeInteger</text></p>
              </item>
              <item xml:id="A5.I7.I2.i3">
                <tag>
                  <text font="typewriter">rowspan</text>
                </tag>
                <p>indicates how many rows this cell spans or covers.</p>
                <p><text font="bold">=</text>  <text font="italic">nonNegativeInteger</text></p>
              </item>
              <item xml:id="A5.I7.I2.i4">
                <tag>
                  <text font="typewriter">align</text>
                </tag>
                <p>specifies the alignment of the content.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I7.I2.i5">
                <tag>
                  <text font="typewriter">width</text>
                </tag>
                <p>specifies the desired width for the column.</p>
                <p><text font="bold">=</text>  <ref idref="dtd.entity.Length.type"><text font="typewriter">Length.type</text></ref></p>
              </item>
              <item xml:id="A5.I7.I2.i6">
                <tag>
                  <text font="typewriter">border</text>
                </tag>
                <p>records a sequence of t or tt, r or rr, b or bb and l or ll
for borders or doubled borders on any side of the cell.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I7.I2.i7">
                <tag>
                  <text font="typewriter">thead</text>
                </tag>
                <p>whether this cell corresponds to a table head or foot.</p>
                <p><text font="bold">=</text>  <text font="italic">boolean</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Flow.model"><text font="typewriter">Flow.model</text></ref></p>
            <!-- %**** generated/schema.tex Line 500 **** -->
          </item>
        </description>
      </para>
    </section>
    <section xml:id="A5.Sx8" labels="LABEL:dtd.module.LaTeXML-picture">
      <title>Module <text font="typewriter">LaTeXML-picture</text></title>
      <para xml:id="A5.Sx8.p1">
        <description xml:id="A5.I8">
          <item xml:id="A5.I8.i1">
            <tag>
              <text font="typewriter">Misc.class</text>
            </tag>
            <p>This module defines a picture environment, roughly a subset of SVG.
NOTE: Consider whether it is sensible to drop this and incorporate SVG itself.</p>
            <p>|<text font="bold">= </text>  <ref idref="dtd.element.picture"><text font="typewriter">picture</text></ref></p>
          </item>
          <item xml:id="A5.I8.i2">
            <tag>
              <anchor xml:id="dtd.entity.Picture.class">
                <text font="typewriter">Picture.class</text>
              </anchor>
            </tag>
            <p><text font="bold">==</text> (<ref idref="dtd.element.g"><text font="typewriter">g</text></ref>  |  <ref idref="dtd.element.rect"><text font="typewriter">rect</text></ref>  |  <ref idref="dtd.element.line"><text font="typewriter">line</text></ref>  |  <ref idref="dtd.element.circle"><text font="typewriter">circle</text></ref>  |  <ref idref="dtd.element.path"><text font="typewriter">path</text></ref>  |  <ref idref="dtd.element.arc"><text font="typewriter">arc</text></ref>  |  <ref idref="dtd.element.wedge"><text font="typewriter">wedge</text></ref>  |  <ref idref="dtd.element.ellipse"><text font="typewriter">ellipse</text></ref>  |  <ref idref="dtd.element.polygon"><text font="typewriter">polygon</text></ref>  |  <ref idref="dtd.element.bezier"><text font="typewriter">bezier</text></ref>)</p>
          </item>
          <item xml:id="A5.I8.i3">
            <tag>
              <anchor xml:id="dtd.entity.Picture.attributes">
                <text font="typewriter">Picture.attributes</text>
              </anchor>
            </tag>
            <p>These attributes correspond roughly to SVG, but need documentation.</p>
            <p><text font="bold">==</text> Attributes:</p>
            <description xml:id="A5.I8.I1">
              <item xml:id="A5.I8.I1.i1">
                <tag>
                  <text font="typewriter">x</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i2">
                <tag>
                  <text font="typewriter">y</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i3">
                <tag>
                  <text font="typewriter">r</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i4">
                <tag>
                  <text font="typewriter">rx</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i5">
                <tag>
                  <text font="typewriter">ry</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i6">
                <tag>
                  <text font="typewriter">width</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i7">
                <tag>
                  <text font="typewriter">height</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i8">
                <tag>
                  <text font="typewriter">fill</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i9">
                <tag>
                  <text font="typewriter">stroke</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i10">
                <tag>
                  <text font="typewriter">stroke-width</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i11">
                <tag>
                  <text font="typewriter">stroke-dasharray</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i12">
                <tag>
                  <text font="typewriter">transform</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i13">
                <tag>
                  <text font="typewriter">terminators</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i14">
                <tag>
                  <text font="typewriter">arrowlength</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i15">
                <tag>
                  <text font="typewriter">points</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i16">
                <tag>
                  <text font="typewriter">showpoints</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i17">
                <tag>
                  <text font="typewriter">displayedpoints</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i18">
                <tag>
                  <text font="typewriter">arc</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i19">
                <tag>
                  <text font="typewriter">angle1</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i20">
                <tag>
                  <text font="typewriter">angle2</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i21">
                <tag>
                  <text font="typewriter">arcsepA</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i22">
                <tag>
                  <text font="typewriter">arcsepB</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I1.i23">
                <tag>
                  <text font="typewriter">curvature</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
          </item>
          <item xml:id="A5.I8.i4">
            <tag>
              <anchor xml:id="dtd.entity.PictureGroup.attributes">
                <text font="typewriter">PictureGroup.attributes</text>
              </anchor>
            </tag>
            <p>These attributes correspond roughly to SVG, but need documentation.</p>
            <p><text font="bold">==</text> Attributes:</p>
            <description xml:id="A5.I8.I2">
              <item xml:id="A5.I8.I2.i1">
                <tag>
                  <text font="typewriter">pos</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I2.i2">
                <tag>
                  <text font="typewriter">framed</text>
                </tag>
                <p><text font="bold">=</text>  <text font="italic">boolean</text></p>
              </item>
              <item xml:id="A5.I8.I2.i3">
                <tag>
                  <text font="typewriter">frametype</text>
                </tag>
                <p><text font="bold">=</text>  (`rect'  |  `circle'  |  `oval')</p>
              </item>
              <item xml:id="A5.I8.I2.i4">
                <tag>
                  <text font="typewriter">fillframe</text>
                </tag>
                <p><text font="bold">=</text>  <text font="italic">boolean</text></p>
              </item>
              <item xml:id="A5.I8.I2.i5">
                <tag>
                  <text font="typewriter">boxsep</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I2.i6">
                <tag>
                  <text font="typewriter">shadowbox</text>
                </tag>
                <p><text font="bold">=</text>  <text font="italic">boolean</text></p>
              </item>
              <item xml:id="A5.I8.I2.i7">
                <tag>
                  <text font="typewriter">doubleline</text>
                </tag>
                <p><text font="bold">=</text>  <text font="italic">boolean</text></p>
              </item>
            </description>
          </item>
          <item xml:id="A5.I8.i5">
            <tag>
              <anchor xml:id="dtd.element.picture">
                <text font="typewriter">picture</text>
              </anchor>
            </tag>
            <p>A picture environment.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I8.I3">
              <item xml:id="A5.I8.I3.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Picture.attributes"><text font="typewriter">Picture.attributes</text></ref>, <ref idref="dtd.entity.Imageable.attributes"><text font="typewriter">Imageable.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I8.I3.i2">
                <tag>
                  <text font="typewriter">clip</text>
                </tag>
                <p><text font="bold">=</text>  <text font="italic">boolean</text></p>
              </item>
              <item xml:id="A5.I8.I3.i3">
                <tag>
                  <text font="typewriter">baseline</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I3.i4">
                <tag>
                  <text font="typewriter">unitlength</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I3.i5">
                <tag>
                  <text font="typewriter">xunitlength</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I3.i6">
                <tag>
                  <text font="typewriter">yunitlength</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I3.i7">
                <tag>
                  <text font="typewriter">tex</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I8.I3.i8">
                <tag>
                  <text font="typewriter">content-tex</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> (<ref idref="dtd.entity.Picture.class"><text font="typewriter">Picture.class</text></ref>  |  <ref idref="dtd.entity.Inline.class"><text font="typewriter">Inline.class</text></ref>  |  <ref idref="dtd.entity.Misc.class"><text font="typewriter">Misc.class</text></ref>  |  <ref idref="dtd.entity.Meta.class"><text font="typewriter">Meta.class</text></ref>)*</p>
          </item>
          <item xml:id="A5.I8.i6">
            <tag>
              <anchor xml:id="dtd.element.g">
                <text font="typewriter">g</text>
              </anchor>
            </tag>
            <p>A graphical grouping; the content is inherits by the transformations,
positioning and other properties.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Picture.attributes"><text font="typewriter">Picture.attributes</text></ref>, <ref idref="dtd.entity.PictureGroup.attributes"><text font="typewriter">PictureGroup.attributes</text></ref></p>
            <p><text font="bold">content: </text> (<ref idref="dtd.entity.Picture.class"><text font="typewriter">Picture.class</text></ref>  |  <ref idref="dtd.entity.Inline.class"><text font="typewriter">Inline.class</text></ref>  |  <ref idref="dtd.entity.Misc.class"><text font="typewriter">Misc.class</text></ref>  |  <ref idref="dtd.entity.Meta.class"><text font="typewriter">Meta.class</text></ref>)*</p>
          </item>
          <item xml:id="A5.I8.i7">
            <tag>
              <anchor xml:id="dtd.element.rect">
                <text font="typewriter">rect</text>
              </anchor>
            </tag>
            <p>A rectangle within a <ref idref="dtd.element.picture"><text font="typewriter">picture</text></ref>.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Picture.attributes"><text font="typewriter">Picture.attributes</text></ref></p>
            <p><text font="bold">content: </text><text font="italic">empty</text>
<!-- %**** generated/schema.tex Line 525 **** --></p>
          </item>
          <item xml:id="A5.I8.i8">
            <tag>
              <anchor xml:id="dtd.element.line">
                <text font="typewriter">line</text>
              </anchor>
            </tag>
            <p>A line within a <ref idref="dtd.element.picture"><text font="typewriter">picture</text></ref>.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Picture.attributes"><text font="typewriter">Picture.attributes</text></ref></p>
            <p><text font="bold">content: </text><text font="italic">empty</text></p>
          </item>
          <item xml:id="A5.I8.i9">
            <tag>
              <anchor xml:id="dtd.element.polygon">
                <text font="typewriter">polygon</text>
              </anchor>
            </tag>
            <p>A polygon within a <ref idref="dtd.element.picture"><text font="typewriter">picture</text></ref>.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Picture.attributes"><text font="typewriter">Picture.attributes</text></ref></p>
            <p><text font="bold">content: </text><text font="italic">empty</text></p>
          </item>
          <item xml:id="A5.I8.i10">
            <tag>
              <anchor xml:id="dtd.element.wedge">
                <text font="typewriter">wedge</text>
              </anchor>
            </tag>
            <p>A wedge within a <ref idref="dtd.element.picture"><text font="typewriter">picture</text></ref>.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Picture.attributes"><text font="typewriter">Picture.attributes</text></ref></p>
            <p><text font="bold">content: </text><text font="italic">empty</text></p>
          </item>
          <item xml:id="A5.I8.i11">
            <tag>
              <anchor xml:id="dtd.element.arc">
                <text font="typewriter">arc</text>
              </anchor>
            </tag>
            <p>An arc within a <ref idref="dtd.element.picture"><text font="typewriter">picture</text></ref>.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Picture.attributes"><text font="typewriter">Picture.attributes</text></ref></p>
            <p><text font="bold">content: </text><text font="italic">empty</text></p>
          </item>
          <item xml:id="A5.I8.i12">
            <tag>
              <anchor xml:id="dtd.element.circle">
                <text font="typewriter">circle</text>
              </anchor>
            </tag>
            <p>A circle within a <ref idref="dtd.element.picture"><text font="typewriter">picture</text></ref>.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Picture.attributes"><text font="typewriter">Picture.attributes</text></ref></p>
            <p><text font="bold">content: </text><text font="italic">empty</text></p>
          </item>
          <item xml:id="A5.I8.i13">
            <tag>
              <anchor xml:id="dtd.element.ellipse">
                <text font="typewriter">ellipse</text>
              </anchor>
            </tag>
            <p>An ellipse within a <ref idref="dtd.element.picture"><text font="typewriter">picture</text></ref>.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Picture.attributes"><text font="typewriter">Picture.attributes</text></ref></p>
            <p><text font="bold">content: </text><text font="italic">empty</text></p>
          </item>
          <item xml:id="A5.I8.i14">
            <tag>
              <anchor xml:id="dtd.element.path">
                <text font="typewriter">path</text>
              </anchor>
            </tag>
            <p>A path within a <ref idref="dtd.element.picture"><text font="typewriter">picture</text></ref>.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Picture.attributes"><text font="typewriter">Picture.attributes</text></ref></p>
            <p><text font="bold">content: </text><text font="italic">empty</text></p>
          </item>
          <item xml:id="A5.I8.i15">
            <tag>
              <anchor xml:id="dtd.element.bezier">
                <text font="typewriter">bezier</text>
              </anchor>
            </tag>
            <p>A bezier curve within a <ref idref="dtd.element.picture"><text font="typewriter">picture</text></ref>.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Picture.attributes"><text font="typewriter">Picture.attributes</text></ref></p>
            <p><text font="bold">content: </text><text font="italic">empty</text></p>
            <!-- %**** generated/schema.tex Line 550 **** -->
          </item>
        </description>
      </para>
    </section>
    <section xml:id="A5.Sx9" labels="LABEL:dtd.module.LaTeXML-structure">
      <title>Module <text font="typewriter">LaTeXML-structure</text></title>
      <para xml:id="A5.Sx9.p1">
        <description xml:id="A5.I9">
          <item xml:id="A5.I9.i1">
            <tag>
              <anchor xml:id="dtd.element.document">
                <text font="typewriter">document</text>
              </anchor>
            </tag>
            <p>The document root.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> (<ref idref="dtd.entity.FrontMatter.class"><text font="typewriter">FrontMatter.class</text></ref>  |  <ref idref="dtd.entity.SectionalFrontMatter.class"><text font="typewriter">SectionalFrontMatter.class</text></ref>)* <ref idref="dtd.entity.Para.model"><text font="typewriter">Para.model</text></ref> <ref idref="dtd.element.part"><text font="typewriter">part</text></ref>* <ref idref="dtd.element.chapter"><text font="typewriter">chapter</text></ref>* <ref idref="dtd.element.section"><text font="typewriter">section</text></ref>* <ref idref="dtd.entity.BackMatter.class"><text font="typewriter">BackMatter.class</text></ref>*</p>
          </item>
          <item xml:id="A5.I9.i2">
            <tag>
              <anchor xml:id="dtd.element.part">
                <text font="typewriter">part</text>
              </anchor>
            </tag>
            <p>A part within a document.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.SectionalFrontMatter.class"><text font="typewriter">SectionalFrontMatter.class</text></ref>* <ref idref="dtd.entity.Para.model"><text font="typewriter">Para.model</text></ref> <ref idref="dtd.element.chapter"><text font="typewriter">chapter</text></ref>*</p>
          </item>
          <item xml:id="A5.I9.i3">
            <tag>
              <anchor xml:id="dtd.element.chapter">
                <text font="typewriter">chapter</text>
              </anchor>
            </tag>
            <p>A Chapter within a document.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.SectionalFrontMatter.class"><text font="typewriter">SectionalFrontMatter.class</text></ref>* <ref idref="dtd.entity.Para.model"><text font="typewriter">Para.model</text></ref> <ref idref="dtd.element.subparagraph"><text font="typewriter">subparagraph</text></ref>* <ref idref="dtd.element.paragraph"><text font="typewriter">paragraph</text></ref>* <ref idref="dtd.element.subsection"><text font="typewriter">subsection</text></ref>* <ref idref="dtd.element.section"><text font="typewriter">section</text></ref>*</p>
          </item>
          <item xml:id="A5.I9.i4">
            <tag>
              <anchor xml:id="dtd.element.section">
                <text font="typewriter">section</text>
              </anchor>
            </tag>
            <p>A Section within a document.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.SectionalFrontMatter.class"><text font="typewriter">SectionalFrontMatter.class</text></ref>* <ref idref="dtd.entity.Para.model"><text font="typewriter">Para.model</text></ref> <ref idref="dtd.element.subparagraph"><text font="typewriter">subparagraph</text></ref>* <ref idref="dtd.element.paragraph"><text font="typewriter">paragraph</text></ref>* <ref idref="dtd.element.subsection"><text font="typewriter">subsection</text></ref>*</p>
          </item>
          <item xml:id="A5.I9.i5">
            <tag>
              <anchor xml:id="dtd.element.appendix">
                <text font="typewriter">appendix</text>
              </anchor>
            </tag>
            <p>An Appendix within a document.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.SectionalFrontMatter.class"><text font="typewriter">SectionalFrontMatter.class</text></ref>* <ref idref="dtd.entity.Para.model"><text font="typewriter">Para.model</text></ref> <ref idref="dtd.element.subparagraph"><text font="typewriter">subparagraph</text></ref>* <ref idref="dtd.element.paragraph"><text font="typewriter">paragraph</text></ref>* <ref idref="dtd.element.subsection"><text font="typewriter">subsection</text></ref>* <ref idref="dtd.element.section"><text font="typewriter">section</text></ref>*</p>
          </item>
          <item xml:id="A5.I9.i6">
            <tag>
              <anchor xml:id="dtd.element.subsection">
                <text font="typewriter">subsection</text>
              </anchor>
            </tag>
            <p>A Subsection within a document.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.SectionalFrontMatter.class"><text font="typewriter">SectionalFrontMatter.class</text></ref>* <ref idref="dtd.entity.Para.model"><text font="typewriter">Para.model</text></ref> <ref idref="dtd.element.subparagraph"><text font="typewriter">subparagraph</text></ref>* <ref idref="dtd.element.paragraph"><text font="typewriter">paragraph</text></ref>* <ref idref="dtd.element.subsubsection"><text font="typewriter">subsubsection</text></ref>*</p>
          </item>
          <item xml:id="A5.I9.i7">
            <tag>
              <anchor xml:id="dtd.element.subsubsection">
                <text font="typewriter">subsubsection</text>
              </anchor>
            </tag>
            <p>A Subsubsection within a document.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.SectionalFrontMatter.class"><text font="typewriter">SectionalFrontMatter.class</text></ref>* <ref idref="dtd.entity.Para.model"><text font="typewriter">Para.model</text></ref> <ref idref="dtd.element.subparagraph"><text font="typewriter">subparagraph</text></ref>* <ref idref="dtd.element.paragraph"><text font="typewriter">paragraph</text></ref>*</p>
            <!-- %**** generated/schema.tex Line 575 **** -->
          </item>
          <item xml:id="A5.I9.i8">
            <tag>
              <anchor xml:id="dtd.element.paragraph">
                <text font="typewriter">paragraph</text>
              </anchor>
            </tag>
            <p>A Paragraph within a document. This corresponds to a `formal' marked, possibly labelled
LaTeX Paragraph,  in distinction from an unlabelled logical paragraph.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.SectionalFrontMatter.class"><text font="typewriter">SectionalFrontMatter.class</text></ref>* <ref idref="dtd.entity.Para.model"><text font="typewriter">Para.model</text></ref> <ref idref="dtd.element.subparagraph"><text font="typewriter">subparagraph</text></ref>*</p>
          </item>
          <item xml:id="A5.I9.i9">
            <tag>
              <anchor xml:id="dtd.element.subparagraph">
                <text font="typewriter">subparagraph</text>
              </anchor>
            </tag>
            <p>A Subparagraph within a document.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.SectionalFrontMatter.class"><text font="typewriter">SectionalFrontMatter.class</text></ref>* <ref idref="dtd.entity.Para.model"><text font="typewriter">Para.model</text></ref></p>
          </item>
          <item xml:id="A5.I9.i10">
            <tag>
              <anchor xml:id="dtd.element.bibliography">
                <text font="typewriter">bibliography</text>
              </anchor>
            </tag>
            <p>A Bibliography within a document.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I9.I1">
              <item xml:id="A5.I9.I1.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I9.I1.i2">
                <tag>
                  <text font="typewriter">files</text>
                </tag>
                <p>the list of bib files used to create the bibliograph.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.FrontMatter.class"><text font="typewriter">FrontMatter.class</text></ref>* <ref idref="dtd.entity.SectionalFrontMatter.class"><text font="typewriter">SectionalFrontMatter.class</text></ref>* <ref idref="dtd.element.biblist"><text font="typewriter">biblist</text></ref>*</p>
          </item>
          <item xml:id="A5.I9.i11">
            <tag>
              <anchor xml:id="dtd.element.index">
                <text font="typewriter">index</text>
              </anchor>
            </tag>
            <p>An Index within a document.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.Labelled.attributes"><text font="typewriter">Labelled.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.SectionalFrontMatter.class"><text font="typewriter">SectionalFrontMatter.class</text></ref>* <ref idref="dtd.element.indexlist"><text font="typewriter">indexlist</text></ref>*</p>
          </item>
          <item xml:id="A5.I9.i12">
            <tag>
              <anchor xml:id="dtd.element.indexlist">
                <text font="typewriter">indexlist</text>
              </anchor>
            </tag>
            <p>An index generated from the collection of <ref idref="dtd.element.indexmark"><text font="typewriter">indexmark</text></ref> in a document
(or document collection).</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.indexentry"><text font="typewriter">indexentry</text></ref>*</p>
          </item>
          <item xml:id="A5.I9.i13">
            <tag>
              <anchor xml:id="dtd.element.indexentry">
                <text font="typewriter">indexentry</text>
              </anchor>
            </tag>
            <p>An entry in an <ref idref="dtd.element.indexlist"><text font="typewriter">indexlist</text></ref> consisting of a phrase, references to
points in the document where the phrase was found, and possibly
a nested <ref idref="dtd.element.indexlist"><text font="typewriter">indexlist</text></ref> represented index levels below this one.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.element.indexphrase"><text font="typewriter">indexphrase</text></ref> <ref idref="dtd.element.indexrefs"><text font="typewriter">indexrefs</text></ref>? <ref idref="dtd.element.indexlist"><text font="typewriter">indexlist</text></ref>?</p>
            <!-- %**** generated/schema.tex Line 600 **** -->
          </item>
          <item xml:id="A5.I9.i14">
            <tag>
              <anchor xml:id="dtd.element.indexrefs">
                <text font="typewriter">indexrefs</text>
              </anchor>
            </tag>
            <p>A container for the references (<ref idref="dtd.element.ref"><text font="typewriter">ref</text></ref>) to where an <ref idref="dtd.element.indexphrase"><text font="typewriter">indexphrase</text></ref> was
encountered in the document. The model is Inline to allow
arbitrary text, in addition to the expected <ref idref="dtd.element.ref"><text font="typewriter">ref</text></ref>'s.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I9.i15">
            <tag>
              <anchor xml:id="dtd.element.title">
                <text font="typewriter">title</text>
              </anchor>
            </tag>
            <p>The title of a document, section or similar document structure container.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I9.i16">
            <tag>
              <anchor xml:id="dtd.element.toctitle">
                <text font="typewriter">toctitle</text>
              </anchor>
            </tag>
            <p>The short form of a title, for use in tables of contents or similar.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I9.i17">
            <tag>
              <anchor xml:id="dtd.element.subtitle">
                <text font="typewriter">subtitle</text>
              </anchor>
            </tag>
            <p>A subtitle, or secondary title.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I9.i18">
            <tag>
              <anchor xml:id="dtd.element.personname">
                <text font="typewriter">personname</text>
              </anchor>
            </tag>
            <p>A person's name.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I9.i19">
            <tag>
              <anchor xml:id="dtd.element.creator">
                <text font="typewriter">creator</text>
              </anchor>
            </tag>
            <p>Generalized document creator.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I9.I2">
              <item xml:id="A5.I9.I2.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I9.I2.i2">
                <tag>
                  <text font="typewriter">role</text>
                </tag>
                <p>indicates the role of the person in creating the docment.
Values include author, editor and translator,
but is open-ended to support extension.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> (<ref idref="dtd.entity.Person.class"><text font="typewriter">Person.class</text></ref>  |  <ref idref="dtd.entity.Misc.class"><text font="typewriter">Misc.class</text></ref>)*</p>
            <!-- %**** generated/schema.tex Line 625 **** -->
          </item>
          <item xml:id="A5.I9.i20">
            <tag>
              <anchor xml:id="dtd.element.contact">
                <text font="typewriter">contact</text>
              </anchor>
            </tag>
            <p>Generalized contact information for a document creator.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I9.I3">
              <item xml:id="A5.I9.I3.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I9.I3.i2">
                <tag>
                  <text font="typewriter">role</text>
                </tag>
                <p>indicates the type of contact information contained.
Values include address, current_address, affiliation, thanks,
email, url, dedicatory to cover various common constructs,
but is open-ended to support extension.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I9.i21">
            <tag>
              <anchor xml:id="dtd.element.date">
                <text font="typewriter">date</text>
              </anchor>
            </tag>
            <p>Generalized document date.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I9.I4">
              <item xml:id="A5.I9.I4.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I9.I4.i2">
                <tag>
                  <text font="typewriter">role</text>
                </tag>
                <p>indicates the relevance of the date to the document.
Values include creation, but is open-ended to support extension.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I9.i22">
            <tag>
              <anchor xml:id="dtd.element.abstract">
                <text font="typewriter">abstract</text>
              </anchor>
            </tag>
            <p>A document abstract.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Block.model"><text font="typewriter">Block.model</text></ref></p>
          </item>
          <item xml:id="A5.I9.i23">
            <tag>
              <anchor xml:id="dtd.element.acknowledgements">
                <text font="typewriter">acknowledgements</text>
              </anchor>
            </tag>
            <p>Acknowledgements for the document.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I9.i24">
            <tag>
              <anchor xml:id="dtd.element.keywords">
                <text font="typewriter">keywords</text>
              </anchor>
            </tag>
            <p>Keywords for the document. The content is freeform.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
            <!-- %**** generated/schema.tex Line 650 **** -->
          </item>
          <item xml:id="A5.I9.i25">
            <tag>
              <anchor xml:id="dtd.element.classification">
                <text font="typewriter">classification</text>
              </anchor>
            </tag>
            <p>A classification of the document.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I9.I5">
              <item xml:id="A5.I9.I5.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I9.I5.i2">
                <tag>
                  <text font="typewriter">scheme</text>
                </tag>
                <p>indicates what classification scheme was used.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I9.i26">
            <tag>
              <anchor xml:id="dtd.entity.Person.class">
                <text font="typewriter">Person.class</text>
              </anchor>
            </tag>
            <p><text font="bold">==</text> (<ref idref="dtd.element.personname"><text font="typewriter">personname</text></ref>  |  <ref idref="dtd.element.contact"><text font="typewriter">contact</text></ref>)</p>
          </item>
          <item xml:id="A5.I9.i27">
            <tag>
              <anchor xml:id="dtd.entity.SectionalFrontMatter.class">
                <text font="typewriter">SectionalFrontMatter.class</text>
              </anchor>
            </tag>
            <p><text font="bold">==</text> (<ref idref="dtd.element.title"><text font="typewriter">title</text></ref>  |  <ref idref="dtd.element.toctitle"><text font="typewriter">toctitle</text></ref>  |  <ref idref="dtd.element.creator"><text font="typewriter">creator</text></ref>)</p>
          </item>
          <item xml:id="A5.I9.i28">
            <tag>
              <anchor xml:id="dtd.entity.FrontMatter.class">
                <text font="typewriter">FrontMatter.class</text>
              </anchor>
            </tag>
            <p><text font="bold">==</text> (<ref idref="dtd.element.subtitle"><text font="typewriter">subtitle</text></ref>  |  <ref idref="dtd.element.date"><text font="typewriter">date</text></ref>  |  <ref idref="dtd.element.abstract"><text font="typewriter">abstract</text></ref>  |  <ref idref="dtd.element.acknowledgements"><text font="typewriter">acknowledgements</text></ref>  |  <ref idref="dtd.element.keywords"><text font="typewriter">keywords</text></ref>  |  <ref idref="dtd.element.classification"><text font="typewriter">classification</text></ref>)</p>
          </item>
          <item xml:id="A5.I9.i29">
            <tag>
              <anchor xml:id="dtd.entity.BackMatter.class">
                <text font="typewriter">BackMatter.class</text>
              </anchor>
            </tag>
            <p><text font="bold">==</text> (<ref idref="dtd.element.bibliography"><text font="typewriter">bibliography</text></ref>  |  <ref idref="dtd.element.appendix"><text font="typewriter">appendix</text></ref>  |  <ref idref="dtd.element.index"><text font="typewriter">index</text></ref>)</p>
          </item>
        </description>
      </para>
    </section>
    <section xml:id="A5.Sx10" labels="LABEL:dtd.module.LaTeXML-bib">
      <title>Module <text font="typewriter">LaTeXML-bib</text></title>
      <para xml:id="A5.Sx10.p1">
        <description xml:id="A5.I10">
          <item xml:id="A5.I10.i1">
            <tag>
              <anchor xml:id="dtd.element.biblist">
                <text font="typewriter">biblist</text>
              </anchor>
            </tag>
            <p>A list of bibliographic <ref idref="dtd.element.bibentry"><text font="typewriter">bibentry</text></ref> or <ref idref="dtd.element.bibitem"><text font="typewriter">bibitem</text></ref>.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> (<ref idref="dtd.element.bibentry"><text font="typewriter">bibentry</text></ref>  |  <ref idref="dtd.element.bibitem"><text font="typewriter">bibitem</text></ref>)*</p>
          </item>
          <item xml:id="A5.I10.i2">
            <tag>
              <anchor xml:id="dtd.element.bibentry">
                <text font="typewriter">bibentry</text>
              </anchor>
            </tag>
            <p>Semantic representation of a bibliography entry,
typically resulting from parsing BibTeX</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I10.I1">
              <item xml:id="A5.I10.I1.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I10.I1.i2">
                <tag>
                  <text font="typewriter">key</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I10.I1.i3">
                <tag>
                  <text font="typewriter">type</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Bibentry.class"><text font="typewriter">Bibentry.class</text></ref>*</p>
          </item>
          <item xml:id="A5.I10.i3">
            <tag>
              <anchor xml:id="dtd.element.bib-author">
                <text font="typewriter">bib-author</text>
              </anchor>
            </tag>
            <p>Author of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Bibname.model"><text font="typewriter">Bibname.model</text></ref>
<!-- %**** generated/schema.tex Line 675 **** --></p>
          </item>
          <item xml:id="A5.I10.i4">
            <tag>
              <anchor xml:id="dtd.element.bib-editor">
                <text font="typewriter">bib-editor</text>
              </anchor>
            </tag>
            <p>Editor of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Bibname.model"><text font="typewriter">Bibname.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i5">
            <tag>
              <anchor xml:id="dtd.element.bib-translator">
                <text font="typewriter">bib-translator</text>
              </anchor>
            </tag>
            <p>Translator of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Bibname.model"><text font="typewriter">Bibname.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i6">
            <tag>
              <anchor xml:id="dtd.element.surname">
                <text font="typewriter">surname</text>
              </anchor>
            </tag>
            <p>Surname of an author, editor or translator.</p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i7">
            <tag>
              <anchor xml:id="dtd.element.givenname">
                <text font="typewriter">givenname</text>
              </anchor>
            </tag>
            <p>Given name of an author, editor or translator.</p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i8">
            <tag>
              <anchor xml:id="dtd.element.initials">
                <text font="typewriter">initials</text>
              </anchor>
            </tag>
            <p>Initials of an author, editor or translator.</p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i9">
            <tag>
              <anchor xml:id="dtd.element.lineage">
                <text font="typewriter">lineage</text>
              </anchor>
            </tag>
            <p>Lineage of an author, editor or translator. (eg. von)</p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i10">
            <tag>
              <anchor xml:id="dtd.element.bib-title">
                <text font="typewriter">bib-title</text>
              </anchor>
            </tag>
            <p>Title of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i11">
            <tag>
              <anchor xml:id="dtd.element.bib-subtitle">
                <text font="typewriter">bib-subtitle</text>
              </anchor>
            </tag>
            <p>Subtitle of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
            <!-- %**** generated/schema.tex Line 700 **** -->
          </item>
          <item xml:id="A5.I10.i12">
            <tag>
              <anchor xml:id="dtd.element.bib-booktitle">
                <text font="typewriter">bib-booktitle</text>
              </anchor>
            </tag>
            <p>Title of the book containing a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i13">
            <tag>
              <anchor xml:id="dtd.element.bib-key">
                <text font="typewriter">bib-key</text>
              </anchor>
            </tag>
            <p>Unique key of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i14">
            <tag>
              <anchor xml:id="dtd.element.bib-journal">
                <text font="typewriter">bib-journal</text>
              </anchor>
            </tag>
            <p>Journal of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i15">
            <tag>
              <anchor xml:id="dtd.element.bib-series">
                <text font="typewriter">bib-series</text>
              </anchor>
            </tag>
            <p>Series of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i16">
            <tag>
              <anchor xml:id="dtd.element.bib-conference">
                <text font="typewriter">bib-conference</text>
              </anchor>
            </tag>
            <p>Conference of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i17">
            <tag>
              <anchor xml:id="dtd.element.bib-publisher">
                <text font="typewriter">bib-publisher</text>
              </anchor>
            </tag>
            <p>Publisher of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i18">
            <tag>
              <anchor xml:id="dtd.element.bib-organization">
                <text font="typewriter">bib-organization</text>
              </anchor>
            </tag>
            <p>Organization responsible for a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i19">
            <tag>
              <anchor xml:id="dtd.element.bib-institution">
                <text font="typewriter">bib-institution</text>
              </anchor>
            </tag>
            <p>Institution responsible for a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
            <!-- %**** generated/schema.tex Line 725 **** -->
          </item>
          <item xml:id="A5.I10.i20">
            <tag>
              <anchor xml:id="dtd.element.bib-address">
                <text font="typewriter">bib-address</text>
              </anchor>
            </tag>
            <p>Address of party  responsible for a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i21">
            <tag>
              <anchor xml:id="dtd.element.bib-volume">
                <text font="typewriter">bib-volume</text>
              </anchor>
            </tag>
            <p>Volume of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i22">
            <tag>
              <anchor xml:id="dtd.element.bib-number">
                <text font="typewriter">bib-number</text>
              </anchor>
            </tag>
            <p>Number of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i23">
            <tag>
              <anchor xml:id="dtd.element.bib-pages">
                <text font="typewriter">bib-pages</text>
              </anchor>
            </tag>
            <p>Pages of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i24">
            <tag>
              <anchor xml:id="dtd.element.bib-part">
                <text font="typewriter">bib-part</text>
              </anchor>
            </tag>
            <p>Part of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i25">
            <tag>
              <anchor xml:id="dtd.element.bib-date">
                <text font="typewriter">bib-date</text>
              </anchor>
            </tag>
            <p>Date of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i26">
            <tag>
              <anchor xml:id="dtd.element.bib-edition">
                <text font="typewriter">bib-edition</text>
              </anchor>
            </tag>
            <p>Edition of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i27">
            <tag>
              <anchor xml:id="dtd.element.bib-status">
                <text font="typewriter">bib-status</text>
              </anchor>
            </tag>
            <p>Status of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i28">
            <tag>
              <anchor xml:id="dtd.element.bib-type">
                <text font="typewriter">bib-type</text>
              </anchor>
            </tag>
            <p>Type of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref>
<!-- %**** generated/schema.tex Line 750 **** --></p>
          </item>
          <item xml:id="A5.I10.i29">
            <tag>
              <anchor xml:id="dtd.element.bib-identifier">
                <text font="typewriter">bib-identifier</text>
              </anchor>
            </tag>
            <p>Some form of document identfier. The content is descriptive.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I10.I2">
              <item xml:id="A5.I10.I2.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I10.I2.i2">
                <tag>
                  <text font="typewriter">scheme</text>
                </tag>
                <p>indicates what sort of identifier it is: such as
<text font="typewriter">doi</text>, <text font="typewriter">issn</text>, <text font="typewriter">isbn</text>, <text font="typewriter">mr</text>, or others.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I10.I2.i3">
                <tag>
                  <text font="typewriter">id</text>
                </tag>
                <p>the identifier.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I10.I2.i4">
                <tag>
                  <text font="typewriter">href</text>
                </tag>
                <p>a url to the document, if available</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i30">
            <tag>
              <anchor xml:id="dtd.element.bib-review">
                <text font="typewriter">bib-review</text>
              </anchor>
            </tag>
            <p>Review of a bibliographic entry. The content is descriptive.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I10.I3">
              <item xml:id="A5.I10.I3.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I10.I3.i2">
                <tag>
                  <text font="typewriter">scheme</text>
                </tag>
                <p>indicates what sort of identifier it is: such as
<text font="typewriter">doi</text>, <text font="typewriter">issn</text>, <text font="typewriter">isbn</text>, <text font="typewriter">mr</text>, or others.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I10.I3.i3">
                <tag>
                  <text font="typewriter">id</text>
                </tag>
                <p>the identifier.</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
              <item xml:id="A5.I10.I3.i4">
                <tag>
                  <text font="typewriter">href</text>
                </tag>
                <p>a url to the review, if available</p>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i31">
            <tag>
              <anchor xml:id="dtd.element.bib-links">
                <text font="typewriter">bib-links</text>
              </anchor>
            </tag>
            <p>Links to other things like preprints, source code, etc.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i32">
            <tag>
              <anchor xml:id="dtd.element.bib-language">
                <text font="typewriter">bib-language</text>
              </anchor>
            </tag>
            <p>Language of a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
            <!-- %**** generated/schema.tex Line 775 **** -->
          </item>
          <item xml:id="A5.I10.i33">
            <tag>
              <anchor xml:id="dtd.element.bib-url">
                <text font="typewriter">bib-url</text>
              </anchor>
            </tag>
            <p>A URL for a bibliographic entry. The content is descriptive</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I10.I4">
              <item xml:id="A5.I10.I4.i1">
                <tag>
                  <ref idref="dtd.entity.Common.attributes">
                    <text font="typewriter">Common.attributes</text>
                  </ref>
                </tag>
              </item>
              <item xml:id="A5.I10.I4.i2">
                <tag>
                  <text font="typewriter">href</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i34">
            <tag>
              <anchor xml:id="dtd.element.bib-note">
                <text font="typewriter">bib-note</text>
              </anchor>
            </tag>
            <p>Notes about a bibliographic entry.</p>
            <p><text font="bold">attributes: </text> <ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref></p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i35">
            <tag>
              <anchor xml:id="dtd.element.bibitem">
                <text font="typewriter">bibitem</text>
              </anchor>
            </tag>
            <p>A formatted bibliographic item, typically as written explicit
in a LaTeX article. This has generally lost most of the semantics
present in the BibTeX data.</p>
            <p><text font="bold">attributes: </text></p>
            <description xml:id="A5.I10.I5">
              <item xml:id="A5.I10.I5.i1">
                <tag><ref idref="dtd.entity.Common.attributes"><text font="typewriter">Common.attributes</text></ref>, <ref idref="dtd.entity.ID.attributes"><text font="typewriter">ID.attributes</text></ref></tag>
              </item>
              <item xml:id="A5.I10.I5.i2">
                <tag>
                  <text font="typewriter">key</text>
                </tag>
                <p><text font="bold">=</text> <text font="italic">text</text></p>
              </item>
            </description>
            <p><text font="bold">content: </text> <ref idref="dtd.element.tag"><text font="typewriter">tag</text></ref>? <ref idref="dtd.element.bibblock"><text font="typewriter">bibblock</text></ref>*</p>
          </item>
          <item xml:id="A5.I10.i36">
            <tag>
              <anchor xml:id="dtd.element.bibblock">
                <text font="typewriter">bibblock</text>
              </anchor>
            </tag>
            <p>A block of data appearing within a <ref idref="dtd.element.bibitem"><text font="typewriter">bibitem</text></ref>.</p>
            <p><text font="bold">content: </text> <ref idref="dtd.entity.Inline.model"><text font="typewriter">Inline.model</text></ref></p>
          </item>
          <item xml:id="A5.I10.i37">
            <tag>
              <anchor xml:id="dtd.entity.Bibentry.class">
                <text font="typewriter">Bibentry.class</text>
              </anchor>
            </tag>
            <p><text font="bold">==</text> (<ref idref="dtd.element.bib-author"><text font="typewriter">bib-author</text></ref>  |  <ref idref="dtd.element.bib-editor"><text font="typewriter">bib-editor</text></ref>  |  <ref idref="dtd.element.bib-translator"><text font="typewriter">bib-translator</text></ref>  |  <ref idref="dtd.element.bib-title"><text font="typewriter">bib-title</text></ref>  |  <ref idref="dtd.element.bib-subtitle"><text font="typewriter">bib-subtitle</text></ref>  |  <ref idref="dtd.element.bib-booktitle"><text font="typewriter">bib-booktitle</text></ref>  |  <ref idref="dtd.element.bib-key"><text font="typewriter">bib-key</text></ref>  |  <ref idref="dtd.element.bib-journal"><text font="typewriter">bib-journal</text></ref>  |  <ref idref="dtd.element.bib-series"><text font="typewriter">bib-series</text></ref>  |  <ref idref="dtd.element.bib-conference"><text font="typewriter">bib-conference</text></ref>  |  <ref idref="dtd.element.bib-publisher"><text font="typewriter">bib-publisher</text></ref>  |  <ref idref="dtd.element.bib-organization"><text font="typewriter">bib-organization</text></ref>  |  <ref idref="dtd.element.bib-institution"><text font="typewriter">bib-institution</text></ref>  |  <ref idref="dtd.element.bib-address"><text font="typewriter">bib-address</text></ref>  |  <ref idref="dtd.element.bib-volume"><text font="typewriter">bib-volume</text></ref>  |  <ref idref="dtd.element.bib-number"><text font="typewriter">bib-number</text></ref>  |  <ref idref="dtd.element.bib-pages"><text font="typewriter">bib-pages</text></ref>  |  <ref idref="dtd.element.bib-part"><text font="typewriter">bib-part</text></ref>  |  <ref idref="dtd.element.bib-date"><text font="typewriter">bib-date</text></ref>  |  <ref idref="dtd.element.bib-edition"><text font="typewriter">bib-edition</text></ref>  |  <ref idref="dtd.element.bib-status"><text font="typewriter">bib-status</text></ref>  |  <ref idref="dtd.element.bib-type"><text font="typewriter">bib-type</text></ref>  |  <ref idref="dtd.element.bib-language"><text font="typewriter">bib-language</text></ref>  |  <ref idref="dtd.element.bib-url"><text font="typewriter">bib-url</text></ref>  |  <ref idref="dtd.element.bib-note"><text font="typewriter">bib-note</text></ref>  |  <ref idref="dtd.element.bib-identifier"><text font="typewriter">bib-identifier</text></ref>  |  <ref idref="dtd.element.bib-review"><text font="typewriter">bib-review</text></ref>  |  <ref idref="dtd.element.bib-links"><text font="typewriter">bib-links</text></ref>)</p>
          </item>
          <item xml:id="A5.I10.i38">
            <tag>
              <anchor xml:id="dtd.entity.Bibname.model">
                <text font="typewriter">Bibname.model</text>
              </anchor>
            </tag>
            <p>The content model of the bibliographic name fields
(<ref idref="dtd.element.bib-author"><text font="typewriter">bib-author</text></ref>, <ref idref="dtd.element.bib-editor"><text font="typewriter">bib-editor</text></ref>, <ref idref="dtd.element.bib-translator"><text font="typewriter">bib-translator</text></ref>)</p>
            <p><text font="bold">==</text> <ref idref="dtd.element.surname"><text font="typewriter">surname</text></ref> <ref idref="dtd.element.givenname"><text font="typewriter">givenname</text></ref>? <ref idref="dtd.element.initials"><text font="typewriter">initials</text></ref>? <ref idref="dtd.element.lineage"><text font="typewriter">lineage</text></ref>?</p>
          </item>
        </description>
      </para>
      <!-- %%%====================================================================== -->
    </section>
  </appendix>
  <index xml:id="idx">
    <title>Index</title>
  </index>
</document>
