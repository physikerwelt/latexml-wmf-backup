# /=====================================================================\ #
# |  LaTeXML::Post::MathML                                              | #
# | MathML generator for LaTeXML                                        | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #

# ================================================================================
# LaTeXML::MathML  Math Formatter for LaTeXML's Parsed Math.
#   Cooperate with the parsed math structure generated by LaTeXML::Math and
# convert into presentation MathML.
# ================================================================================
# TODO
#  * Need switches for Presentation and/or Content 

#  * merging of mrows when operator is `close enough' (eg (+ (+ a b) c) => (+ a b c)
#  * get presentation from DUAL
#  * proper parenthesizing (should I record the parens used when parsing?)
# Some clarity to work out:
#  We're trying to convert either parsed or unparsed math (sometimes intertwined).
# How clearly do these have to be separated?
# ================================================================================

package LaTeXML::Post::MathML;
use strict;
use LaTeXML::Util::LibXML;
use base qw(LaTeXML::Post);

our $mmlURI = "http://www.w3.org/1998/Math/MathML";

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# See END for specific converters.
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Top level
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sub process {
  my($self,$doc)=@_;
  local $LaTeXML::Post::MathML::DOCUMENT = $doc;

  if(my @maths = $self->find_math_nodes($doc)){
    $self->Progress("Converting ".scalar(@maths)." formulae");
    $doc->addNamespace($mmlURI,'m');
    foreach my $math (@maths){
      my $mode = $math->getAttribute('mode')||'inline';
      my $xmath = $doc->findnode('ltx:XMath',$math);
      my $style = ($mode eq 'display' ? 'display' : 'text');
      $doc->addNodes($math,['m:math',
			    {display=>($mode eq 'display' ? 'block' : 'inline')},
			    $self->processNode($xmath,$style)]); }

    $doc->adjust_latexml_doctype('MathML'); } # Add MathML if LaTeXML dtd.
  $doc; }

# ================================================================================
sub find_math_nodes {  $_[1]->findnodes('//ltx:Math'); }

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# General translation utilities.
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sub getTokenMeaning {
  my($node)=@_;
  my $m = $node->getAttribute('meaning') || $node->getAttribute('name')
    || $node->textContent;
  (defined $m ? $m : '?'); }

sub realize {
  my($node)=@_;
  $LaTeXML::Post::MathML::DOCUMENT->realizeXMNode($node); }

# For a node that is a (possibly embellished) operator,
# find the underlying role.
our %EMBELLISHING_ROLE=(SUPERSCRIPTOP=>1,SUBSCRIPTOP=>1,STACKED=>1,
			OVERACCENT=>1,UNDERACCENT=>1,MODIFIER=>1,MODIFIEROP=>1);
sub getOperatorRole {
  my($node)=@_;
  if(!$node){
    undef; }
  elsif(my $role = $node->getAttribute('role')){
    $role; }
  elsif($node->localname eq 'XMApp'){
    my($op,$base)= element_nodes($node);
    ($EMBELLISHING_ROLE{$op->getAttribute('role')||''}
     ? getOperatorRole($base)
     : undef); }}

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Table of Translators for presentation|content
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# All translators take XMath XML::LibXML nodes as arguments,
# and return an intermediate form of MathML to be added.

our $MMLTable_P={};
our $MMLTable_C={};

sub DefMathML {
  my($key,$presentation,$content) =@_;
  $$MMLTable_P{$key} = $presentation if $presentation;
  $$MMLTable_C{$key} = $content if $content; }

sub lookupPresenter {
  my($mode,$role,$name)=@_;
  $name = '?' unless $name;
  $role = '?' unless $role;
  $$MMLTable_P{"$mode:$role:$name"} || $$MMLTable_P{"$mode:?:$name"}
    || $$MMLTable_P{"$mode:$role:?"} || $$MMLTable_P{"$mode:?:?"}; }

sub lookupContent {
  my($mode,$role,$name)=@_;
  $name = '?' unless $name;
  $role = '?' unless $role;
  $$MMLTable_C{"$mode:$role:$name"} || $$MMLTable_C{"$mode:?:$name"}
    || $$MMLTable_C{"$mode:$role:?"} || $$MMLTable_C{"$mode:?:?"}; }


#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Support functions for Presentation MathML
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sub pmml_top {
  my($node,$style)=@_;
  local $LaTeXML::MathML::STYLE = $style;
  local $LaTeXML::MathML::FONT  = find_inherited_attribute($node,'font');
  local $LaTeXML::MathML::SIZE  = find_inherited_attribute($node,'size');
  local $LaTeXML::MathML::COLOR = find_inherited_attribute($node,'color');
  pmml($node); }

sub find_inherited_attribute {
  my($node,$attribute)=@_;
  while($node && isElementNode($node)){
    if(my $value = $node->getAttribute($attribute)){
      return $value; }
    $node = $node->parentNode; }
  return undef; }

our %stylestep=(display=>'text', text=>'script',
	       script=>'scriptscript', scriptscript=>'scriptscript');
our %stylemap
  = (display     =>{text        =>[displaystyle=>'false'],
		    script      =>[displaystyle=>'false',scriptlevel=>'+1'],
		    scriptscript=>[displaystyle=>'false',scriptlevel=>'+2']},
     text        =>{display     =>[displaystyle=>'true'],
		    script      =>[scriptlevel=>'+1'],
		    scriptscript=>[scriptlevel=>'+2']},
     script      =>{display     =>[displaystyle=>'true',scriptlevel=>'-1'],
		    text        =>[scriptlevel=>'-1'],
		    scriptscript=>[scriptlevel=>'+1']},
     scriptscript=>{display     =>[displaystyle=>'true',scriptlevel=>'-2'],
		    text        =>[scriptlevel=>'-2'],
		    script      =>[scriptlevel=>'-1']});

sub pmml_smaller {
  my($node)=@_;
  local $LaTeXML::MathML::STYLE = $stylestep{$LaTeXML::MathML::STYLE};
  pmml($node); }

sub pmml {
  my($node)=@_;
  my $o = $node->getAttribute('open');
  my $c = $node->getAttribute('close');
  my $p = $node->getAttribute('punctuation');
  # Do the core conversion.
  my $result = ($node->localname eq 'XMRef'
		? pmml(realize($node))
		: pmml_internal($node));
  # Handle generic things: open/close delimiters, punctuation
  $result = pmml_parenthesize($result,$o,$c) if $o || $c;
  $result = ['m:mrow',{},$result,pmml_mo($p)] if $p;
  $result; }

sub pmml_internal {
  my($node)=@_;
  return ['m:merror',{},['m:mtext',{},"Missing Subexpression"]] unless $node;
  my $tag = $node->localname;
  my $role = $node->getAttribute('role');
  if($tag eq 'XMath'){
    pmml_row(map(pmml($_), element_nodes($node))); } # Really multiple nodes???
  elsif($tag eq 'XMDual'){
    my($content,$presentation) = element_nodes($node);
    pmml($presentation); }
  elsif($tag eq 'XMWrap'){	# Only present if parsing failed!
    pmml_row(map(pmml($_),element_nodes($node))); }
  elsif($tag eq 'XMApp'){
    my($op,@args) = element_nodes($node);
    if(!$op){
      ['m:merror',{},['m:mtext',{},"Missing Operator"]]; }
    elsif($role && ($role =~ /^(FLOAT|POST)(SUB|SUPER)SCRIPT$/)){
      pmml_unparsed_script($1,$2,$op); }
    else {
      $op = realize($op);  # NOTE: Could loose open/close on XMRef ???
      my $style = $op->getAttribute('style');
      my $styleattr = $style && $stylemap{$LaTeXML::MathML::STYLE}{$style};
      local $LaTeXML::MathML::STYLE 
	= ($style && $stylestep{$style} ? $style : $LaTeXML::MathML::STYLE);
###      my $result = &{ lookupPresenter('Apply',$op->getAttribute('role'),
      my $result = &{ lookupPresenter('Apply',getOperatorRole($op),
				      getTokenMeaning($op)) }($op,@args);
      $result = ['m:mstyle',{@$styleattr},$result] if $styleattr;
      $result; }}
  elsif($tag eq 'XMTok'){
    &{ lookupPresenter('Token',$role,getTokenMeaning($node)) }($node); }
  elsif($tag eq 'XMHint'){
    &{ lookupPresenter('Hint',$role,getTokenMeaning($node)) }($node); }
  elsif($tag eq 'XMArray'){
    my $style = $node->getAttribute('style');
    my $styleattr = $style && $stylemap{$LaTeXML::MathML::STYLE}{$style};
    local $LaTeXML::MathML::STYLE 
      = ($style && $stylestep{$style} ? $style : $LaTeXML::MathML::STYLE);
    my @rows = ();
    foreach my $row (element_nodes($node)){
      my @cols = ();
      foreach my $col (element_nodes($row)){
	my $a = $col->getAttribute('align');
	my $b = $col->getAttribute('border');
	my $h = (($col->getAttribute('thead')||'') eq 'yes') && 'thead';
	my $c = ($b ? ($h ? "$b $h" : $b) : $h);
	my $cs = $col->getAttribute('colspan');
	push(@cols,['m:mtd',{($a ? (columnalign=>$a):()),
			     ($c ? (class=>$c):()),
			     ($cs ? (columnspan=>$cs):())},
		    map(pmml($_),element_nodes($col))]); }
      push(@rows,['m:mtr',{},@cols]); }
    my $result = ['m:mtable',{rowspacing=>"0.2ex", columnspacing=>"0.4em"},@rows];
    $result = ['m:mstyle',{@$styleattr},$result] if $styleattr;
    $result; }
  else {
    ['m:mtext',{},$node->textContent]; }}

sub pmml_row {
  my(@items)=@_;
  @items = grep($_,@items);
  (scalar(@items) == 1 ? $items[0] : ['m:mrow',{},@items]); }

sub pmml_unrow {
  my($mml)=@_;
  if($mml && (ref $mml)  && ($mml->[0] eq 'm:mrow') && !scalar(keys %{$mml->[1]})){
    my($tag,$attr,@children)=@$mml;
    @children; }
  else {
    ($mml); }}

sub pmml_parenthesize {
  my($item,$open,$close)=@_;
  if(!$open && !$close){
    $item; }
## Maybe better not open the contained mrow; seems to affect bracket size in Moz.
##  elsif($item && (ref $item)  && ($item->[0] eq 'mrow')){
##    my($tag,$attr,@children)=@$item;
##    ['m:mrow',$attr,($open ? (pmml_mo($open)):()),@children,($close ? (pmml_mo($close)):())]; }
  else {
    ['m:mrow',{},($open ? (pmml_mo($open)):()),$item,($close ? (pmml_mo($close)):())]; }}

sub pmml_punctuate {
  my($separators,@items)=@_;
  $separators='' unless defined $separators;
  my $lastsep=', ';
  my @arglist;
  if(@items){
    push(@arglist,pmml(shift(@items)));
    while(@items){
      $separators =~ s/^(.)//;
      $lastsep = $1 if $1;
      push(@arglist,pmml_mo($lastsep),pmml(shift(@items))); }}
  pmml_row(@arglist); }


# args are XMath nodes
sub pmml_infix {
  my($op,@args)=@_;
  return ['m:mrow',{}] unless $op && @args; # ??
  my @items=();
  if(scalar(@args) == 1){	# Infix with 1 arg is presumably Prefix!
    push(@items,(ref $op ? pmml($op) : pmml_mo($op)),pmml($args[0])); }
  else {
    push(@items, pmml(shift(@args)));
    while(@args){
      push(@items,(ref $op ? pmml($op) : pmml_mo($op)));
      push(@items,pmml(shift(@args))); }}
  pmml_row(@items); }

# Mappings between internal fonts & sizes.
# Default math font is roman|medium|upright.
our %mathvariants = ('upright'          =>'normal',
		     'bold'             =>'bold',
		     'bold upright'     =>'bold',
		     'italic'           =>'italic',
		     'medium italic'    =>'italic',
		     'bold italic'      =>'bold-italic',
		     'doublestruck'     =>'double-struck',
		     'blackboard'       =>'double-struck',
		     'fraktur bold'     => 'bold-fraktur',
		     'script'           => 'script',
		     'script italic'    => 'script',
		     'script bold'      => 'bold-script',
		     'caligraphic'      => 'script',
		     'caligraphic bold' => 'bold-script',
		     'fraktur'          => 'fraktur',
		     'sansserif'        => 'sans-serif',
		     'sansserif bold'   => 'bold-sans-serif',
		     'sansserif italic' => 'sans-serif-italic',
		     'sansserif bold italic'   => 'sans-serif-bold-italic',
		     'typewriter'       => 'monospace');

# The font differences (from the containing context) have been deciphered
# into font, size and color attributes.  The font should match
# one of the above... (?)

our %sizes=(tiny=>'small',script=>'small',footnote=>'small',small=>'small',
	    normal=>'normal',
	    large=>'big',Large=>'big',LARGE=>'big',huge=>'big',Huge=>'big');

sub pmml_mi {
  my($item)=@_;
  my $font  = (ref $item ? $item->getAttribute('font') : undef) ||  $LaTeXML::MathML::FONT;
  my $size  = (ref $item ? $item->getAttribute('size') : undef) || $LaTeXML::MathML::SIZE;
  my $color = (ref $item ? $item->getAttribute('color') : undef) || $LaTeXML::MathML::COLOR;
  my $text  = (ref $item ?  $item->textContent : $item);
  my $variant = ($font ? $mathvariants{$font} : '');
  if($font && !$variant){
    warn "Unrecognized font variant \"$font\""; $variant=''; }
  if($text =~ /^.$/){	# Single char in mi?
    if($variant eq 'italic'){ $variant = ''; } # Defaults to italic
    elsif(!$variant){ $variant = 'normal'; }}  # must say so explicitly.
  ['m:mi',{($variant ? (mathvariant=>$variant):()),
	   ($size    ? (mathsize=>$sizes{$size}):()),
	   ($color   ? (mathcolor=>$color):())},$text]; }

sub pmml_mo {
  my($item)=@_;
  my $font  = (ref $item ? $item->getAttribute('font') : undef);
  my $size  = (ref $item ? $item->getAttribute('size') : undef);
  my $color = (ref $item ? $item->getAttribute('color') : undef);
  my $text  = (ref $item ?  $item->textContent : $item);
  my $variant = ($font ? $mathvariants{$font} : '');
  my $pos   = (ref $item && $item->getAttribute('scriptpos')) || 'post';
  ['m:mo',{($variant ? (mathvariant=>$variant):()),
	   ($size    ? (mathsize=>$sizes{$size}):()),
	   ($color   ? (mathcolor=>$color):()),
	   # If an operator has specifically located it's scripts,
	   # don't let mathml move them.
	   (($pos =~ /mid/) || $LaTeXML::MathML::NOMOVABLELIMITS
	    ? (movablelimits=>'false'):())},
   $text]; }

## (FLOAT|POST)(SUB|SUPER)SCRIPT's should NOT remain in successfully parsed math.
# This gives something `presentable', though not correct.
# What to use for base? I can't reasonably go up & grap the preceding token...
# I doubt an empty <mi/> is valid, but what is?
sub pmml_unparsed_script {
  my($x,$y,$script)=@_;
  [ ($y eq 'SUB' ? 'm:msub' : 'm:msup' ), {}, ['m:mi'],
    pmml_smaller($script)]; }

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Support functions for Content MathML
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sub cmml_top {
  my($node,$style)=@_;
  cmml($node); }

sub cmml {
  my($node)=@_;
  return ['m:merror',{},['m:mtext',{},"Missing Subexpression"]] unless $node;
  $node = realize($node) if $node->localname eq 'XMRef';
  my $tag = $node->localname;
  if($tag eq 'XMath'){
    my($item,@rest)=  element_nodes($node);
    print STDERR "Warning! got extra nodes for content!\n" if @rest;
    cmml($item); }
  elsif($tag eq 'XMDual'){
    my($content,$presentation) = element_nodes($node);
    cmml($content); }
  elsif($tag eq 'XMWrap'){	# Only present if parsing failed!
    pmml_row(map(pmml($_),element_nodes($node))); } # ????
  elsif($tag eq 'XMApp'){
    my($op,@args) = element_nodes($node);
    if(!$op){
      ['m:merror',{},['m:mtext',{},"Missing Operator"]]; }
    else {
      $op = realize($op);		# NOTE: Could loose open/close on XMRef ???
      &{ lookupContent('Apply',$op->getAttribute('role'),getTokenMeaning($op)) }($op,@args); }}
  elsif($tag eq 'XMTok'){
    &{ lookupContent('Token',$node->getAttribute('role'),getTokenMeaning($node)) }($node); }
  elsif($tag eq 'XMHint'){	# ????
    &{ lookupContent('Hint',$node->getAttribute('role'),getTokenMeaning($node)) }($node); }
  else {
    ['m:mtext',{},$node->textContent]; }}

# Or csymbol if there's some kind of "defining" attribute?
sub cmml_ci {
  my($item)=@_;
  my $font    = (ref $item ? $item->getAttribute('font') : undef);
  my $variant = ($font && $mathvariants{$font})||'';
  my $content = (ref $item ?  $item->textContent : $item);
  if($content =~ /^.$/){	# Single char?
    if($variant eq 'italic'){ $variant = ''; } # Defaults to italic
    elsif(!$variant){ $variant = 'normal'; }}  # must say so explicitly.
#  ['m:csymbol',{($variant ? (mathvariant=>$variant) : ())},$content]; }
  ['m:ci',{},$content]; }

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Tranlators
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# An issue here:
#  Some constructs are pretty purely presentational.  Hopefully, these would
# only appear in XWrap's or in the presentation branch of an XMDual, so we won't
# attempt to convert them to content.  But if we do, should we warn?
# ================================================================================
# Tokens

DefMathML("Token:?:?",           \&pmml_mi, \&cmml_ci);

DefMathML("Token:ADDOP:?",       \&pmml_mo);
DefMathML("Token:ADDOP:plus",    undef,     sub { ['m:plus'];});
DefMathML("Token:ADDOP:minus",   undef,     sub { ['m:minus'];});

DefMathML("Token:MULOP:?",       \&pmml_mo);
DefMathML("Token:MULOP:times",   undef,     sub { ['m:times'];});
DefMathML("Token:MULOP:\x{2062}",undef,     sub { ['m:times'];});
DefMathML("Token:MULOP:div",     undef,     sub { ['m:divide'];});
DefMathML("Token:SUPOP:?",       \&pmml_mo);

DefMathML("Token:RELOP:?",      \&pmml_mo);
DefMathML("Token:RELOP:eq",      undef,     sub { ['m:eq'];});
DefMathML("Token:RELOP:\x{2260}",undef,     sub { ['m:neq'];}); # \ne, not-eq .. ???
DefMathML("Token:RELOP:greater", undef,     sub { ['m:gt'];});
DefMathML("Token:RELOP:less",    undef,     sub { ['m:lt'];});
DefMathML("Token:RELOP:less-eq", undef,     sub { ['m:leq'];});
DefMathML("Token:RELOP:greater-eq",undef,   sub { ['m:geq'];});

DefMathML("Token:PUNCT:?",       \&pmml_mo);
DefMathML("Token:PERIOD:?",      \&pmml_mo);
DefMathML("Token:SUMOP:?",       \&pmml_mo);
DefMathML("Token:INTOP:?",       \&pmml_mo);
DefMathML("Token:LIMITOP:?",     \&pmml_mo);
DefMathML("Token:OPERATOR:?",    \&pmml_mo);
DefMathML("Token:OPEN:?",        \&pmml_mo);
DefMathML("Token:CLOSE:?",       \&pmml_mo);
DefMathML("Token:MIDDLE:?",      \&pmml_mo);
DefMathML("Token:VERTBAR:?",     \&pmml_mo);
DefMathML("Token:ARROW:?",       \&pmml_mo);
DefMathML("Token:METARELOP:?",   \&pmml_mo);
DefMathML("Token:OVERACCENT:?",  \&pmml_mo);
DefMathML("Token:UNDERACCENT:?", \&pmml_mo);

DefMathML("Token:NUMBER:?",
	  sub { ['m:mn',{},$_[0]->textContent]; },
	  sub { ['m:cn',{},$_[0]->textContent]; });
DefMathML("Token:?:Empty", sub { ['m:none']} );

DefMathML("Token:?:\x{2061}", \&pmml_mo); # FUNCTION APPLICATION
DefMathML("Token:?:\x{2062}", \&pmml_mo); # INVISIBLE TIMES


DefMathML("Token:OPFUNCTION:exp",      undef, sub { ['m:exp']; });
DefMathML("Token:OPFUNCTION:ln",       undef, sub { ['m:ln']; });
DefMathML("Token:OPFUNCTION:log",      undef, sub { ['m:log']; });
DefMathML("Token:TRIGFUNCTION:sin",    undef, sub { ['m:sin']; });
DefMathML("Token:TRIGFUNCTION:cos",    undef, sub { ['m:cos']; });
DefMathML("Token:TRIGFUNCTION:tan",    undef, sub { ['m:tan']; });
DefMathML("Token:TRIGFUNCTION:sec",    undef, sub { ['m:sec']; });
DefMathML("Token:TRIGFUNCTION:csc",    undef, sub { ['m:csc']; });
DefMathML("Token:TRIGFUNCTION:cot",    undef, sub { ['m:cot']; });
DefMathML("Token:TRIGFUNCTION:sinh",   undef, sub { ['m:sinh']; });
DefMathML("Token:TRIGFUNCTION:cosh",   undef, sub { ['m:cosh']; });
DefMathML("Token:TRIGFUNCTION:tanh",   undef, sub { ['m:tanh']; });
DefMathML("Token:TRIGFUNCTION:sech",   undef, sub { ['m:sech']; });
DefMathML("Token:TRIGFUNCTION:csch",   undef, sub { ['m:csch']; });
DefMathML("Token:TRIGFUNCTION:coth",   undef, sub { ['m:coth']; });
DefMathML("Token:OPFUNCTION:arcsin",   undef, sub { ['m:arcsin']; });
DefMathML("Token:OPFUNCTION:arccos",   undef, sub { ['m:arccos']; });
DefMathML("Token:OPFUNCTION:arctan",   undef, sub { ['m:arctan']; });
DefMathML("Token:OPFUNCTION:arccosh",  undef, sub { ['m:arccosh']; });
DefMathML("Token:OPFUNCTION:arccot",   undef, sub { ['m:arccot']; });
DefMathML("Token:OPFUNCTION:arccoth",  undef, sub { ['m:arccoth']; });
DefMathML("Token:OPFUNCTION:arccsc",   undef, sub { ['m:arcscsc']; });
DefMathML("Token:OPFUNCTION:arccsch",  undef, sub { ['m:arccsch']; });
DefMathML("Token:OPFUNCTION:arcsec",   undef, sub { ['m:arcsec']; });
DefMathML("Token:OPFUNCTION:arcsech",  undef, sub { ['m:arcsech']; });
DefMathML("Token:OPFUNCTION:arcsinh",  undef, sub { ['m:arcsinh']; });
DefMathML("Token:OPFUNCTION:arctanh",  undef, sub { ['m:arctanh']; });


# Token elements:
#   cn, ci, csymbol
# Basic Content elements:
#   apply, interval, inverse, sep, condition, declare, lambda, compose, ident,
#   domain, codomain, image, domainofapplication, piecewise, piece, otherwise
# Arithmetic, Algebra and Logic:
#   quotient, factorial, divide, max, min, minus, plus, power, rem, times, root
#   gcd, and, or, xor, not, implies, forall, exists, abs, conjugate, arg, real,
#   imaginary, lcm, floor, ceiling.
# Relations:
#   eq, neq, gt, lt, geq, leq, equivalent, approx, factorof
# Calculus and Vector Calculus:
#   int, diff, partialdiff, lowlimit, uplimit, bvar, degree, 
#   divergence, grad, curl, laplacian.
# Theory of Sets,
#   set, list, union, intersect, in, notin, subset, prsubset, notsubset, notprsubset,
#   setdiff, card, cartesianproduct.
# Sequences and Series:
#   sum, product, limit, tendsto
# Elementary Classical Functions,
#   exp, ln, log, sin, cos tan, sec, csc, cot, sinh, cosh, tanh, sech, csch, coth,
#   arcsin, arccos, arctan, arccosh, arccot, arccoth, arccsc, arccsch, arcsec, arcsech,
#   arcsinh, arctanh
# Statistics:
#   mean, sdev, variance, median, mode, moment, momentabout
# Linear Algebra:
#   vector, matrix, matrixrow, determinant, transpose, selector, 
#   vectorproduct, scalarproduct, outerproduct.
# Semantic Mapping Elements
#   annotation, semantics, annotation-xml
# Constant and Symbol Elements
#   integers, reals, rationals, naturalnumbers, complexes, primes,
#   exponentiale, imaginaryi, notanumber, true, false, emptyset, pi,
#   eulergamma, infinity

# ================================================================================
# Hints
DefMathML('Hint:?:?', sub { undef; });
# ================================================================================
# Applications.

DefMathML('Apply:?:?', sub {
  my($op,@args)=@_;
  ['m:mrow',{},
   pmml($op),pmml_mo("\x{2061}"),	# FUNCTION APPLICATION
   pmml_parenthesize(pmml_punctuate($op->getAttribute('separators'),@args),
		     $op->getAttribute('argopen'),$op->getAttribute('argclose'))]; },
  sub {
    my($op,@args)=@_;
    ['m:apply',{},cmml($op), map(cmml($_),@args)]; });

sub pmml_bigop {
  my($op,$body)=@_;
  ['m:mrow',{}, pmml($op), pmml_unrow(pmml($body))]; }

  
DefMathML('Apply:BIGOP:?',\&pmml_bigop);
DefMathML('Apply:INTOP:?',\&pmml_bigop);
DefMathML('Apply:SUMOP:?',\&pmml_bigop);


DefMathML('Apply:OVERACCENT:?', sub {
  my($accent,$base)=@_;
  ['m:mover',{accent=>'true'}, pmml($base),pmml_smaller($accent)]; });

DefMathML('Apply:UNDERACCENT:?', sub {
  my($accent,$base)=@_;
  ['m:munder',{accent=>'true'}, pmml($base),pmml_smaller($accent)]; });

# Top level relations
DefMathML('Apply:?:Formulae',sub { 
  my($op,@elements)=@_;
  pmml_punctuate($op->getAttribute('separators'),@elements); });

DefMathML('Apply:?:MultiRelation',sub { 
  my($op,@elements)=@_;
  pmml_row(map(pmml($_),@elements)); });

# Defaults for various parts-of-speech

sub pmml_script {
  my($script)=@_;
  ($script ? pmml_smaller($script) : ['m:empty']); }

# Since we're keeping track of display style, under/over vs. sub/super
# We've got to override MathML's desire to do it for us.
# Here, we make sure the eventual inner operator (if any) has
# movablelimits disabled.
# NOTE: Another issue is when the base is "embellished", in particular
# has sub/superscripts of it's own.
# Mozilla (at least?) centers the over/under wrong in that case.
# The OVERUNDERHACK makes the sub & superscripts have 0 width 
# in this situation.
# Worried that this will end up biting me, though...
sub do_overunder {
  my($tag,$base,@scripts)=@_;
  { local $LaTeXML::MathML::NOMOVABLELIMITS=1;
    local $LaTeXML::MathML::OVERUNDERHACKS=1;
    $base = pmml($base); }
  my $form = [$tag,{},$base,map(pmml_smaller($_),@scripts)];
  if($LaTeXML::MathML::STYLE ne 'display'){ # Workaround Mozilla bug (?)
    ['m:mstyle',{displaystyle=>'false'},$form]; }
  else {
    $form; }}

sub do_subsup {
  my($tag,$base,@scripts)=@_;
  $base = pmml($base);
  @scripts = map(pmml_smaller($_),@scripts);
  if($LaTeXML::MathML::OVERUNDERHACKS){
    @scripts = map(['m:mpadded',{width=>'0'},$_],@scripts); }
  [$tag,{},$base,@scripts]; }

sub pmml_script_handler {
  my($op,$base,$script)=@_;
  my(@pres,@posts);
  my($prelevel,$postlevel)=(0,0);
  my ($y) = ($op->getAttribute('role')||'') =~ /^(SUPER|SUB)SCRIPTOP$/;
  my ($x,$l)= ($op->getAttribute('scriptpos')||'post0')
    =~ /^(pre|mid|post)?(\d+)?$/;
  if($x eq 'pre'){
    if($y eq 'SUB'){
      push(@pres,[$script,undef]); $prelevel=$l; }
    elsif($y eq 'SUPER'){
      push(@pres,[undef,$script]); $prelevel=$l; }}
  else {
    if($y eq 'SUB'){
      push(@posts,[$script,undef]); $postlevel=$l; }
    elsif($y eq 'SUPER'){
      push(@posts,[undef,$script]); $postlevel=$l; }}

  # Keep from having multiple scripts when $loc is stack!!!
  while(1){
    last unless $base->localname eq 'XMApp';
    my($xop,$xbase,$xscript) = element_nodes($base);
    last unless ($xop->localname eq 'XMTok');
    my ($ny) = ($xop->getAttribute('role')||'') =~ /^(SUPER|SUB)SCRIPTOP$/;
    last unless $ny;
    my ($nx,$nl)= ($xop->getAttribute('scriptpos')||'postsup0')
      =~ /^(pre|mid|post)?(\d+)?$/;
    last unless ($x ne 'mid') || ($nx eq 'mid');

    my $spos = ($ny eq 'SUB' ? 0 : 1);
    if($nx eq 'pre'){
      push(@pres,[undef,undef]) # New empty pair (?)
	if($prelevel ne $nl) || $pres[-1][$spos];
      $pres[-1][$spos] = $xscript; $prelevel = $nl; }
    else {
      unshift(@posts,[undef,undef]) # New empty pair (?)
	if($postlevel ne $nl) || $posts[0][$spos];
      $posts[0][$spos] = $xscript; $postlevel = $nl; }
    $base = $xbase;
  }
  if(scalar(@pres) > 0){
    ['m:mmultiscripts',{},
     pmml($base),
     map( (pmml_script($_->[0]),pmml_script($_->[1])), @posts),
     ['m:mprescripts'],
     map( (pmml_script($_->[0]),pmml_script($_->[1])), @pres)]; }
  elsif(scalar(@posts) > 1){
    ['m:mmultiscripts',{},
     pmml($base),
     map( (pmml_script($_->[0]),pmml_script($_->[1])), @posts)]; }
  elsif(!defined $posts[0][1]){
    if($x eq 'mid'){ do_overunder('m:munder',$base,$posts[0][0]); }
    else           { do_subsup('m:msub',$base,$posts[0][0]); }}
  elsif(!defined $posts[0][0]){
    if($x eq 'mid'){ do_overunder('m:mover',$base,$posts[0][1]); }
    else           { do_subsup('m:msup',$base,$posts[0][1]); }}
  else {
    if($x eq 'mid'){ do_overunder('m:munderover',$base,$posts[0][0],$posts[0][1]); }
    else           { do_subsup('m:msubsup',$base,$posts[0][0],$posts[0][1]); }}}


DefMathML('Apply:SUPERSCRIPTOP:?', \&pmml_script_handler);
DefMathML('Apply:SUBSCRIPTOP:?',   \&pmml_script_handler);

DefMathML('Apply:POSTFIX:?', sub {
  ['m:mrow',{},pmml($_[1]),pmml($_[0])]; });

## DefMathML('Apply:?:sideset', sub {
##  my($op,$presub,$presup,$postsub,$postsup,$base)=@_;
##  ['m:mmultiscripts',{},
##   pmml($base),pmml_smaller($postsub),pmml_smaller($postsup), 
##   ['m:mprescripts'],pmml_smaller($presub),pmml_smaller($presup)]; });

DefMathML('Apply:ADDOP:?', \&pmml_infix);
DefMathML('Apply:MULOP:?', \&pmml_infix);
DefMathML('Apply:RELOP:?', \&pmml_infix);
DefMathML('Apply:ARROW:?', \&pmml_infix);
DefMathML('Apply:COMPOSEOP:?', \&pmml_infix);
DefMathML('Apply:METARELOP:?',\&pmml_infix);

DefMathML('Apply:FENCED:?',sub {
  my($op,@elements)=@_;
  pmml_parenthesize(pmml_punctuate($op->getAttribute('separators'),@elements),
		    $op->getAttribute('argopen'), $op->getAttribute('argclose')); });

# Note how annoyingly MML's arrays don't change the style the same
# way TeX does!
DefMathML('Apply:STACKED:?', sub {
  my($op,$over,$under)=@_;
  my $stack = ['m:mtable',{rowspacing=>"0.2ex", columnspacing=>"0.4em"},
	       ['m:mtr',{},['m:mtd',{},pmml($over)]],
	       ['m:mtr',{},['m:mtd',{},pmml($under)]]];
  if($LaTeXML::MathML::STYLE =~/^(text|script)$/){
    ['m:mstyle',{scriptlevel=>'+1'},$stack]; }
  else {
    $stack; }});

# Various specific formatters.
DefMathML('Apply:?:sqrt', sub { ['m:msqrt',{},pmml($_[1])]; });
DefMathML('Apply:?:root', sub { ['m:mroot',{},pmml($_[2]),
				 pmml_smaller($_[1])]; });

DefMathML('Apply:?:div', sub {
  my($op,$num,$den)=@_;
  my $style = $op->getAttribute('style');
  my $thickness = $op->getAttribute('thickness');
  ['m:mfrac',{($thickness ? (linethickness=>$thickness):()),
	    ($style && ($style eq 'inline') ? (bevelled=>'true'):())},
   pmml_smaller($num),pmml_smaller($den)]; });

DefMathML('Apply:?:LimitFrom', sub {
  my($op,$arg,$dir)=@_;
  ['m:mrow',{},pmml($arg),pmml($dir)]; });

DefMathML('Apply:?:Annotated', sub {
  my($op,$var,$annotation)=@_;
  ['m:mrow',{},pmml($var),pmml($annotation)];});

# NOTE: Markup probably isn't right here....
DefMathML('Apply:?:AT', sub {
  my($op,$expr,$value)=@_;
  pmml_row(pmml($expr),['m:msub',{},pmml_mo('|'),pmml_smaller($value)]); });


# Have to deal w/ screwy structure:
# If denom is a sum/diff then last summand can be: cdots, cfrac 
#  or invisibleTimes of cdots and something which could also be a cfrac!
# NOTE: Deal with cfracstyle!!
# OR: Can XMDual build the right stuff?
# AND, the propogation of style is likely wrong...
sub do_cfrac {
  my($numer,$denom)=@_;
  if($denom->localname eq 'XMApp'){ # Denominator is some kind of application
    my ($denomop,@denomargs)=element_nodes($denom);
    if(($denomop->getAttribute('role')||'') eq 'ADDOP'){ # Is it a sum or difference?
      my $last = pop(@denomargs);			# Check last operand in denominator.
      # this is the current contribution to the cfrac (if we match the last term)
      my $curr = ['m:mfrac',{},pmml_smaller($numer),
		  ['m:mrow',{},pmml_infix($denomop,@denomargs),
		   pmml_smaller($denomop)]];
      if(getTokenMeaning($last) eq 'cdots'){ # Denom ends w/ \cdots
	return ($curr,pmml($last));}		   # bring dots up to toplevel
      elsif($last->localname eq 'XMApp'){	   # Denom ends w/ application --- what kind?
	my($lastop,@lastargs)=element_nodes($last);
	if(getTokenMeaning($lastop) eq 'cfrac'){ # Denom ends w/ cfrac, pull it to toplevel
#	  return ($curr,do_cfrac(@lastargs)); }
	  return ($curr,pmml($last)); }
	elsif((getTokenMeaning($lastop) eq "\x{2062}")  # Denom ends w/ * (invisible)
	      && (scalar(@lastargs)==2) && (getTokenMeaning($lastargs[0]) eq 'cdots')){
	  return ($curr,pmml($lastargs[0]),pmml($lastargs[1])); }}}}
  (['m:mfrac',{},pmml_smaller($numer),pmml_smaller($denom)]); }

DefMathML('Apply:?:cfrac', sub {
  my($op,$numer,$denom)=@_;
  pmml_row(do_cfrac($numer,$denom)); });

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Specific converters for Presentation, Content, or Parallel.
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#================================================================================
# Presentation MathML
package LaTeXML::Post::MathML::Presentation;
use strict;
use base qw(LaTeXML::Post::MathML);

sub processNode { LaTeXML::Post::MathML::pmml_top($_[1],$_[2]); }
sub getEncodingName { 'MathML-Presentation'; }

#================================================================================
# Content MathML
package LaTeXML::Post::MathML::Content;
use strict;
use base qw(LaTeXML::Post::MathML);

sub processNode { LaTeXML::Post::MathML::cmml_top($_[1],$_[2]); }
sub getEncodingName { 'MathML-Content'; }

#================================================================================
# Parallel MathML
package LaTeXML::Post::MathML::Parallel;
use strict;
use base qw(LaTeXML::Post::MathML);

sub processNode {
  my($self,$node,$style)=@_;
  my($main_proc,@annotation_procs)=@{$$self{math_processors}};
  ['m:semantics',{},
   $main_proc->processNode($node,$style),
   map( ['m:annotation-xml',{encoding=>$_->getEncodingName},
	 $_->processNode($node,$style)],
	@annotation_procs) ]; }
sub getEncodingName { 'MathML-Parallel'; }

#================================================================================

1;
