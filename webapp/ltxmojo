#!/usr/bin/perl

use Mojolicious::Lite;
use LaTeXML::Util::Startup;
use LaTeXML::Util::Extras;
use Data::Dumper;

our $version = '0.1';
our $dbfile = 'LaTeXML_Mojo.cache';

$ENV{MOJO_HOME} = '.';

# Make signed cookies secure
app->secret('LaTeXML is the way to go!');

#Prep a LaTeXML Startup instance
my $startup = LaTeXML::Util::Startup->new(dbfile=>$ENV{MOJO_HOME}.'/'.$dbfile);
# Do a one-time check for admin, add if none:
print $startup->modify_user('admin','admin','admin') unless $startup->exists_user('admin');

helper prepare_options => sub {
  my ($self,$param) = @_;
  my $opt={};
  #TODO: Make sure lists go to array refs, etc.
  foreach ($param->param) { $opt->{lc($_)} = $param->param($_)||1; }
  if (! defined $opt->{profile}) {
    if (defined $opt->{user} && $startup->verify_user($opt->{user},$opt->{password})) {
      $opt->{profile} = $startup->lookup_user_property($opt->{user},'default') || 'custom';
    } else {
      $opt->{profile} = 'custom';
    }
  }
  $opt->{identity} = "Mojo for LaTeXML, v$version; Profile: ".$opt->{profile};
  delete $opt->{procs_post};
  if ($opt->{pmml}) {$opt->{procs_post}->{pmml}=1; delete $opt->{pmml}; }
  if ($opt->{cmml}) {$opt->{procs_post}->{cmml}=1; delete $opt->{cmml}; }
  if ($opt->{keepTeX}) {$opt->{procs_post}->{keepTeX}=1; delete $opt->{keepTeX}; }
  return $opt;
};

post '/convert' => sub {
  my $self = shift;
  my $param = $self->req->body_params;
  my $opt = $self->prepare_options($param);

  # TeX is data, separate
  my $tex = $opt->{tex}; delete $opt->{tex};
  # Math profile should get a mathdoc() wrapper
  $tex = MathDoc($tex) if (lc($opt->{profile}) eq "math");
  # We now have a LaTeXML options object - $opt.
  my $daemon = $startup->find_daemon($opt);
  #Override/extend with session-specific options in $opt:
  $daemon->prepare_session($opt);
  #Send a request:
  my $response = $daemon->convert($tex);
  my ($result,$status,$log);
  if (defined $response) {
    ($result,$status,$log) = map {$response->{$_}} qw(result status log);
  }
  # Special for math profile: get out the m:math
  $result = GetMath($result) if (lc($opt->{profile}) eq "math");

  $result = $result->toString(1) if defined $result;

  $self->render(json => {result=>$result,status=>$status,log=>$log});
};

get '/login' => sub {
  my $self = shift;
  my $name = $self->param('name') || '';
  my $pass = $self->param('pass') || '';
  return $self->render unless ($startup->verify_user($name,$pass) eq 'admin');
  $self->session(name => $name);
  $self->flash(message => "Thanks for logging in $name!");
  $self->redirect_to('admin');
} => 'login';

get '/about' => sub {
  my $self = shift;
} => 'about';


get '/' => sub {
  my $self = shift;
  return $self->redirect_to('about');
};

get '/logout' => sub {
  my $self = shift;
  $self->session(expires => 1);
  $self->flash(message => "Successfully logged out!");
  $self->redirect_to('login');
};

get '/admin' => sub {
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  $self->stash(startup=>$startup);
  $self->render;
} => 'admin';

get '/upload' => sub {
  my $self=shift;
  $self->render;
} => 'upload';

any '/ajax' => sub {
  my $self=shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $header = $self->req->headers->header('X-Requested-With');
  if ($header && $header eq 'XMLHttpRequest') {
    # Users API:
    if ($self->param('user_action')) {
      my $name = $self->param('name');
      my $message ='This request was empty, please resend with Name set!';
      given ($self->param('user_action')) {
        when ('modify') {
          if ($name) {
            my $pass = $self->param('pass');
            my $role = $self->param('role');
            my $default = $self->param('default_profile');
            $message = $startup->modify_user($name,$pass,$role,$default);
          }}
        when ('add') {
          if ($name) {
            my $pass = $self->param('pass');
            my $role = $self->param('role');
            my $default = $self->param('default_profile');
            $message = $startup->modify_user($name,$pass,$role,$default);
          }}
        when ('delete') { $message = $startup->delete_user($name) if $name; }
        when ('startup_users') { $self->render(json=>{users=>$startup->users});}
        when ('overview_users') { 
          my $users = $startup->users;
          my $summary = [];
          push @$summary, $startup->summary_user($_) foreach (@$users);
          $self->render(json=>{users=>$users, summary=>$summary});
        }
        default {$message="Unrecognized Profile Action!"}};
      $self->render(json=>{message=>$message});
    }

    # Profiles API:
    if ($self->param('profile_action')) {
      my $message ='This request was empty, please resend with profile_action set!';
      given ($self->param('profile_action')) {
        when ('startup_profiles') {
          $self->render(json=>{profiles=>[@{$startup->profiles}]});
        }
        when ('select') {
	  my $pname = $self->param('profile_name');
          $self->render(json=>{message=>'Please provide a profile name!'}) unless $pname;
          my $form = $startup->summary_profile($pname);
          my $lines = 0;
          $lines++ while ($form =~ /<[tb]r/g);
          my $minh = "min-height: ".($lines*5)."px;";
	  my $message = "Selected profile: ". $pname;
          use Mojo::JSON;
          my $json   = Mojo::JSON->new;
	  open TMP, ">", "/tmp/json.txt";
          print TMP $json->encode({form=>$form,style=>$minh,message=>$message});
          close TMP;
          $self->render(text=>$json->encode({form=>$form,style=>$minh,message=>$message}));
        }
        default {$self->render(json=>{message=>"Unrecognized Profile Action!"})}
      };
      $self->render(json=>{message=>$message});
    }
    # General Actions API:
    
 } else {$self->render(text=>"Only AJAX request are accepted at this route!\n");}
};

app->start;
__END__

=pod

=head1 SYNOPSIS

Routes:
/
/convert
/login
/logout
/admin
/upload
/process_request

=head1 DESCRIPTION

Web App for LaTeXML

=head2 HELPERS

=over 4

=item C<< foo >>

Foo

=back

=head2 CUSTOMIZATION OPTIONS
 user => username
 password => password
 destination => file  specifies destination file, requires 'local'.
 output => file       [obsolete synonym for --destination]
 postdest => file     specifies destination file for postprocessing,
 TODO?  --postlog=file     specifies log file for postprocessing, 
                    requires --local, --post 
                    default is appending to the --log file.
 TODO?  --summary          print a one line summary message of 
                    the conversion outcome
 TODO?  --autoflush=count  Automatically restart the daemon after 
                    "count" inputs. Good practice for vast batch 
                    jobs. (default: 10000)
 TODO? --local            Request a local server (default: off)
                    Required for the --log and --destination switches
                    Required for processing filenames on input
                      requires 'local', 'post'
 TODO: Note we need an admin user to set and unset 'local'
=head1 AUTHOR

Deyan Ginev <d.ginev@jacobs-university.de>

=head1 COPYRIGHT

Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the US.

=cut
